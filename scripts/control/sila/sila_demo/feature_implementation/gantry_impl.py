# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING, List

from sila2.server import MetadataDict
from controllably.Move.Cartesian import Gantry

from ..generated.gantry import (
    GantryBase,
    Home_Responses,
    Move_Responses,
    MoveBy_Responses,
    MoveTo_Responses,
    MoveToSafeHeight_Responses,
    SafeMoveTo_Responses,
)

if TYPE_CHECKING:
    from ..server import Server

configs = {
    'port': 'COM7',
    'limits': [[0,-480,-195.5],[180,0,0]],
    'calibrated_offset': [[-206, 468.75,197.7],[-90,0,0]],
    'safe_height': -1,
    'home_position': [[0,0,0],[0,0,0]],
    'scale': 1.0,
    'verbose': True
}

class GantryImpl(GantryBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def get_RobotPosition(self, *, metadata: MetadataDict) -> str:
        position = self.gantry.robot_position
        return position.toJSON()
        raise NotImplementedError  # TODO

    def get_HomePosition(self, *, metadata: MetadataDict) -> str:
        position = self.gantry.home_position
        return position.toJSON()
        raise NotImplementedError  # TODO

    def get_Position(self, *, metadata: MetadataDict) -> str:
        position = self.gantry.position
        return position.toJSON()
        raise NotImplementedError  # TODO

    def Home(self, *, metadata: MetadataDict) -> Home_Responses:
        return self.gantry.home()
        raise NotImplementedError  # TODO

    def Move(
        self, Axis: str, By: float, SpeedFactor: float|None=None, Jog: bool=False, Rapid: bool=False, *, metadata: MetadataDict
    ) -> Move_Responses:
        position = self.gantry.move(
            axis=Axis,
            by=By,
            speed_factor=SpeedFactor,
            jog=Jog,
            rapid=Rapid
        )
        return position.toJSON()
        raise NotImplementedError  # TODO

    def MoveBy(
        self, By: List[float], SpeedFactor: float|None=None, Jog: bool=False, Rapid: bool=False, Robot: bool=False, *, metadata: MetadataDict
    ) -> MoveBy_Responses:
        position = self.gantry.moveBy(
            by=By,
            speed_factor=SpeedFactor,
            jog=Jog,
            rapid=Rapid,
            robot=Robot
        )
        return position.toJSON()
        raise NotImplementedError  # TODO

    def MoveTo(
        self, To: List[float], SpeedFactor: float|None=None, Jog: bool=False, Rapid: bool=False, Robot: bool=False, *, metadata: MetadataDict
    ) -> MoveTo_Responses:
        position = self.gantry.moveTo(
            to=To,
            speed_factor=SpeedFactor,
            jog=Jog,
            rapid=Rapid,
            robot=Robot
        )
        raise NotImplementedError  # TODO

    def MoveToSafeHeight(self, SpeedFactor: float|None=None, *, metadata: MetadataDict) -> MoveToSafeHeight_Responses:
        position = self.gantry.moveToSafeHeight(
            speed_factor=SpeedFactor
        )
        return position.toJSON()
        raise NotImplementedError  # TODO

    def SafeMoveTo(
        self,
        To: List[float],
        SpeedFactorLateral: float|None=None,
        SpeedFactorUp: float|None=None,
        SpeedFactorDown: float|None=None,
        Jog: bool=False,
        RotationBeforeLateral: bool=False,
        Robot: bool=False,
        *,
        metadata: MetadataDict,
    ) -> SafeMoveTo_Responses:
        position = self.gantry.safeMoveTo(
            to=To,
            speed_factor_lateral=SpeedFactorLateral,
            speed_factor_up=SpeedFactorUp,
            speed_factor_down=SpeedFactorDown,
            jog=Jog,
            rotation_before_lateral=RotationBeforeLateral,
            robot=Robot
        )
        return position.toJSON()
        raise NotImplementedError  # TODO

    def start(self):
        self.gantry = Gantry(**configs)
        return super().start()
    
    def stop(self):
        self.gantry.shutdown()
        return super().stop()
