# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict
from controllably.Transfer.Liquid.Pipette.Sartorius import Sartorius

from ..generated.sartorius import (
    Aspirate_Responses,
    Attach_Responses,
    Blowout_Responses,
    Cycle_Responses,
    Dispense_Responses,
    Eject_Responses,
    Empty_Responses,
    Fill_Responses,
    Home_Responses,
    Pullback_Responses,
    Rinse_Responses,
    SartoriusBase,
)

if TYPE_CHECKING:
    from ..server import Server

configs = {
    'port': 'COM0',
    'channel': 1,
    'offset': [0,0,0],
    'tip_inset_mm': 12,
    'tip_length': 97,
    'verbose': True,
    'simulation': True
}

class SartoriusImpl(SartoriusBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def get_TipLength(self, *, metadata: MetadataDict) -> float:
        return self.sartorius.tip_length
        raise NotImplementedError  # TODO

    def get_Capacity(self, *, metadata: MetadataDict) -> float:
        return self.sartorius.capacity
        raise NotImplementedError  # TODO

    def get_IsTipOn(self, *, metadata: MetadataDict) -> bool:
        return self.sartorius.isTipOn()
        raise NotImplementedError  # TODO

    def Aspirate(
        self,
        Volume: float,
        Speed: float|None=None,
        Reagent: str|None=None,
        Pullback: bool=False,
        Delay: int=0,
        Pause: bool=False,
        Ignore: bool=False,
        *,
        metadata: MetadataDict,
    ) -> Aspirate_Responses:
        return self.sartorius.aspirate(
            volume=Volume,
            speed=Speed,
            reagent=Reagent,
            pullback=Pullback,
            delay=Delay,
            pause=Pause,
            ignore=Ignore
        )
        raise NotImplementedError  # TODO

    def Dispense(
        self,
        Volume: float,
        Speed: float|None=None,
        Blowout: bool=False,
        Delay: int=0,
        Pause: bool=False,
        Ignore: bool=False,
        *,
        metadata: MetadataDict,
    ) -> Dispense_Responses:
        return self.sartorius.dispense(
            volume=Volume,
            speed=Speed,
            blowout=Blowout,
            delay=Delay,
            pause=Pause,
            ignore=Ignore
        )
        raise NotImplementedError  # TODO

    def Blowout(self, Home: bool=True, *, metadata: MetadataDict) -> Blowout_Responses:
        return self.sartorius.blowout(home=Home)
        raise NotImplementedError  # TODO

    def Pullback(self, *, metadata: MetadataDict) -> Pullback_Responses:
        return self.sartorius.pullback()
        raise NotImplementedError  # TODO

    def Cycle(
        self, Volume: float, Speed: float|None=None, Reagent: str|None=None, Cycles: int=1, Delay: int=0, *, metadata: MetadataDict
    ) -> Cycle_Responses:
        return self.sartorius.cycle(
            volume=Volume,
            speed=Speed,
            reagent=Reagent,
            cycles=Cycles,
            delay=Delay
        )
        raise NotImplementedError  # TODO

    def Empty(self, Speed: float|None=None, Blowout: bool=False, Delay: int=0, Pause: int=0, *, metadata: MetadataDict) -> Empty_Responses:
        return self.sartorius.empty(
            speed=Speed,
            blowout=Blowout,
            delay=Delay,
            pause=bool(Pause)
        )
        raise NotImplementedError  # TODO

    def Fill(
        self, Speed: float|None=None, Reagent: str|None=None, Pullback: bool=False, Cycles: int=0, Delay: int=0, Pause: int=0, *, metadata: MetadataDict
    ) -> Fill_Responses:
        return self.sartorius.fill(
            speed=Speed,
            reagent=Reagent,
            pullback=Pullback,
            cycles=Cycles,
            delay=Delay,
            pause=bool(Pause)
        )
        raise NotImplementedError  # TODO

    def Rinse(self, Speed: float|None=None, Reagent: str|None=None, Cycles: int=3, Delay: int=0, *, metadata: MetadataDict) -> Rinse_Responses:
        return self.sartorius.rinse(
            speed=Speed,
            reagent=Reagent,
            cycles=Cycles,
            delay=Delay
        )
        raise NotImplementedError  # TODO

    def Attach(self, TipLength: float, *, metadata: MetadataDict) -> Attach_Responses:
        return self.sartorius.attach(tip_length=TipLength)
        raise NotImplementedError  # TODO

    def Eject(self, *, metadata: MetadataDict) -> Eject_Responses:
        return self.sartorius.eject()
        raise NotImplementedError  # TODO

    def Home(self, *, metadata: MetadataDict) -> Home_Responses:
        return self.sartorius.home()
        raise NotImplementedError  # TODO
    
    def start(self):
        self.sartorius = Sartorius(**configs)
        return super().start()
    
    def stop(self):
        return super().stop()
