{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Control-lab-ly","text":"<p>Lab Equipment Automation Package</p> <p> </p>"},{"location":"index.html#description","title":"Description","text":"<p>User-friendly package that simplifies the definition and control of reconfigurable setups for high-throughput experimentation and machine learning.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>Control-lab-ly can be found on PyPI and can be easily installed with <code>pip install</code>. <pre><code>$ python -m pip install control-lab-ly[all]\n</code></pre></p>"},{"location":"index.html#quickstart","title":"Quickstart","text":"<p>Import the desired class from the library and initialize to use. <pre><code>from controllably.Move.Cartesian import Gantry\nmover = Gantry(...)\nmover.connect()\nmover.safeMoveTo((x,y,z))\n</code></pre></p> <p>Explore the details for each object using the <code>help()</code> function, or the <code>?</code> operator within the IPython / Jupyter Notebook environment. <pre><code>help(Gantry)\n</code></pre></p>"},{"location":"index.html#device-support","title":"Device support","text":"<ul> <li>Make<ul> <li>(QInstruments) BioShake Orbital Shaker</li> <li>(Arduino-based devices)<ul> <li>Multi-channel LED array</li> <li>Multi-channel spin-coater</li> <li>Peltier device</li> </ul> </li> </ul> </li> <li>Measure<ul> <li>(BioLogic) via <code>easy-biologic</code> (optional)</li> <li>(Keithley) via <code>PyMeasure</code> (optional)</li> <li>(Sentron) SI series pH meters</li> <li>(Arduino-based device) <ul> <li>Precision mass balance</li> <li>Load cell</li> </ul> </li> </ul> </li> <li>Move<ul> <li>(Creality) Ender-3</li> <li>(Dobot) with <code>external/../dobot_api</code><ul> <li>M1 Pro</li> <li>MG400</li> </ul> </li> <li>(Arduino-based device) gantry robot running on GRBL</li> </ul> </li> <li>Transfer<ul> <li>(Sartorius) rLINE\u00ae dispensing modules</li> <li>(TriContinent) C Series syringe pumps</li> </ul> </li> <li>View<ul> <li>(FLIR) AX8 thermal imaging camera via <code>pyModbusTCP</code> (optional)</li> <li>(General) Web cameras with <code>cv2</code></li> </ul> </li> </ul>"},{"location":"index.html#advanced-usage","title":"Advanced Usage","text":"<p>Setup initialization can be greatly simplified with Control-lab-ly.</p> <p>To access files / folders in the project repository as you would with an installed package, use the <code>init()</code> function to add the project directory into PATH.</p> <pre><code>from controllably import init\ninit('project_root')\n\nfrom tools import ToolSetup01\nsetup = ToolSetup01.setup()\nsetup.MoverDevice.loadDeckFromFile(ToolSetup01.LAYOUT_FILE)\n</code></pre> <p>Here, the setup is initialized and returned with just <code>ToolSetup01.setup()</code>, and the layout is loaded with the <code>loadDeckFromFile</code> method.</p>"},{"location":"index.html#folder-structure","title":"Folder structure","text":"<p>To make full use of Control-lab-ly's features, a typical project file structure will need the <code>library</code> and <code>tools</code> folders. <pre><code>project_root/\n|\n\u251c\u2500\u2500 library/\n|   \u251c\u2500\u2500 deck/\n|   |   \u251c\u2500\u2500 layout_board_30x30.json\n|   |   \u2514\u2500\u2500 layout_board_60x30.json\n|   \u251c\u2500\u2500 labware/\n|   |   \u251c\u2500\u2500 generic_96_tiprack.json\n|   |   \u251c\u2500\u2500 generic_8_wellplate.json\n|   |   \u2514\u2500\u2500 generic_1_bin.json\n|   \u251c\u2500\u2500 plugins/\n|   |   \u251c\u2500\u2500 tool_part_1.py\n|   |   \u251c\u2500\u2500 tool_part_2.py\n|   |   \u2514\u2500\u2500 mock_module.py\n|   \u2514\u2500\u2500 __init__.py\n|\n\u251c\u2500\u2500 tools/\n|   \u251c\u2500\u2500 ToolSetup01/\n|   |   \u251c\u2500\u2500 __init__.py\n|   |   \u251c\u2500\u2500 config.yaml\n|   |   \u2514\u2500\u2500 layout.json\n|   \u251c\u2500\u2500 ToolSetup02/\n|   |   \u251c\u2500\u2500 __init__.py\n|   |   \u251c\u2500\u2500 config.yaml\n|   |   \u2514\u2500\u2500 layout.json\n|   \u251c\u2500\u2500 __init__.py\n|   \u2514\u2500\u2500 registry.yaml\n|\n\u251c\u2500\u2500 scripts/\n|   \u251c\u2500\u2500 experiment_script_1.py\n|   \u251c\u2500\u2500 experiment_2.ipynb\n|   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre></p> <p>Use <code>start_project_here(target_dir)</code> to generate the above file structure, <pre><code>from controllably import start_project_here\ncontrollably.start_project_here(\".\")\n</code></pre></p> <p>or the CLI to create the required directories. <pre><code>$ python -m controllably .\n</code></pre></p>"},{"location":"index.html#1-features","title":"1. Features","text":"<p>For more advanced uses, Control-lab-ly provides a host of tools to streamline the development of lab equipment automation. This includes setting up configuration files and writing plugins.</p> <ol> <li>Dynamic object initialization</li> <li>Reconfigurable complex tools</li> <li>Modular positioning system</li> <li>Application and network interoperability</li> </ol>"},{"location":"index.html#11-dynamic-object-initialization","title":"1.1 Dynamic object initialization","text":"<p>Control-lab-ly allows users to store all their tool configuration data in a YAML file, providing a single source of truth for all projects using the same set up. The <code>config.yaml</code> file stores the configuration for all the tools in the set up, which can be parsed by Control-lab-ly to initialize the tools using <code>get_setup()</code>. config.yaml<pre><code>MyDevice:                                   # user-defined name\n  module: controllably.Move.Cartesian       # \"from\" ...\n  class: Gantry                             # \"import\" ...\n  settings:\n    port: COM1                              # serial port address\n    setting_A: [300,0,200]\n    setting_B: [[0,1,0],[-1,0,0]]\n</code></pre></p> <p>A different serial port address or camera index may be used by different machines for the same device.</p> <p>See Section 2.1 to find out how to manage the different addresses used by different machines.</p>"},{"location":"index.html#12-reconfigurable-complex-tools","title":"1.2 Reconfigurable complex tools","text":"<p>Compound devices are similarly configured in the <code>config.yaml</code> file. The configuration details of the component tools are nested in <code>details</code>. config.yaml<pre><code>MyCompoundDevice:                           # user-defined name\n  module: controllably.Compound.LiquidMover\n  class: LiquidMover\n  settings:                                 # settings for compound device\n    speed_factor_lateral: null\n    speed_factor_up: 0.2\n    speed_factor_down: 0.2\n    speed_factor_pick_tip: 0.01\n    tip_approach_distance: 20\n    details:                                # nest component configuration in \"details\"\n      mover:                                # component name (defined in LiquidMover)\n        module: controllably.Move.Cartesian\n        class: Gantry\n        settings:\n          port: COM1 \n      liquid:                               # component name (defined in LiquidMover)\n        module: controllably.Transfer.Liquid.Pipette.Sartorius\n        class: Sartorius\n        settings:\n          port: COM22\n</code></pre></p> <p>Lastly, you can define shortcuts (or aliases) at the end of <code>config.yaml</code> to easily access the nested components of compound devices. config.yaml<pre><code>SHORTCUTS:\n  LiquidDevice: 'MyCompoundDevice.liquid'\n  MoverDevice: 'MyCompoundDevice.mover'\n</code></pre></p>"},{"location":"index.html#13-modular-positioning-system","title":"1.3 Modular positioning system","text":"<p>Control-lab-ly allows users to easily combine multiple modules and switch between local and global coordinates. The <code>layout.json</code> file stores the layout configuration of your physical workspace (<code>Deck</code>).</p> <p>Optional: if your setup does not involve moving objects around in a pre-defined workspace,  a layout configuration may not be required</p> layout.json<pre><code>{\n    \"metadata\": {\n        \"displayName\": \"Example Layout (main)\",\n        \"displayCategory\": \"deck\",\n        \"displayVolumeUnits\": \"\u00b5L\",\n        \"displayLengthUnits\": \"mm\",\n        \"tags\": []\n    },\n    \"dimensions\": [600,300,0],\n    \"cornerOffset\": [0,0,0],\n    \"orientation\": [0,0,0],\n    \"slots\": {\n        \"1\": {\n            \"name\": \"slotOne\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [160.5,6.5,0],\n            \"orientation\": [0,0,0]\n        },\n        \"2\": {\n            \"name\": \"slotTwo\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [310.5,6.5,0],\n            \"orientation\": [0,0,0],\n            \"labware_file\": \"project_root/library/labware/labware_wellplate.json\"\n        },\n        \"3\": {\n            \"name\": \"slotThree\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [460.5,6.5,0],\n            \"orientation\": [0,0,0]\n        }\n    },\n    \"zones\":{\n        \"A\":{ \n            \"dimensions\": [600,300,0],\n            \"cornerOffset\": [600,600,0],\n            \"orientation\": [-90,0,0],\n            \"deck_file\": \"project_root/library/deck/layout_sub.json\",\n            \"entry_waypoints\": [\n                [653.2, 224.6, 232]\n            ]\n        }\n    }\n}\n</code></pre> <p>The size and position of the <code>Deck</code> is defined by the <code>dimensions</code>, and combination of <code>cornerOffset</code> and <code>orientation</code> respectively.</p> <ul> <li><code>dimensions</code> is the (x,y,z) dimensions with respect to the deck's own coordinate system. </li> <li><code>cornerOffset</code> is the (x,y,z) coordinates of the bottom-left corner of the deck with respect to world coordinates (typically the origin). </li> <li><code>orientation</code> is the (rz,ry,rx) rotation of the deck about the bottom-left corner with respect to world coordinates (typically the identity rotation or zero rotation).</li> </ul> <p>Within the deck, <code>slots</code> and <code>zones</code> can be defined.</p> <ul> <li><code>slots</code> are spaces where Labware can be placed. These Labware can be individual tools or vessel holders. Indexing of slots increments numerically, typically starting from 1. </li> <li><code>zones</code> are regions of nested layouts. As such, a <code>Deck</code> of a smaller modular setup layout can be incorporated as part of a larger layout. Indexing of zones increments alphabetically, typically starting with 'A'.</li> </ul> <p>Here, the <code>dimensions</code>, <code>cornerOffset</code>, and <code>orientation</code> definitions apply similarly, except the latter two takes reference from the parent's origin and orientation. The filename definition in <code>labware_file</code> and <code>deck_file</code> can either be absolute filepaths, or relative to the project repository.</p> <p>This package uses the same Labware files as those provided by Opentrons, which can be found here, and custom Labware files can be created here. Additional fields can be added to the these Labware files to enable features such as plate stacking and collision avoidance.</p> <ul> <li><code>parameters.isStackable</code> is a boolean value defining if another Labware can be stacked above.</li> <li><code>slotAbove</code> defines a new slot above the Labware, with similar subfields <code>slotAbove.name</code>, <code>slotAbove.dimensions</code>, <code>slotAbove.cornerOffset</code>, and <code>slotAbove.orientation</code>.</li> <li><code>exclusionBuffer</code> is the offset from the lower and upper bounds of the Labware bounding box. i.e. [ [left, front, bottom], [right, back, top] ]</li> </ul> <p>WARNING: avoidance checks only apply to destination coordinates. Does not guarantee collision avoidance along intermediate path coordinates when using point-to-point move actions such as <code>move</code>, <code>moveBy</code> or <code>moveTo</code>. Use <code>safeMoveTo</code> instead.</p> <p>For zones, <code>entry_waypoints</code> lists a sequence of coordinates that defines a safe path a translation tool can take to transit into that particular zone.</p>"},{"location":"index.html#14-application-and-network-interoperability","title":"1.4 Application and network interoperability","text":"<p>To allow control of the setups over the network, or with other applications, Control-lab-ly provides a way to access the attributes and methods over a communication layer. A <code>Controller</code> encodes and decodes requests and responses using an <code>Interpreter</code>, serializing the data to be sent. <pre><code>from controllably.core.control import Controller\nfrom controllably.core.interpreter import JSONInterpreter\n\n# 'model' controllers receives requests, triggers execution in registered objects, \n# and transmits the resultant data\nworker = Controller(role='model', interpreter=JSONInterpreter())\nworker.setAddress('WORKER')\n\n# 'view' controllers transmits requests and receives the resultant data\nuser = Controller(role='view', interpreter=JSONInterpreter())\nuser.setAddress('USER')\n</code></pre></p> <p>Each controller subscribes to one or more callbacks that will be called when the controller transmits. In this example, when <code>user</code> tries to transmit a request to target controller (<code>'WORKER'</code>), it will call <code>worker.receiveRequest</code>. Likewise, when <code>worker</code> tries to transmit data back to the request originator (<code>'USER'</code>), it will call <code>user.receiveData</code>. <pre><code># request flow: USER -&gt; WORKER\nuser.subscribe(callback=worker.receiveRequest, callback_type='request', address='WORKER')\n# data flow: USER -&gt; WORKER\nworker.subscribe(callback=user.receiveData, callback_type='data', address='USER')\n</code></pre></p> <p>A hub-and-spoke network can also be achieved using a new 'relay' controller. <pre><code># 'relay' controllers bridges communication between `model` and `view` controllers\nhub = Controller(role='relay', interpreter=JSONInterpreter())\nhub.setAddress('HUB')\n\n# request flow: USER -&gt; HUB -&gt; WORKER\nuser.subscribe(callback=hub.relayRequest, callback_type='request', address='HUB', relay=True)\nhub.subscribe(callback=worker.receiveRequest, callback_type='request', address='WORKER')\n\n# data flow: WORKER -&gt; HUB -&gt; USER\nworker.subscribe(callback=hub.relayData, callback_type='data', address='HUB', relay=True)\nhub.subscribe(callback=user.receiveData, callback_type='data', address='USER')\n</code></pre></p> <p>These callbacks should be replaced with user implementation of communication layers, (e.g. socket communication or FastAPI).</p>"},{"location":"index.html#2-additional-features","title":"2. Additional features","text":""},{"location":"index.html#21-managing-hardware-addresses","title":"2.1 Managing hardware addresses","text":"<p>Hardware addresses may vary from machine to machine, especially for serial ports and cameras. To keep track of all the different port addresses, the machine ID and its corresponding port addresses are stored in <code>registry.yaml</code></p> <p>In the <code>tools</code> folder, a template of <code>registry.yaml</code> has been added to manage the machine-specific addresses of your connected devices (e.g. serial port and camera index). First, use the <code>get_node</code> and <code>get_ports</code> functions to identify your machine's ID and the serial port addresses of your tools. <pre><code>from controllably.core.connection import get_node, get_ports\nget_node()           # Get the unique identifier of your machine\nget_ports()          # Get a list of serial port addresses of your connect devices\n</code></pre></p> <p>Next, populate the <code>registry.yaml</code> file with the relevant information. registry.yaml<pre><code>'012345678901234':              # insert your machine's unique identifier\n    cam_index:                  # camera index of the connected imaging devices\n      __cam_01__: 1             # NOTE: retain leading and trailing double underscores\n    port:                       # addresses of serial ports\n      __MyDevice__: COM1        # NOTE: retain leading and trailing double underscores\n</code></pre></p> <p>Lastly, change the value for the serial port address in the <code>config.yaml</code> file(s) to match the registry. config.yaml<pre><code>MyDevice:                                   # user-defined name\n  module: controllably.Move.Cartesian       # \"from\" ...\n  class: Gantry                             # \"import\" ...\n  settings:\n    port: __MyDevice__                      # serial port address\n    setting_A: [300,0,200]\n    setting_B: [[0,1,0],[-1,0,0]]\n</code></pre></p>"},{"location":"index.html#22-linting-and-coding-assists","title":"2.2 Linting and coding assists","text":"<p>To help with development, linters such as Pylance provide suggestions while coding, based on the types of the objects. To make use of this feature, furnish the <code>__init__.py</code> file with the corresponding tool names and classes from the <code>config.yaml</code> file. __init__.py<pre><code>from dataclasses import dataclass\n...\n\n# ========== Optional (for typing) ========== #\nfrom controllably.Compound.LiquidMover import LiquidMover\nfrom controllably.Transfer.Liquid.Pipette.Sartorius import Sartorius\nfrom controllably.Move.Cartesian import Gantry\n\n@dataclass\nclass Platform:\n    MyCompoundDevice: LiquidMover\n    LiquidDevice: Sartorius\n    MoverDevice: Gantry\n# ========================================== #\n\n...\n</code></pre></p> <p>More additional features to be documented...</p>"},{"location":"index.html#dependencies","title":"Dependencies","text":"<ul> <li>matplotlib (&gt;=3.9.2)</li> <li>numpy (&gt;=2.1.0)</li> <li>opencv-python (&gt;=4.11.0.86)</li> <li>pandas (&gt;=2.2.2)</li> <li>parse (&gt;=1.20.2)</li> <li>pyserial (&gt;=3.5)</li> <li>PyYAML (&gt;=6.0.1)</li> <li>scipy (&gt;=1.14.1)</li> <li>pyModbusTCP (&gt;=0.2.0)</li> <li>easy-biologic (&gt;=0.4.0)</li> <li>nest-asyncio (&gt;=1.6.0)</li> <li>setuptools (&gt;=71.0.3)</li> <li>PyMeasure (&gt;=0.15.0)</li> </ul>"},{"location":"index.html#contributors","title":"Contributors","text":"<p>@kylejeanlewis / @Quijanove / @mat-fox</p>"},{"location":"index.html#how-to-contribute","title":"How to Contribute","text":"<p>Issues and feature requests are welcome!</p>"},{"location":"index.html#license","title":"License","text":"<p>This project is distributed under the MIT License.</p>"},{"location":"ATTRIBUTIONS.html","title":"Third-Party Dependencies","text":"<p>This project includes code from the following external dependencies:</p>"},{"location":"ATTRIBUTIONS.html#dobot-arm-tcp-ip-4axis-python","title":"Dobot-Arm / TCP-IP-4Axis-Python","text":"<ul> <li>Source: GitHub</li> <li>License: MIT License</li> <li>Notes: Last retrieved on 2024-11-22. This library was included directly in the <code>external/Dobot_Arm</code> directory.</li> </ul>"},{"location":"CHANGELOG.html","title":"Change Log","text":""},{"location":"CHANGELOG.html#version-132","title":"Version 1.3.2","text":"<p>Feature enhancements, bug fixes and patches. First released 24 Apr 2024.</p>"},{"location":"CHANGELOG.html#added","title":"Added","text":"<ul> <li>add new <code>delay</code> parameter in <code>Keithley.programs.IV_Scan</code></li> </ul>"},{"location":"CHANGELOG.html#changed","title":"Changed","text":"<ul> <li>fix critical bug in setting sense/source limits for <code>KeithleyDevice</code></li> <li>fix bugs in <code>KeithleyDevice</code>, <code>Peltier</code>, <code>ForceSensor</code></li> </ul>"},{"location":"CHANGELOG.html#version-131","title":"Version 1.3.1","text":"<p>Feature enhancements, bug fixes and patches. First released 11 Apr 2024.</p>"},{"location":"CHANGELOG.html#added_1","title":"Added","text":"<ul> <li>implementation of <code>TriContinent.pullback()</code></li> <li>new <code>Well</code> properties and option in return list of wells by rows instead of columns</li> </ul>"},{"location":"CHANGELOG.html#changed_1","title":"Changed","text":"<ul> <li>fix bugs in <code>Peltier</code> (<code>setTemperature()</code> and <code>getTemperature()</code>)</li> <li>fix bugs in <code>Ender</code> (<code>setTemperature()</code> and <code>getTemperature()</code>)</li> <li>fix bug in <code>Keithley.setFunction()</code></li> <li>generalise <code>IV_Scan</code> to take either currents or voltages</li> </ul>"},{"location":"CHANGELOG.html#version-130","title":"Version 1.3.0","text":"<p>Feature enhancements, bug fixes and patches. First released 19 Feb 2024.</p>"},{"location":"CHANGELOG.html#added_2","title":"Added","text":"<ul> <li>added check for poor physical connection with <code>PiezoRoboticsDevice</code></li> <li>Keithley</li> <li>added new subclasses of <code>KeithleyDevice</code>: <code>DAQ6510</code> and <code>SMU2450</code></li> <li>added way to read and save model name of <code>KeithleyDevice</code></li> <li>added new Keithley program for DAQ to scan multiple channels</li> <li>new methods <code>clearErrors()</code>, <code>setDisplay()</code>, <code>setFunction()</code></li> </ul>"},{"location":"CHANGELOG.html#changed_2","title":"Changed","text":"<ul> <li>changed the way travel times are calculated for <code>Mover</code> tools, so that they reflect the actual physical travel times more accurately</li> <li>changed ability to delay initialisation of TriContinent pumps until it is in a more convenient location</li> <li>fixed few bugs with <code>SentronProbe</code> tool</li> </ul>"},{"location":"CHANGELOG.html#removed","title":"Removed","text":"<ul> <li>removed old archived files</li> </ul>"},{"location":"CHANGELOG.html#version-120","title":"Version 1.2.0","text":"<p>Feature enhancements, bug fixes and patches. First released 22 Aug 2023.</p>"},{"location":"CHANGELOG.html#added_3","title":"Added","text":"<ul> <li><code>ForceClampSetup</code> class</li> <li><code>LoadCell</code> class</li> <li><code>Balance</code> class (subclass of <code>LoadCell</code>)</li> </ul>"},{"location":"CHANGELOG.html#changed_3","title":"Changed","text":"<ul> <li>update <code>LEDArray</code> to delay timing loop by 0.1s</li> <li>fix bug with initialising <code>PiezoRoboticsDevice</code></li> <li>update <code>getTemperature()</code> across multiple classes to standardise output</li> <li><code>Mover</code> class</li> <li>speed-related attributes and properties</li> <li>add method to calculate travel time based on target speed, acceleration and deceleration</li> <li>modify how speeds and max speeds interact with <code>move()</code> and <code>safeMoveTo()</code></li> <li><code>Cartesian</code> class</li> <li><code>setSpeed()</code> and <code>setSpeedFraction()</code></li> <li>get max speed settings from device upon connecting</li> <li>change calculation of movement wait times using device speed and acceleration</li> <li><code>Primitiv</code> class</li> <li>change the class name to <code>Grbl</code> and <code>Primitiv</code> as a subclass name to retain compatibility</li> <li>overload <code>moveTo()</code> and <code>_query()</code> methods to use jogging mode</li> <li>modify the sequence of commands to halt movement</li> <li>implement <code>getAcceleration()</code>, <code>getCoordinates()</code>, <code>getMaxSpeed()</code></li> <li>clear errors and setting feed rate upon establishing connection</li> <li><code>Ender</code> class</li> <li>change the class name to <code>Marlin</code> and <code>Ender</code> as a subclass name to retain compatibility</li> <li>added method to immediately stop movement</li> <li>implement <code>getAcceleration()</code>, <code>getCoordinates()</code>, <code>getMaxSpeed()</code></li> <li>separate methods for <code>setSpeed()</code> (absolute speed in mm/s) and <code>setSpeedFraction()</code> (proportional speed to max speed)</li> <li><code>Dobot</code> class</li> <li>added <code>stop()</code> method</li> <li>Flir <code>AX8</code> class</li> <li>added <code>invertPalette()</code> method</li> <li>added data parsing methods <code>_decode_from_modbus()</code> and <code>_encode_to_modbus()</code></li> <li><code>KeithleyDevice()</code> class</li> <li>added <code>ip_address</code> property</li> <li>added options for <code>_read()</code> method</li> <li>added <code>readline()</code> method</li> <li>implement <code>disconnect()</code> method</li> <li>fix bug with Keithley programs using <code>device.run()</code> instead of <code>device.start()</code></li> </ul>"},{"location":"CHANGELOG.html#removed_1","title":"Removed","text":"<ul> <li><code>Thermal</code> class</li> <li>removed dependency on <code>imutils</code> package</li> </ul>"},{"location":"CHANGELOG.html#versions-112-111","title":"Versions 1.1.2 &amp; 1.1.1","text":"<p>Bug fixes and patches. First released 12 Jul 2023.</p>"},{"location":"CHANGELOG.html#added_4","title":"Added","text":"<ul> <li>import <code>Device</code> classes in init files to view documentation</li> <li>added library for GRBL status and error codes</li> <li>add <code>update_root_direcctory()</code> function to Helper</li> </ul>"},{"location":"CHANGELOG.html#changed_4","title":"Changed","text":"<ul> <li>fix bug with adding new rows into Dataframes</li> <li>use <code>reset_input_buffer()</code> instead of <code>flushInput()</code> for <code>pyserial.Serial</code> objects</li> <li>print the actual string sent to Serial devices</li> <li>update methods in <code>Deck</code>, <code>Labware</code>, and <code>Well</code> to camelCase</li> <li>update <code>Deck.isExcluded()</code> to apply strict inequalities when determining out-of-range coordinates</li> <li>update <code>LiquidMover</code> to insert a portion of tip into rack before ejecting</li> <li>update <code>Spinner</code></li> <li>fix bug with sending commands</li> <li>added <code>_query()</code> method</li> <li>pass verbosity to individual spinners</li> <li>verbosity of <code>Measure</code> objects pass through to devices</li> <li>update <code>PiezoRoboticsDevice</code></li> <li>initialize upon connection</li> <li>raise errors when encountering them</li> <li>update <code>Mover</code></li> <li>modify<code>setFlag()</code> to print kwargs instead of raising error if assigned values are not boolean</li> <li>use <code>safe_height</code> (if defined) instead of z-coordinate of home in <code>safeMoveTo()</code></li> <li>added <code>getSettings()</code> method</li> <li>update <code>Gantry</code> class</li> <li>read multiple flines in <code>_query()</code></li> <li>check that commands end with newline before sending to device</li> <li>fix bug with changing speeds</li> <li>update <code>Ender</code></li> <li>added <code>getTemperature()</code>, <code>holdTemperature()</code>, <code>isAtTemperature()</code> methods</li> <li>modified <code>setTemperature()</code> to use Marlin code to wait for temperature</li> <li>update <code>Primitiv</code> class</li> <li>add <code>getStatus()</code> and <code>stop()</code> methods</li> <li>add <code>_get_settings()</code> method</li> <li>fix bug in <code>M1Pro.setHandedness()</code></li> <li>update <code>Sartorius</code> class</li> <li><code>tip_inset_mm</code> now an instance attribute with initialisation parameters</li> <li>set <code>tip_on</code> flag to False when performing <code>eject()</code></li> </ul>"},{"location":"CHANGELOG.html#version-110","title":"Version 1.1.0","text":"<p>Bug fixes and feature enhancements. First released 15 Jun 2023.</p>"},{"location":"CHANGELOG.html#added_5","title":"Added","text":"<ul> <li><code>ForceSensor</code> - DIY force sensor (#55)</li> <li><code>BioShake</code> - orbital shaker from QInstruments (#56)</li> <li><code>SentronProbe</code> - pH meter probe from Sentron (#75)</li> <li><code>Maker</code></li> <li>added <code>execute()</code> abstract method and implemented in subclasses</li> <li>GUI</li> <li><code>Guide</code> - documentation guide</li> <li><code>MakerPanel</code> - daptive GUI controls for <code>Maker</code> objects (#87)</li> </ul>"},{"location":"CHANGELOG.html#changed_5","title":"Changed","text":"<ul> <li><code>M1Pro</code></li> <li>fix issue with changing handedness (#86)</li> <li><code>Peltier</code></li> <li>rename <code>getTemperatures()</code> to <code>getTemperature()</code></li> <li>rename <code>isReady()</code> to <code>isAtTemperature()</code></li> <li>rename <code>set_point</code> to <code>set_temperature</code></li> <li><code>Ender</code></li> <li>rename <code>set_point</code> to <code>set_temperature</code></li> <li><code>TriContinent</code></li> <li>rename <code>step_limit</code> to <code>limits</code></li> <li>Refactor and reorganize <code>GUI</code> code</li> <li>Refactor code in <code>helper</code> and <code>factory</code></li> <li>Updated documentation</li> </ul>"},{"location":"CHANGELOG.html#removed_2","title":"Removed","text":"<ul> <li><code>Analyse</code> sub-package removed</li> <li><code>Control.Schedule</code> sub-package removed</li> <li>Unnecessary commented-out blocks of code</li> </ul>"},{"location":"CHANGELOG.html#version-101","title":"Version 1.0.1","text":"<p>Bug fixes and minor feature enhancements. First released 08 May 2023.</p>"},{"location":"CHANGELOG.html#added_6","title":"Added","text":"<ul> <li><code>LiquidMover</code></li> <li>Added <code>LiquidMover.touchTip()</code> method to touch the pipette tip against the walls of the vessel to remove excess liquid on the outside of the tip (#62)</li> <li>Added option to indicate the position of the first available pipette tip in <code>LiquidMover</code> (#61)</li> <li>Added adaptive GUI controls for <code>Liquid</code> objects (#70)</li> <li>Added option to indicate which digital IO channel to use with Dobot attachments (#53)</li> </ul>"},{"location":"CHANGELOG.html#changed_6","title":"Changed","text":"<ul> <li><code>MassBalance</code></li> <li>Updated to the use <code>pd.concat()</code> instead of <code>pd.DataFrame.append()</code>, which is going ot be deprecated (#63)</li> <li>Fixed endless loop for when <code>MassBalance</code> tries to <code>zero()</code> while recording data (#60)</li> <li>Changed the <code>Image</code> class and methods into functions within a module (#54)</li> <li>Fixed the tool offset of pipette when pipette tip is attached, and accounts for the length of pipette that enters the pipette tip (#64)</li> <li>Changed to using more precise time interval measurements by moving from <code>time.time()</code> to <code>time.perf_counter()</code> (#68)</li> <li>Fixed discrepancy in aspirate and dispense speed for <code>Sartorius</code> (#73) and let speed return to a global default value (#72)</li> <li>Updated documentation</li> </ul>"},{"location":"CHANGELOG.html#version-100","title":"Version 1.0.0","text":"<p>Major overhaul in package structure. Standardisation of methods and consolidation of common methods. First released 12 Apr 2023.</p>"},{"location":"CHANGELOG.html#added_7","title":"Added","text":"<ul> <li>Usage of Abstract Base Classes (ABCs) to define a base class with abstract methods that needs to be implemented through sub-classing (#31)</li> <li>Usage of Protocols to provide an interface between different classes of objects (#30)</li> <li>Usage of Dataclasses to store complex data </li> <li>Usage of decorators to modify methods</li> <li>Introduced different functions to parse the program docstring and find program parameters</li> </ul>"},{"location":"CHANGELOG.html#changed_7","title":"Changed","text":"<ul> <li>Standardised methods and consolidated common methods</li> <li>Added type hints (#28)</li> <li>Moved Dobot attachments from Mover to Transfer.Substrate</li> <li>Split GUI Panels into individual files</li> <li>Split Dobot arms into individual files</li> <li>Split functions/methods in <code>misc.py</code> into individual files.</li> <li>Changed <code>_flags</code> to a public attribute <code>flags</code></li> <li>Update documentation (#27, #28, #29)</li> </ul>"},{"location":"CHANGELOG.html#removed_3","title":"Removed","text":"<ul> <li>Unnecessary commented-out blocks of code</li> </ul>"},{"location":"CHANGELOG.html#version-00x","title":"Version 0.0.x","text":"<p>(0.0.4.x) Introduced control for Peltier device and TriContinent Series C syringe pumps. First released 10 Mar 2023.\\ (0.0.3.x) Minor changes to movement robot safety and pipette control. Introduced control for LED array. First released 08 Mar 2023.\\ (0.0.2.x) Updates in setting up configuration files. First released 24 Feb 2023.\\ (0.0.1.x) First release of Control.lab.ly distributed on 23 Feb 2023.\\ (0.0.0.x) Pre-release packaging checks</p>"},{"location":"CHANGELOG.html#added_8","title":"Added","text":""},{"location":"CHANGELOG.html#004","title":"0.0.4","text":"<ul> <li>Added control for <code>Peltier</code> (#23)</li> <li>set and get temperatures</li> <li>hold temperatures for desired duration</li> <li>checks if target temperature has been reached by checking power level lower than a threshold or time passed over a predefined duration, once the temperature is within tolerance</li> <li>ability to record temperatures and timestamps </li> <li>Added control for <code>TriContinent</code> and <code>TriContinentEnsemble</code> (#25)</li> <li>single actions such as <code>empty</code>, <code>fill</code>, <code>initialise</code>, move actions, set speeds and valves, and wait</li> <li>compound actions such as <code>aspirate</code>, <code>dispense</code>, and <code>prime</code></li> </ul>"},{"location":"CHANGELOG.html#003","title":"0.0.3","text":"<ul> <li>Added safety measures for movement actions (#24)</li> <li>In <code>Deck</code>, added exclusion zones when reading the <code>layout.json</code> file and new method <code>is_excluded()</code> to check if target coordinate is within the exclusion zone</li> <li>In <code>Mover</code>, update <code>isFeasible()</code> method to check if target coordinates violates the deck's exclusion zone</li> <li>New function <code>set_safety()</code> defines safety modes when starting a new session to pause for input (in \"high\" safety setting) and to wait for safety countdown (in \"low\" safety setting)</li> <li><code>Make.Light.LEDArray</code> for controlling LEDs in the photo-reactor, as well as timing the LED \"on\" durations (#35)</li> </ul>"},{"location":"CHANGELOG.html#0022","title":"0.0.2.2","text":"<ul> <li>Added import of <code>CompoundSetup</code> class</li> </ul>"},{"location":"CHANGELOG.html#002","title":"0.0.2","text":"<ul> <li><code>Deck.at()</code> method for directly referencing slots using either index numbers or names</li> <li>New <code>CompoundSetup</code> class for common methods of <code>Compound</code> devices</li> <li>New <code>load_deck()</code> function to load <code>Deck</code> after initialisation</li> </ul>"},{"location":"CHANGELOG.html#001","title":"0.0.1","text":"<ul> <li>Make</li> <li>Multi-channel spin-coater [Arduino]</li> <li>Measure</li> <li>(Keithley) 2450 Source Measure Unit (SMU) Instrument</li> <li>(PiezoRobotics) Dynamic Mechanical Analyser (DMA)</li> <li>Precision mass balance [Arduino]</li> <li>Move</li> <li>(Creality) Ender-3</li> <li>(Dobot) M1 Pro</li> <li>(Dobot) MG400</li> <li>Primitiv [Arduino]</li> <li>Transfer</li> <li>(Sartorius) rLINE\u00ae dispensing modules</li> <li>Peristaltic pump and syringe system [Arduino]</li> <li>View</li> <li>(FLIR) AX8 thermal imaging camera - full functionality in development </li> <li>Web cameras [General] </li> <li>misc</li> <li>Helper class for most common actions</li> <li>create_configs: make new directory for configuration files</li> <li>create_setup: make new directory for specific setup-related files</li> <li>load_setup: initialise setup on import during runtime</li> </ul>"},{"location":"CHANGELOG.html#changed_8","title":"Changed","text":""},{"location":"CHANGELOG.html#004_1","title":"0.0.4","text":"<ul> <li>Update documentation</li> </ul>"},{"location":"CHANGELOG.html#0031","title":"0.0.3.1","text":"<ul> <li>Update documentation</li> </ul>"},{"location":"CHANGELOG.html#003_1","title":"0.0.3","text":"<ul> <li><code>Sartorius</code></li> <li>made the blowout/home optional for the dispense method upon emptying the pipette</li> <li>Update documentation</li> </ul>"},{"location":"CHANGELOG.html#0021","title":"0.0.2.1","text":"<ul> <li>Changed template files for <code>lab.create_setup()</code></li> </ul>"},{"location":"CHANGELOG.html#002_1","title":"0.0.2","text":"<ul> <li>Update documentation</li> </ul>"},{"location":"CODE_OF_CONDUCT.html","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at changjie.leong@outlook.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING.html","title":"Contribution Guidelines","text":"<p>In progress, will populate soon</p>"},{"location":"LICENSE.html","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022-2025 Chang Jie Leong</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"site/index.html","title":"Welcome to Control-lab-ly","text":""},{"location":"site/advanced_usage.html","title":"Advanced Usage","text":"<p>Setup initialization can be greatly simplified with Control-lab-ly.</p> <p>To access files / folders in the project repository as you would with an installed package, use the <code>init()</code> function to add the project directory into PATH.</p> <pre><code>from controllably import init\ninit('project_root')\n\nfrom tools import ToolSetup01\nsetup = ToolSetup01.setup()\nsetup.MoverDevice.loadDeckFromFile(ToolSetup01.LAYOUT_FILE)\n</code></pre> <p>Here, the setup is initialized and returned with just <code>ToolSetup01.setup()</code>, and the layout is loaded with the <code>loadDeckFromFile</code> method.</p>"},{"location":"site/advanced_usage.html#folder-structure","title":"Folder structure","text":"<p>To make full use of Control-lab-ly's features, a typical project file structure will need the <code>library</code> and <code>tools</code> folders. <pre><code>project_root/\n|\n\u251c\u2500\u2500 library/\n|   \u251c\u2500\u2500 deck/\n|   |   \u251c\u2500\u2500 layout_board_30x30.json\n|   |   \u2514\u2500\u2500 layout_board_60x30.json\n|   \u251c\u2500\u2500 labware/\n|   |   \u251c\u2500\u2500 generic_96_tiprack.json\n|   |   \u251c\u2500\u2500 generic_8_wellplate.json\n|   |   \u2514\u2500\u2500 generic_1_bin.json\n|   \u251c\u2500\u2500 plugins/\n|   |   \u251c\u2500\u2500 tool_part_1.py\n|   |   \u251c\u2500\u2500 tool_part_2.py\n|   |   \u2514\u2500\u2500 mock_module.py\n|   \u2514\u2500\u2500 __init__.py\n|\n\u251c\u2500\u2500 tools/\n|   \u251c\u2500\u2500 ToolSetup01/\n|   |   \u251c\u2500\u2500 __init__.py\n|   |   \u251c\u2500\u2500 config.yaml\n|   |   \u2514\u2500\u2500 layout.json\n|   \u251c\u2500\u2500 ToolSetup02/\n|   |   \u251c\u2500\u2500 __init__.py\n|   |   \u251c\u2500\u2500 config.yaml\n|   |   \u2514\u2500\u2500 layout.json\n|   \u251c\u2500\u2500 __init__.py\n|   \u2514\u2500\u2500 registry.yaml\n|\n\u251c\u2500\u2500 scripts/\n|   \u251c\u2500\u2500 experiment_script_1.py\n|   \u251c\u2500\u2500 experiment_2.ipynb\n|   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n</code></pre></p> <p>Use <code>start_project_here(target_dir)</code> to generate the above file structure, <pre><code>from controllably import start_project_here\ncontrollably.start_project_here(\".\")\n</code></pre></p> <p>or the CLI to create the required directories. <pre><code>$ python -m controllably .\n</code></pre></p>"},{"location":"site/advanced_usage.html#1-features","title":"1. Features","text":"<p>For more advanced uses, Control-lab-ly provides a host of tools to streamline the development of lab equipment automation. This includes setting up configuration files and writing plugins.</p> <ol> <li>Dynamic object initialization</li> <li>Reconfigurable complex tools</li> <li>Modular positioning system</li> <li>Application and network interoperability</li> </ol>"},{"location":"site/advanced_usage.html#11-dynamic-object-initialization","title":"1.1 Dynamic object initialization","text":"<p>Control-lab-ly allows users to store all their tool configuration data in a YAML file, providing a single source of truth for all projects using the same set up. The <code>config.yaml</code> file stores the configuration for all the tools in the set up, which can be parsed by Control-lab-ly to initialize the tools using <code>get_setup()</code>. config.yaml<pre><code>MyDevice:                                   # user-defined name\n  module: controllably.Move.Cartesian       # \"from\" ...\n  class: Gantry                             # \"import\" ...\n  settings:\n    port: COM1                              # serial port address\n    setting_A: [300,0,200]\n    setting_B: [[0,1,0],[-1,0,0]]\n</code></pre></p> <p>Tip</p> <p>A different serial port address or camera index may be used by different machines for the same device. See Section 2.1 to find out how to manage the different addresses used by different machines.</p>"},{"location":"site/advanced_usage.html#12-reconfigurable-complex-tools","title":"1.2 Reconfigurable complex tools","text":"<p>Compound devices are similarly configured in the <code>config.yaml</code> file. The configuration details of the component tools are nested in <code>details</code>. config.yaml<pre><code>MyCompoundDevice:                           # user-defined name\n  module: controllably.Compound.LiquidMover\n  class: LiquidMover\n  settings:                                 # settings for compound device\n    speed_factor_lateral: null\n    speed_factor_up: 0.2\n    speed_factor_down: 0.2\n    speed_factor_pick_tip: 0.01\n    tip_approach_distance: 20\n    details:                                # nest component configuration in \"details\"\n      mover:                                # component name (defined in LiquidMover)\n        module: controllably.Move.Cartesian\n        class: Gantry\n        settings:\n          port: COM1 \n      liquid:                               # component name (defined in LiquidMover)\n        module: controllably.Transfer.Liquid.Pipette.Sartorius\n        class: Sartorius\n        settings:\n          port: COM22\n</code></pre></p> <p>Lastly, you can define shortcuts (or aliases) at the end of <code>config.yaml</code> to easily access the nested components of compound devices. config.yaml<pre><code>SHORTCUTS:\n  LiquidDevice: 'MyCompoundDevice.liquid'\n  MoverDevice: 'MyCompoundDevice.mover'\n</code></pre></p>"},{"location":"site/advanced_usage.html#13-modular-positioning-system","title":"1.3 Modular positioning system","text":"<p>Control-lab-ly allows users to easily combine multiple modules and switch between local and global coordinates. The <code>layout.json</code> file stores the layout configuration of your physical workspace (<code>Deck</code>).</p> <p>Note</p> <p>Optional: if your setup does not involve moving objects around in a pre-defined workspace,  a layout configuration may not be required</p> layout.json<pre><code>{\n    \"metadata\": {\n        \"displayName\": \"Example Layout (main)\",\n        \"displayCategory\": \"deck\",\n        \"displayVolumeUnits\": \"\u00b5L\",\n        \"displayLengthUnits\": \"mm\",\n        \"tags\": []\n    },\n    \"dimensions\": [600,300,0],\n    \"cornerOffset\": [0,0,0],\n    \"orientation\": [0,0,0],\n    \"slots\": {\n        \"1\": {\n            \"name\": \"slotOne\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [160.5,6.5,0],\n            \"orientation\": [0,0,0]\n        },\n        \"2\": {\n            \"name\": \"slotTwo\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [310.5,6.5,0],\n            \"orientation\": [0,0,0],\n            \"labware_file\": \"project_root/library/labware/labware_wellplate.json\"\n        },\n        \"3\": {\n            \"name\": \"slotThree\",\n            \"dimensions\": [127.76,85.48,0],\n            \"cornerOffset\": [460.5,6.5,0],\n            \"orientation\": [0,0,0]\n        }\n    },\n    \"zones\":{\n        \"A\":{ \n            \"dimensions\": [600,300,0],\n            \"cornerOffset\": [600,600,0],\n            \"orientation\": [-90,0,0],\n            \"deck_file\": \"project_root/library/deck/layout_sub.json\",\n            \"entry_waypoints\": [\n                [653.2, 224.6, 232]\n            ]\n        }\n    }\n}\n</code></pre> <p>The size and position of the <code>Deck</code> is defined by the <code>dimensions</code>, and combination of <code>cornerOffset</code> and <code>orientation</code> respectively.</p> <ul> <li><code>dimensions</code> is the (x,y,z) dimensions with respect to the deck's own coordinate system. </li> <li><code>cornerOffset</code> is the (x,y,z) coordinates of the bottom-left corner of the deck with respect to world coordinates (typically the origin). </li> <li><code>orientation</code> is the (rz,ry,rx) rotation of the deck about the bottom-left corner with respect to world coordinates (typically the identity rotation or zero rotation).</li> </ul> <p>Within the deck, <code>slots</code> and <code>zones</code> can be defined.</p> <ul> <li><code>slots</code> are spaces where Labware can be placed. These Labware can be individual tools or vessel holders. Indexing of slots increments numerically, typically starting from 1. </li> <li><code>zones</code> are regions of nested layouts. As such, a <code>Deck</code> of a smaller modular setup layout can be incorporated as part of a larger layout. Indexing of zones increments alphabetically, typically starting with 'A'.</li> </ul> <p>Here, the <code>dimensions</code>, <code>cornerOffset</code>, and <code>orientation</code> definitions apply similarly, except the latter two takes reference from the parent's origin and orientation. The filename definition in <code>labware_file</code> and <code>deck_file</code> can either be absolute filepaths, or relative to the project repository. </p> <p>Note</p> <p>This package uses the same Labware files as those provided by Opentrons, which can be found here, and custom Labware files can be created here. Additional fields can be added to the these Labware files to enable features such as plate stacking and collision avoidance.</p> <ul> <li><code>parameters.isStackable</code> is a boolean value defining if another Labware can be stacked above.</li> <li><code>slotAbove</code> defines a new slot above the Labware, with similar subfields <code>slotAbove.name</code>, <code>slotAbove.dimensions</code>, <code>slotAbove.cornerOffset</code>, and <code>slotAbove.orientation</code>.</li> <li><code>exclusionBuffer</code> is the offset from the lower and upper bounds of the Labware bounding box. (i.e. <code>[ [left, front, bottom], [right, back, top] ]</code>)</li> </ul> <p>Warning</p> <p>Avoidance checks only apply to destination coordinates. Does not guarantee collision avoidance along intermediate path coordinates when using point-to-point move actions such as <code>move</code>, <code>moveBy</code> or <code>moveTo</code>. Use <code>safeMoveTo</code> instead.</p> <p>For zones, <code>entry_waypoints</code> lists a sequence of coordinates that defines a safe path a translation tool can take to transit into that particular zone.</p>"},{"location":"site/advanced_usage.html#14-application-and-network-interoperability","title":"1.4 Application and network interoperability","text":"<p>To allow control of the setups over the network, or with other applications, Control-lab-ly provides a way to access the attributes and methods over a communication layer. A <code>Controller</code> encodes and decodes requests and responses using an <code>Interpreter</code>, serializing the data to be sent. <pre><code>from controllably.core.control import Controller\nfrom controllably.core.interpreter import JSONInterpreter\n\n# 'model' controllers receives requests, triggers execution in registered objects, \n# and transmits the resultant data\nworker = Controller(role='model', interpreter=JSONInterpreter())\nworker.setAddress('WORKER')\n\n# 'view' controllers transmits requests and receives the resultant data\nuser = Controller(role='view', interpreter=JSONInterpreter())\nuser.setAddress('USER')\n</code></pre></p> <p>Each controller subscribes to one or more callbacks that will be called when the controller transmits. In this example, when <code>user</code> tries to transmit a request to target controller (<code>'WORKER'</code>), it will call <code>worker.receiveRequest</code>. Likewise, when <code>worker</code> tries to transmit data back to the request originator (<code>'USER'</code>), it will call <code>user.receiveData</code>. <pre><code># request flow: USER -&gt; WORKER\nuser.subscribe(callback=worker.receiveRequest, callback_type='request', address='WORKER')\n# data flow: USER -&gt; WORKER\nworker.subscribe(callback=user.receiveData, callback_type='data', address='USER')\n</code></pre></p> <p>A hub-and-spoke network can also be achieved using a new 'relay' controller. <pre><code># 'relay' controllers bridges communication between `model` and `view` controllers\nhub = Controller(role='relay', interpreter=JSONInterpreter())\nhub.setAddress('HUB')\n\n# request flow: USER -&gt; HUB -&gt; WORKER\nuser.subscribe(callback=hub.relayRequest, callback_type='request', address='HUB', relay=True)\nhub.subscribe(callback=worker.receiveRequest, callback_type='request', address='WORKER')\n\n# data flow: WORKER -&gt; HUB -&gt; USER\nworker.subscribe(callback=hub.relayData, callback_type='data', address='HUB', relay=True)\nhub.subscribe(callback=user.receiveData, callback_type='data', address='USER')\n</code></pre></p> <p>These callbacks should be replaced with user implementation of communication layers, (e.g. socket communication or FastAPI).</p>"},{"location":"site/advanced_usage.html#2-additional-features","title":"2. Additional features","text":""},{"location":"site/advanced_usage.html#21-managing-hardware-addresses","title":"2.1 Managing hardware addresses","text":"<p>Hardware addresses may vary from machine to machine, especially for serial ports and cameras. To keep track of all the different port addresses, the machine ID and its corresponding port addresses are stored in <code>registry.yaml</code></p> <p>In the <code>tools</code> folder, a template of <code>registry.yaml</code> has been added to manage the machine-specific addresses of your connected devices (e.g. serial port and camera index). First, use the <code>get_node</code> and <code>get_ports</code> functions to identify your machine's ID and the serial port addresses of your tools. <pre><code>from controllably.core.connection import get_node, get_ports\nget_node()           # Get the unique identifier of your machine\nget_ports()          # Get a list of serial port addresses of your connect devices\n</code></pre></p> <p>Next, populate the <code>registry.yaml</code> file with the relevant information. registry.yaml<pre><code>'012345678901234':              # insert your machine's unique identifier\n    cam_index:                  # camera index of the connected imaging devices\n      __cam_01__: 1             # NOTE: retain leading and trailing double underscores\n    port:                       # addresses of serial ports\n      __MyDevice__: COM1        # NOTE: retain leading and trailing double underscores\n</code></pre></p> <p>Lastly, change the value for the serial port address in the <code>config.yaml</code> file(s) to match the registry. config.yaml<pre><code>MyDevice:                                   # user-defined name\n  module: controllably.Move.Cartesian       # \"from\" ...\n  class: Gantry                             # \"import\" ...\n  settings:\n    port: __MyDevice__                      # serial port address\n    setting_A: [300,0,200]\n    setting_B: [[0,1,0],[-1,0,0]]\n</code></pre></p>"},{"location":"site/advanced_usage.html#22-linting-and-coding-assists","title":"2.2 Linting and coding assists","text":"<p>To help with development, linters such as Pylance provide suggestions while coding, based on the types of the objects. To make use of this feature, furnish the <code>__init__.py</code> file with the corresponding tool names and classes from the <code>config.yaml</code> file. __init__.py<pre><code>from dataclasses import dataclass\n...\n\n# ========== Optional (for typing) ========== #\nfrom controllably.Compound.LiquidMover import LiquidMover\nfrom controllably.Transfer.Liquid.Pipette.Sartorius import Sartorius\nfrom controllably.Move.Cartesian import Gantry\n\n@dataclass\nclass Platform:\n    MyCompoundDevice: LiquidMover\n    LiquidDevice: Sartorius\n    MoverDevice: Gantry\n# ========================================== #\n\n...\n</code></pre></p> <p>More additional features to be documented...</p>"},{"location":"site/overview.html","title":"Control-lab-ly","text":"<p>Lab Equipment Automation Package</p>"},{"location":"site/overview.html#description","title":"Description","text":"<p>User-friendly package that simplifies the definition and control of reconfigurable setups for high-throughput experimentation and machine learning.</p>"},{"location":"site/overview.html#installation","title":"Installation","text":"<p>Control-lab-ly can be found on PyPI and can be easily installed with <code>pip install</code>. <pre><code>$ python -m pip install control-lab-ly[all]\n</code></pre></p>"},{"location":"site/overview.html#quickstart","title":"Quickstart","text":"<p>Import the desired class from the library and initialize to use. <pre><code>from controllably.Move.Cartesian import Gantry\nmover = Gantry(...)\nmover.connect()\nmover.safeMoveTo((x,y,z))\n</code></pre></p> <p>Explore the details for each object using the <code>help()</code> function, or the <code>?</code> operator within the IPython / Jupyter Notebook environment. <pre><code>help(Gantry)\n</code></pre></p>"},{"location":"site/overview.html#device-support","title":"Device support","text":"<ul> <li>Make<ul> <li>(QInstruments) BioShake Orbital Shaker</li> <li>(Arduino-based devices)<ul> <li>Multi-channel LED array</li> <li>Multi-channel spin-coater</li> <li>Peltier device</li> </ul> </li> </ul> </li> <li>Measure<ul> <li>(BioLogic) via <code>easy-biologic</code> (optional)</li> <li>(Keithley) via <code>PyMeasure</code> (optional)</li> <li>(Sentron) SI series pH meters</li> <li>(Arduino-based device) <ul> <li>Precision mass balance</li> <li>Load cell</li> </ul> </li> </ul> </li> <li>Move<ul> <li>(Creality) Ender-3</li> <li>(Dobot) with <code>external/../dobot_api</code><ul> <li>M1 Pro</li> <li>MG400</li> </ul> </li> <li>(Arduino-based device) gantry robot running on GRBL</li> </ul> </li> <li>Transfer<ul> <li>(Sartorius) rLINE\u00ae dispensing modules</li> <li>(TriContinent) C Series syringe pumps</li> </ul> </li> <li>View<ul> <li>(FLIR) AX8 thermal imaging camera via <code>pyModbusTCP</code> (optional)</li> <li>(General) Web cameras with <code>cv2</code></li> </ul> </li> </ul>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html","title":"Liquidmover","text":"<p>This module provides a high-level interface for liquid handling operations, including aspirating, dispensing, and tip management.</p> CLASS DESCRIPTION <code>LiquidMover</code> <p>High-level interface for liquid handling operations</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover","title":"LiquidMover","text":"<pre><code>LiquidMover(\n    *args,\n    parts: dict[str, Part],\n    speed_factor_lateral: float | None = None,\n    speed_factor_up: float = 0.2,\n    speed_factor_down: float = 0.2,\n    speed_factor_pick_tip: float = 0.01,\n    tip_approach_distance: float = 20,\n    verbose=False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Compound</code></p> <p>LiquidMover provides a high-level interface for liquid handling operations</p> ATTRIBUTE DESCRIPTION <code>speed_factor_lateral</code> <p>speed factor for lateral movement</p> <p> TYPE: <code>float</code> </p> <code>speed_factor_up</code> <p>speed factor for upward movement</p> <p> TYPE: <code>float</code> </p> <code>speed_factor_down</code> <p>speed factor for downward movement</p> <p> TYPE: <code>float</code> </p> <code>liquid</code> <p>liquid transfer tool</p> <p> TYPE: <code>Liquid</code> </p> <code>mover</code> <p>movement / translation robot</p> <p> TYPE: <code>Mover</code> </p> <code>connection_details</code> <p>connection details of each part</p> <p> TYPE: <code>dict</code> </p> <code>parts</code> <p>namespace of parts</p> <p> TYPE: <code>SimpleNamespace[str, Part]</code> </p> <code>flags</code> <p>flags of class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether any part is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether all parts are connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>bin_slots</code> <p>dictionary of bin slots</p> <p> TYPE: <code>dict[int, Labware]</code> </p> <code>current_tip_detail</code> <p>dictionary of current tip details</p> <p> TYPE: <code>dict[str, str | ndarray]</code> </p> <code>speed_factor_pick_tip</code> <p>speed factor to pick up tip</p> <p> TYPE: <code>float</code> </p> <code>tip_approach_distance</code> <p>distance in mm from top to travel down to pick tip</p> <p> TYPE: <code>float</code> </p> <code>tip_racks</code> <p>dictionary of tip racks</p> <p> TYPE: <code>dict[int, Labware]</code> </p> <code>tip_lists</code> <p>dictionary of tip lists</p> <p> TYPE: <code>dict[int, list[str]]</code> </p> METHOD DESCRIPTION <code>align</code> <p>align the tool tip to the target coordinates, while also considering any additional offset</p> <code>aspirateAt</code> <p>aspirate specified volume at target location, at desired speed</p> <code>dispenseAt</code> <p>dispense specified volume at target location, at desired speed</p> <code>touchTip</code> <p>touch the tip against the inner walls of the well</p> <code>assignBin</code> <p>assign a bin by its slot</p> <code>assignTipRack</code> <p>assign a tip rack by its slot</p> <code>attachTip</code> <p>attach new pipette tip from next available rack position</p> <code>attachTipAt</code> <p>attach new pipette tip from specified location</p> <code>ejectTip</code> <p>eject the pipette tip at the bin</p> <code>ejectTipAt</code> <p>eject the pipette tip at the specified location</p> <code>findTipRacks</code> <p>find all tip racks on the deck</p> <code>resetTips</code> <p>reset (i.e. clear) all tip racks</p> <code>returnTip</code> <p>return current tip to its original rack position</p> <code>updateStartTip</code> <p>set the name of the first available pipette tip</p> <p>Initialize LiquidMover class</p> PARAMETER DESCRIPTION <code>parts</code> <p>dictionary of parts</p> <p> TYPE: <code>dict[str, Part]</code> </p> <code>speed_factor_lateral</code> <p>speed factor for lateral movement. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed_factor_up</code> <p>speed factor for upward movement. Defaults to 0.2.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>speed_factor_down</code> <p>speed factor for downward movement. Defaults to 0.2.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> <code>speed_factor_pick_tip</code> <p>speed factor to pick up tip. Defaults to 0.01.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>tip_approach_distance</code> <p>distance in mm from top to travel down to pick tip. Defaults to 20.</p> <p> TYPE: <code>float</code> DEFAULT: <code>20</code> </p> <code>verbose</code> <p>verbosity of output. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.liquid","title":"liquid  <code>property</code>","text":"<pre><code>liquid: Liquid\n</code></pre> <p>Liquid transfer tool</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.mover","title":"mover  <code>property</code>","text":"<pre><code>mover: Mover\n</code></pre> <p>Movement / translation robot</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.align","title":"align","text":"<pre><code>align(\n    coordinates: Sequence[float] | ndarray,\n    offset: Sequence[float] = (0, 0, 0),\n) -&gt; Position\n</code></pre> <p>Align the tool tip to the target coordinates, while also considering any additional offset</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>target coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>offset</code> <p>additional x,y,z offset from tool tip. Defaults to (0,0,0).</p> <p> TYPE: <code>Sequence[float]</code> DEFAULT: <code>(0, 0, 0)</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>final coordinates of tool tip</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.aspirateAt","title":"aspirateAt","text":"<pre><code>aspirateAt(\n    coordinates: Sequence[float] | ndarray,\n    volume: float,\n    speed: float | None = None,\n    *,\n    channel: int | None = None,\n)\n</code></pre> <p>Aspirate specified volume at target location, at desired speed</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>target coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>volume</code> <p>volume in uL</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to aspirate at (uL/s). Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>channel</code> <p>channel to use. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.assignBin","title":"assignBin","text":"<pre><code>assignBin(slot: str, zone: str | None = None)\n</code></pre> <p>Assign a bin by its slot</p> PARAMETER DESCRIPTION <code>slot</code> <p>name of slot with bin</p> <p> TYPE: <code>str</code> </p> <code>zone</code> <p>name of zone. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.assignTipRack","title":"assignTipRack","text":"<pre><code>assignTipRack(\n    slot: str,\n    zone: str | None = None,\n    *,\n    use_by_columns: bool = True,\n    start_tip: str | None = None,\n)\n</code></pre> <p>Assign a tip rack by its slot</p> PARAMETER DESCRIPTION <code>slot</code> <p>name of slot with tip rack</p> <p> TYPE: <code>str</code> </p> <code>zone</code> <p>name of zone. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>use_by_columns</code> <p>whether to use tips by columns. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>start_tip</code> <p>name of start tip. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.attachTip","title":"attachTip","text":"<pre><code>attachTip() -&gt; ndarray\n</code></pre> <p>Attach new pipette tip from next available rack position</p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of attach tip location</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.attachTipAt","title":"attachTipAt","text":"<pre><code>attachTipAt(\n    coordinates: Sequence[float] | ndarray,\n    tip_length: float,\n) -&gt; ndarray\n</code></pre> <p>Attach new pipette tip from specified location</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>coordinates of pipette tip</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>tip_length</code> <p>length of pipette tip</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of attach tip location</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.dispenseAt","title":"dispenseAt","text":"<pre><code>dispenseAt(\n    coordinates: Sequence[float] | ndarray,\n    volume: float,\n    speed: float | None = None,\n    *,\n    channel: int | None = None,\n)\n</code></pre> <p>Dispense specified volume at target location, at desired speed</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>target coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>volume</code> <p>volume in uL</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to dispense at (uL/s). Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>channel</code> <p>channel to use. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.ejectTip","title":"ejectTip","text":"<pre><code>ejectTip() -&gt; ndarray\n</code></pre> <p>Eject the pipette tip at the bin</p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of eject tip location</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.ejectTipAt","title":"ejectTipAt","text":"<pre><code>ejectTipAt(\n    coordinates: Sequence[float] | ndarray,\n) -&gt; ndarray\n</code></pre> <p>Eject the pipette tip at the specified location</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>coordinate of where to eject tip</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of eject tip location</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.findTipRacks","title":"findTipRacks","text":"<pre><code>findTipRacks()\n</code></pre> <p>Find all tip racks on the deck</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.resetTips","title":"resetTips","text":"<pre><code>resetTips()\n</code></pre> <p>Reset (i.e. clear) all tip racks</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.returnTip","title":"returnTip","text":"<pre><code>returnTip(\n    offset_from_top: Sequence[float] | ndarray = (\n        0,\n        0,\n        -20,\n    ),\n) -&gt; ndarray\n</code></pre> <p>Return current tip to its original rack position</p> PARAMETER DESCRIPTION <code>offset_from_top</code> <p>offset from top to eject tip. Defaults to (0,0,-20).</p> <p> TYPE: <code>Sequence[float] | ndarray</code> DEFAULT: <code>(0, 0, -20)</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of eject tip location</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.touchTip","title":"touchTip","text":"<pre><code>touchTip(\n    well: Well,\n    fraction_depth_from_top: float = 0.05,\n    safe_move: bool = False,\n    speed_factor: float = 0.2,\n) -&gt; ndarray\n</code></pre> <p>Touch the tip against the inner walls of the well</p> PARAMETER DESCRIPTION <code>well</code> <p><code>Well</code> object</p> <p> TYPE: <code>Well</code> </p> <code>fraction_depth_from_top</code> <p>fraction of well depth from top to travel down. Defaults to 0.05.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.05</code> </p> <code>safe_move</code> <p>whether to move safely (i.e. go back to safe height first). Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to perform touch tip. Defaults to 0.2.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.2</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: coordinates of top of well</p>"},{"location":"site/api/Compound/LiquidMover/liquidmover.html#controllably.Compound.LiquidMover.liquidmover.LiquidMover.updateStartTip","title":"updateStartTip","text":"<pre><code>updateStartTip(start_tip: str)\n</code></pre> <p>Set the name of the first available pipette tip</p> PARAMETER DESCRIPTION <code>start_tip</code> <p>well name of the first available pipette tip</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Compound/VacuumMover/vacuummover.html","title":"Vacuummover","text":"<p>This module provides a class for controlling a vacuum system integrated with a gantry movement system. Classes:     VacuumGantry: A class that combines vacuum control with gantry movement capabilities.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/Compound/VacuumMover/vacuummover.html#controllably.Compound.VacuumMover.vacuummover.VacuumGantry","title":"VacuumGantry","text":"<pre><code>VacuumGantry(\n    port: str,\n    limits: Sequence[Sequence[float]] = (\n        (0, 0, 0),\n        (0, 0, 0),\n    ),\n    vacuum_on_delay: float = 3,\n    vacuum_off_delay: float = 3,\n    *,\n    robot_position: Position = Position(),\n    home_position: Position = Position(),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    safe_height: float | None = None,\n    speed_max: float | None = None,\n    device_type_name: str = \"GRBL\",\n    baudrate: int = 115200,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>VacuumMixin</code>, <code>Gantry</code></p> <p>VacuumGantry class combines vacuum control with gantry movement capabilities. This class inherits from VacuumMixin for vacuum control and Gantry for movement control.</p> ATTRIBUTE DESCRIPTION <code>vacuum_delays</code> <p>dictionary containing delays for vacuum on and off operations.</p> <p> TYPE: <code>dict</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>toggleVacuum</code> <p>bool): Toggle the vacuum on or off</p> <code>evacuate</code> <p>Turn on the vacuum for a specified delay</p> <code>vent</code> <p>Turn off the vacuum for a specified delay</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target direction</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>transferLabware</code> <p>transfer labware from one slot to another</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p>"},{"location":"site/api/Make/make.html","title":"Make","text":"<p>This module holds the base class for maker tools.</p> CLASS DESCRIPTION <code>Maker</code> <p>Base class for maker tools</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker","title":"Maker","text":"<pre><code>Maker(*, verbose: bool = False, **kwargs)\n</code></pre> <p>Base class for maker tools.</p> ATTRIBUTE DESCRIPTION <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <p>Instantiate the class</p> PARAMETER DESCRIPTION <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy: bool\n</code></pre> <p>Whether the device is busy</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.execute","title":"execute","text":"<pre><code>execute(*args, **kwargs)\n</code></pre> <p>Execute task</p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.run","title":"run","text":"<pre><code>run(*args, **kwargs)\n</code></pre> <p>Alias for <code>execute()</code></p>"},{"location":"site/api/Make/make.html#controllably.Make.make.Maker.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Make/Heat/heater_mixin.html","title":"Heater Mixin","text":"<p>This module contains the HeaterMixin class.</p> ATTRIBUTE DESCRIPTION <code>TOLERANCE</code> <p>tolerance for temperature</p> <p> TYPE: <code>float</code> </p> CLASS DESCRIPTION <code>HeaterMixin</code> <p>Mixin class for heater control</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Heat/heater_mixin.html#controllably.Make.Heat.heater_mixin.HeaterMixin","title":"HeaterMixin","text":"<pre><code>HeaterMixin(*args, **kwargs)\n</code></pre> <p>Mixin class for heater control</p> METHOD DESCRIPTION <code>atTemperature</code> <p>Check if temperature is reached</p> <code>getTemperature</code> <p>Get temperature</p> <code>holdTemperature</code> <p>Hold temperature</p> <code>setTemperature</code> <p>Set temperature</p>"},{"location":"site/api/Make/Heat/heater_mixin.html#controllably.Make.Heat.heater_mixin.HeaterMixin.atTemperature","title":"atTemperature","text":"<pre><code>atTemperature(\n    temperature: float,\n    *,\n    tolerance: float | None = None,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Check if at temperature</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature</p> <p> TYPE: <code>float</code> </p> <code>tolerance</code> <p>tolerance. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>at temperature</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Heat/heater_mixin.html#controllably.Make.Heat.heater_mixin.HeaterMixin.getTemperature","title":"getTemperature","text":"<pre><code>getTemperature() -&gt; float\n</code></pre> <p>Get temperature</p> RETURNS DESCRIPTION <code>float</code> <p>temperature</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Heat/heater_mixin.html#controllably.Make.Heat.heater_mixin.HeaterMixin.holdTemperature","title":"holdTemperature","text":"<pre><code>holdTemperature(\n    temperature: float,\n    duration: float,\n    blocking: bool = True,\n    *,\n    tolerance: float | None = None,\n    release: Event | None = None,\n) -&gt; Event | None\n</code></pre> <p>Hold temperature</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature</p> <p> TYPE: <code>float</code> </p> <code>duration</code> <p>duration to hold temperature</p> <p> TYPE: <code>float</code> </p> <code>blocking</code> <p>blocking call. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tolerance</code> <p>tolerance. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>release</code> <p>release event. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Event | None</code> <p>threading.Event: release event</p>"},{"location":"site/api/Make/Heat/heater_mixin.html#controllably.Make.Heat.heater_mixin.HeaterMixin.setTemperature","title":"setTemperature","text":"<pre><code>setTemperature(\n    temperature: float,\n    blocking: bool = True,\n    *,\n    tolerance: float | None = None,\n    release: Event | None = None,\n) -&gt; tuple[Thread, Event] | None\n</code></pre> <p>Set temperature</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature</p> <p> TYPE: <code>float</code> </p> <code>blocking</code> <p>blocking call. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tolerance</code> <p>tolerance. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>release</code> <p>release event. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[Thread, Event] | None</code> <p>tuple[threading.Thread, threading.Event]: thread and release event</p>"},{"location":"site/api/Make/Heat/peltier.html","title":"Peltier","text":"<p>This module holds the Peltier class.</p> ATTRIBUTE DESCRIPTION <code>MAX_LEN</code> <p>maximum length of buffer</p> <p> TYPE: <code>int</code> </p> <code>READ_FORMAT</code> <p>read format</p> <p> TYPE: <code>str</code> </p> <code>TempData</code> <p>temperature data</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>Peltier</code> <p>Peltier class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier","title":"Peltier","text":"<pre><code>Peltier(\n    port: str,\n    power_threshold: float = 20,\n    stabilize_timeout: float = 10,\n    tolerance: float = 1.5,\n    *,\n    baudrate: int = 115200,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>HeaterMixin</code>, <code>Maker</code></p> <p>Peltier class</p> ATTRIBUTE DESCRIPTION <code>buffer</code> <p>buffer data</p> <p> TYPE: <code>deque[tuple[NamedTuple, datetime]]</code> </p> <code>records</code> <p>records data</p> <p> TYPE: <code>deque[tuple[NamedTuple, datetime]]</code> </p> <code>record_event</code> <p>record event</p> <p> TYPE: <code>Event</code> </p> <code>tolerance</code> <p>tolerance</p> <p> TYPE: <code>float</code> </p> <code>power_threshold</code> <p>power threshold</p> <p> TYPE: <code>float</code> </p> <code>stabilize_timeout</code> <p>stabilize timeout</p> <p> TYPE: <code>float</code> </p> <code>buffer_df</code> <p>buffer data as DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records_df</code> <p>records data as DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> METHOD DESCRIPTION <code>clearCache</code> <p>clear data cache</p> <code>getData</code> <p>get data from device</p> <code>record</code> <p>record data</p> <code>stream</code> <p>stream data</p> <code>connect</code> <p>connect to device</p> <code>reset</code> <p>reset device</p> <code>atTemperature</code> <p>check if at temperature</p> <code>getTemperature</code> <p>get temperature</p> <code>setTemperature</code> <p>set temperature</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <p>Initialize the class</p> PARAMETER DESCRIPTION <code>port</code> <p>port</p> <p> TYPE: <code>str</code> </p> <code>power_threshold</code> <p>power threshold. Defaults to 20.</p> <p> TYPE: <code>float</code> DEFAULT: <code>20</code> </p> <code>stabilize_timeout</code> <p>stabilize timeout. Defaults to 10.</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>tolerance</code> <p>tolerance. Defaults to 1.5.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.5</code> </p> <code>baudrate</code> <p>baudrate. Defaults to 115200.</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>verbose</code> <p>verbosity. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.buffer_df","title":"buffer_df  <code>property</code>","text":"<pre><code>buffer_df: DataFrame\n</code></pre> <p>Buffer data as DataFrame</p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.records_df","title":"records_df  <code>property</code>","text":"<pre><code>records_df: DataFrame\n</code></pre> <p>Records data as DataFrame</p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.atTemperature","title":"atTemperature","text":"<pre><code>atTemperature(\n    temperature: float | None = None,\n    *,\n    tolerance: float | None = None,\n    power_threshold: float | None = None,\n    stabilize_timeout: float | None = None,\n) -&gt; bool\n</code></pre> <p>Check if at temperature</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>tolerance</code> <p>tolerance. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>power_threshold</code> <p>power threshold. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>stabilize timeout. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>at temperature</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clear data cache</p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.getData","title":"getData","text":"<pre><code>getData(*args, **kwargs) -&gt; TempData | None\n</code></pre> <p>Get data from device</p> RETURNS DESCRIPTION <code>TempData</code> <p>data from device</p> <p> TYPE: <code>TempData | None</code> </p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.getTemperature","title":"getTemperature","text":"<pre><code>getTemperature() -&gt; float | None\n</code></pre> <p>Get temperature</p> RETURNS DESCRIPTION <code>float</code> <p>temperature</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.record","title":"record","text":"<pre><code>record(\n    on: bool, show: bool = False, clear_cache: bool = False\n)\n</code></pre> <p>Record data</p> PARAMETER DESCRIPTION <code>on</code> <p>record data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>print data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clear_cache</code> <p>clear cache. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset device</p>"},{"location":"site/api/Make/Heat/peltier.html#controllably.Make.Heat.peltier.Peltier.stream","title":"stream","text":"<pre><code>stream(on: bool, show: bool = False)\n</code></pre> <p>Stream data</p> PARAMETER DESCRIPTION <code>on</code> <p>stream data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>print data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Light/led.html","title":"Led","text":"<p>This module contains the LED class.</p> CLASS DESCRIPTION <code>LED</code> <p>LED class</p> <code>Multi_LED</code> <p>Multi-channel LED class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED","title":"LED","text":"<pre><code>LED(\n    port: str = \"COM0\",\n    channel: int = 0,\n    *,\n    baudrate: int = 9600,\n    verbose=False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>TimedDeviceMixin</code>, <code>Maker</code></p> <p>LED class</p> ATTRIBUTE DESCRIPTION <code>channel</code> <p>channel number</p> <p> TYPE: <code>int</code> </p> <code>target_power</code> <p>target power level</p> <p> TYPE: <code>int</code> </p> <code>timer_event</code> <p>timer event</p> <p> TYPE: <code>Event</code> </p> <code>threads</code> <p>threads</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>dark</code> <p>Darken the LED</p> <code>light</code> <p>Light up the LED</p> <code>stop</code> <p>Stop the LED</p> <code>getPower</code> <p>Get the power level of the LED</p> <code>setPower</code> <p>Set the power level of the LED</p> <code>setValue</code> <p>Set the power level of the LED</p> <code>updatePower</code> <p>Update the power level of the LED</p> <code>execute</code> <p>Execute the dark and spin steps</p> <code>shutdown</code> <p>Shutdown procedure for the LED</p> <p>Initialize the LED class</p> PARAMETER DESCRIPTION <code>port</code> <p>port to connect to. Defaults to 'COM0'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'COM0'</code> </p> <code>channel</code> <p>channel number. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>baudrate</code> <p>baudrate for connection. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.dark","title":"dark","text":"<pre><code>dark(\n    duration: int | float, blocking: bool = True, **kwargs\n)\n</code></pre> <p>Darken the LED for a given duration</p> PARAMETER DESCRIPTION <code>duration</code> <p>duration to darken the LED</p> <p> TYPE: <code>int | float</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.execute","title":"execute","text":"<pre><code>execute(\n    dark_time: int | float = 0,\n    power: int = 255,\n    light_time: int | float = 1,\n    blocking: bool = True,\n    *args,\n    **kwargs,\n)\n</code></pre> <p>Execute the dark and light steps</p> PARAMETER DESCRIPTION <code>dark_time</code> <p>dark time. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>power</code> <p>power level. Defaults to 255.</p> <p> TYPE: <code>int</code> DEFAULT: <code>255</code> </p> <code>light_time</code> <p>light time. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.getAttributes","title":"getAttributes","text":"<pre><code>getAttributes() -&gt; dict\n</code></pre> <p>Get relevant attributes of the class</p> RETURNS DESCRIPTION <code>dict</code> <p>relevant attributes</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.getPower","title":"getPower","text":"<pre><code>getPower() -&gt; int\n</code></pre> <p>Get the current power level of the LED</p> RETURNS DESCRIPTION <code>int</code> <p>power level</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.light","title":"light","text":"<pre><code>light(\n    power: int,\n    duration: int | float,\n    blocking: bool = True,\n    **kwargs,\n)\n</code></pre> <p>Light up the LED at a given power level for a given duration</p> PARAMETER DESCRIPTION <code>power</code> <p>power level</p> <p> TYPE: <code>int</code> </p> <code>duration</code> <p>duration to light up the LED</p> <p> TYPE: <code>int | float</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.setPower","title":"setPower","text":"<pre><code>setPower(\n    power: int, event: Event | None = None, **kwargs\n) -&gt; bool\n</code></pre> <p>Set power level of LED</p> PARAMETER DESCRIPTION <code>power</code> <p>power level</p> <p> TYPE: <code>int</code> </p> <code>event</code> <p>event to set. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the power level was set</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.setTargetPower","title":"setTargetPower","text":"<pre><code>setTargetPower(power: int) -&gt; bool\n</code></pre> <p>Set power level of LED</p> PARAMETER DESCRIPTION <code>power</code> <p>power level</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the power level was set</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.setValue","title":"setValue","text":"<pre><code>setValue(\n    value: int, event: Event | None = None, **kwargs\n) -&gt; bool\n</code></pre> <p>Set the power level of the LED</p> PARAMETER DESCRIPTION <code>value</code> <p>power level</p> <p> TYPE: <code>int</code> </p> <code>event</code> <p>event to set. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the power level was set</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for the LED</p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.stop","title":"stop","text":"<pre><code>stop(**kwargs)\n</code></pre> <p>Stop the LED from emitting light</p>"},{"location":"site/api/Make/Light/led.html#controllably.Make.Light.led.LED.updatePower","title":"updatePower","text":"<pre><code>updatePower()\n</code></pre> <p>Update the power level of the LED</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html","title":"Bioshake","text":"<p>This module provides a class to control the QInstruments BioShake device.</p> ATTRIBUTE DESCRIPTION <code>MAX_LEN</code> <p>maximum length of data buffer</p> <p> TYPE: <code>int</code> </p> <code>ACCELERATION_LIMIT</code> <p>lower and upper limits for acceleration</p> <p> TYPE: <code>tuple</code> </p> CLASS DESCRIPTION <code>BioShake</code> <p>BioShake provides methods to control the QInstruments BioShake device.</p> <p>Documentation last updated: 2025-02-22/i&gt;"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake","title":"BioShake","text":"<pre><code>BioShake(\n    port: str,\n    *,\n    speed_tolerance: float = 10,\n    temp_tolerance: float = 1.5,\n    stabilize_timeout: float = 10,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>HeaterMixin</code>, <code>Maker</code></p> <p>BioShake provides methods to control the QInstruments BioShake device.</p> ATTRIBUTE DESCRIPTION <code>buffer_df</code> <p>buffer dataframe to store collected data</p> <p> TYPE: <code>DataFrame</code> </p> <code>records_df</code> <p>records dataframe to store collected data</p> <p> TYPE: <code>DataFrame</code> </p> <code>limits</code> <p>hardware limits for device</p> <p> TYPE: <code>dict[str, tuple]</code> </p> <code>ranges</code> <p>user-defined ranges for controls</p> <p> TYPE: <code>dict[str, tuple]</code> </p> <code>model</code> <p>device model description</p> <p> TYPE: <code>str</code> </p> <code>serial_number</code> <p>device serial number</p> <p> TYPE: <code>str</code> </p> <code>acceleration</code> <p>acceleration / deceleration of the shaker in seconds</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>actual speed of shake in rpm</p> <p> TYPE: <code>float</code> </p> <code>set_speed</code> <p>target speed</p> <p> TYPE: <code>float</code> </p> <code>speed_tolerance</code> <p>fractional tolerance to be considered on target for speed</p> <p> TYPE: <code>float</code> </p> <code>shake_time_left</code> <p>remaining time left on shaker</p> <p> TYPE: <code>float</code> </p> <code>temperature</code> <p>actual temperature of the plate in \u00b0C</p> <p> TYPE: <code>float</code> </p> <code>set_temperature</code> <p>target temperature</p> <p> TYPE: <code>float</code> </p> <code>temp_tolerance</code> <p>fractional tolerance to be considered on target for temperature</p> <p> TYPE: <code>float</code> </p> <code>stabilize_timeout</code> <p>time in seconds to wait before considering temperature stabilized</p> <p> TYPE: <code>float</code> </p> <code>is_counterclockwise</code> <p>returns the current mixing direction</p> <p> TYPE: <code>bool</code> </p> <code>is_locked</code> <p>returns the current ELM state</p> <p> TYPE: <code>bool</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>clearCache</code> <p>clears and remove data in buffer</p> <code>connect</code> <p>connect to the device</p> <code>controlTemp</code> <p>switches on/off the temperature control feature and starts/stops heating/cooling</p> <code>execute</code> <p>Set target temperature, then shake the plate at target speed and hold target temperature for desired duration</p> <code>getAcceleration</code> <p>returns the acceleration/deceleration value</p> <code>getDefaults</code> <p>retrieve the default and starting configuration of the device upon start up</p> <code>getErrors</code> <p>returns a list with errors and warnings which can occur during processing</p> <code>getShakeDirection</code> <p>returns the current mixing direction</p> <code>getElmState</code> <p>returns the current ELM state</p> <code>getErrors</code> <p>returns a list with errors and warnings which can occur during processing</p> <code>getShakeTimeLeft</code> <p>returns the remaining shake time in seconds if device was started with the a defined duration</p> <code>getSpeed</code> <p>returns the set speed and current mixing speed in rpm</p> <code>getStatus</code> <p>retrieve the status of the device's ELM, shaker, and temperature control</p> <code>getTemperature</code> <p>returns the set temperature and current temperature in \u00b0C</p> <code>getUserLimits</code> <p>retrieve the user defined limits for speed and temperature</p> <code>grip</code> <p>grip or release the object</p> <code>holdTemperature</code> <p>hold target temperature for desired duration</p> <code>home</code> <p>move shaker to the home position and locks in place</p> <code>record</code> <p>start or stop data recording</p> <code>reset</code> <p>restarts the controller</p> <code>setAcceleration</code> <p>sets the acceleration/deceleration value in seconds</p> <code>setCounterClockwise</code> <p>sets the mixing direction to counter clockwise</p> <code>setSpeed</code> <p>set the target mixing speed</p> <code>setTemperature</code> <p>sets target temperature between TempMin and TempMax in 1/10\u00b0C increments</p> <code>shake</code> <p>shake the plate at target speed, for specified duration</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>stop</code> <p>stop the shaker immediately at an undefined position, ignoring the defined deceleration time if in an emergency</p> <code>toggleECO</code> <p>toggle the economical mode to save energy and decrease abrasion </p> <code>toggleRecord</code> <p>start or stop data recording</p> <code>toggleShake</code> <p>starts/stops shaking with defined speed with defined acceleration/deceleration time</p> <code>toggleTemperature</code> <p>switches on/off the temperature control feature and starts/st</p> <p>Initialize the class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port address</p> <p> TYPE: <code>str</code> </p> <code>speed_tolerance</code> <p>fractional tolerance to be considered on target for speed. Defaults to 10.</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>temp_tolerance</code> <p>fractional tolerance to be considered on target for temperature. Defaults to 1.5.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.5</code> </p> <code>stabilize_timeout</code> <p>time in seconds to wait before considering temperature stabilized. Defaults to 10.</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>whether to simulate. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.buffer_df","title":"buffer_df  <code>property</code>","text":"<pre><code>buffer_df: DataFrame\n</code></pre> <p>Buffer dataframe to store collected data</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.is_counterclockwise","title":"is_counterclockwise  <code>property</code>","text":"<pre><code>is_counterclockwise: bool\n</code></pre> <p>Returns the current mixing direction</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.is_locked","title":"is_locked  <code>property</code>","text":"<pre><code>is_locked: bool\n</code></pre> <p>Returns the current ELM state</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.model","title":"model  <code>property</code>","text":"<pre><code>model: str\n</code></pre> <p>Device model description</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.records_df","title":"records_df  <code>property</code>","text":"<pre><code>records_df: DataFrame\n</code></pre> <p>Records dataframe to store collected data</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.serial_number","title":"serial_number  <code>property</code>","text":"<pre><code>serial_number: str\n</code></pre> <p>Device serial number</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.__info__","title":"__info__","text":"<pre><code>__info__()\n</code></pre> <p>Prints the boot screen text</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.__serial__","title":"__serial__","text":"<pre><code>__serial__() -&gt; str\n</code></pre> <p>Returns the device serial number</p> RETURNS DESCRIPTION <code>str</code> <p>device serial number</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.__version__","title":"__version__","text":"<pre><code>__version__() -&gt; str\n</code></pre> <p>Retrieve the software version on the device</p> RETURNS DESCRIPTION <code>str</code> <p>device version</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.atSpeed","title":"atSpeed","text":"<pre><code>atSpeed(\n    speed: float | None = None,\n    *,\n    tolerance: float | None = None,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether target speed has been reached</p> PARAMETER DESCRIPTION <code>speed</code> <p>target speed. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>tolerance</code> <p>fractional tolerance to be considered on target. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether target speed has been reached</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.atTemperature","title":"atTemperature","text":"<pre><code>atTemperature(\n    temperature: float | None = None,\n    *,\n    tolerance: float | None = None,\n    stabilize_timeout: float | None = None,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether target temperature has been reached</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>tolerance</code> <p>fractional tolerance to be considered on target. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>time in seconds to wait before considering temperature stabilized. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether target temperature has been reached</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clears and remove data in buffer</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.controlTemp","title":"controlTemp","text":"<pre><code>controlTemp(on: bool)\n</code></pre> <p>Switches on/off the temperature control feature and starts/stops heating/cooling</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start temperature control</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.execute","title":"execute","text":"<pre><code>execute(\n    shake: bool,\n    temperature: float | None = None,\n    speed: int | None = None,\n    duration: int | None = None,\n    acceleration: int | None = None,\n    *args,\n    **kwargs,\n)\n</code></pre> <p>Set target temperature, then shake the plate at target speed and hold target temperature for desired duration Alias for <code>holdTemperature()</code> and <code>shake()</code></p> PARAMETER DESCRIPTION <code>shake</code> <p>whether to shake</p> <p> TYPE: <code>bool</code> </p> <code>temperature</code> <p>temperature in degree \u00b0C. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>speed</code> <p>shaking speed. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>duration</code> <p>duration of shake. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>acceleration</code> <p>acceleration value. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getAcceleration","title":"getAcceleration","text":"<pre><code>getAcceleration() -&gt; float | None\n</code></pre> <p>Returns the acceleration/deceleration value</p> RETURNS DESCRIPTION <code>float</code> <p>acceleration/deceleration value</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getData","title":"getData","text":"<pre><code>getData(\n    query: Any | None = None, *args, **kwargs\n) -&gt; FloatData | None\n</code></pre> <p>Get data from device</p> PARAMETER DESCRIPTION <code>query</code> <p>query to device. Defaults to None.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>FloatData | None</code> <p>FloatData|None: data from device</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getDefaults","title":"getDefaults","text":"<pre><code>getDefaults()\n</code></pre> <p>Retrieve the default and starting configuration of the device upon start up</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getElmState","title":"getElmState","text":"<pre><code>getElmState() -&gt; int\n</code></pre> <p>Returns the current ELM state</p> RETURNS DESCRIPTION <code>int</code> <p>ELM state</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getErrors","title":"getErrors","text":"<pre><code>getErrors() -&gt; list[str]\n</code></pre> <p>Returns a list with errors and warnings which can occur during processing</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: list of errors and warnings</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getShakeDirection","title":"getShakeDirection","text":"<pre><code>getShakeDirection() -&gt; bool\n</code></pre> <p>Returns the current mixing direction</p> RETURNS DESCRIPTION <code>bool</code> <p>whether mixing direction is counterclockwise</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getShakeTimeLeft","title":"getShakeTimeLeft","text":"<pre><code>getShakeTimeLeft() -&gt; float | None\n</code></pre> <p>Returns the remaining shake time in seconds if device was started with the a defined duration</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: minimum target shake speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getSpeed","title":"getSpeed","text":"<pre><code>getSpeed() -&gt; float\n</code></pre> <p>Returns current mixing speed in rpm</p> RETURNS DESCRIPTION <code>float</code> <p>current mixing speed</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; dict[str, int | None]\n</code></pre> <p>Retrieve the status of the device's ELM, shaker, and temperature control</p> RETURNS DESCRIPTION <code>dict[str, int | None]</code> <p>dict[str, int|None]: dictionary of states</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getTargetSpeed","title":"getTargetSpeed","text":"<pre><code>getTargetSpeed() -&gt; float | None\n</code></pre> <p>Returns the set temperature</p> RETURNS DESCRIPTION <code>float</code> <p>set temperature</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getTargetTemp","title":"getTargetTemp","text":"<pre><code>getTargetTemp() -&gt; float | None\n</code></pre> <p>Returns the set temperature</p> RETURNS DESCRIPTION <code>float</code> <p>set temperature</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getTemperature","title":"getTemperature","text":"<pre><code>getTemperature() -&gt; float | None\n</code></pre> <p>Get temperature</p> RETURNS DESCRIPTION <code>float</code> <p>actual temperature</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.getUserLimits","title":"getUserLimits","text":"<pre><code>getUserLimits()\n</code></pre> <p>Retrieve the user defined limits for speed and temperature</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.grip","title":"grip","text":"<pre><code>grip(on: bool)\n</code></pre> <p>Grip or release the object</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to grip the object</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.home","title":"home","text":"<pre><code>home(timeout: int = 5)\n</code></pre> <p>Move shaker to the home position and locks in place</p> <p>Note: Minimum response time is less than 4 sec (internal failure timeout)</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.record","title":"record","text":"<pre><code>record(\n    on: bool, show: bool = False, clear_cache: bool = False\n)\n</code></pre> <p>Start or stop data recording</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start recording</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to print out data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clear_cache</code> <p>whether to clear cache. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.reset","title":"reset","text":"<pre><code>reset(timeout: int = 30)\n</code></pre> <p>Restarts the controller</p> <p>Note: This takes about 30 seconds for BS units and 5 for the Q1, CP models</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.setAcceleration","title":"setAcceleration","text":"<pre><code>setAcceleration(\n    acceleration: int, as_default: bool = False\n)\n</code></pre> <p>Sets the acceleration/deceleration value in seconds</p> PARAMETER DESCRIPTION <code>acceleration</code> <p>acceleration value</p> <p> TYPE: <code>int</code> </p> <code>as_default</code> <p>whether to change the default acceleration. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.setCounterClockwise","title":"setCounterClockwise","text":"<pre><code>setCounterClockwise(counterclockwise: bool)\n</code></pre> <p>Sets the mixing direction to counter clockwise</p> PARAMETER DESCRIPTION <code>counterclockwise</code> <p>whether to set mixing direction to counter clockwise</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.setSpeed","title":"setSpeed","text":"<pre><code>setSpeed(speed: int, as_default: bool = False)\n</code></pre> <p>Set the target mixing speed</p> <p>Note: Speed values below 200 RPM are possible, but not recommended</p> PARAMETER DESCRIPTION <code>speed</code> <p>target mixing speed</p> <p> TYPE: <code>int</code> </p> <code>as_default</code> <p>whether to change the default speed. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.setTemperature","title":"setTemperature","text":"<pre><code>setTemperature(\n    temperature: float,\n    blocking: bool = True,\n    *,\n    tolerance: float = None,\n    release: Event = None,\n) -&gt; tuple[Thread, Event] | None\n</code></pre> <p>Set target temperature between TempMin and TempMax in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature</p> <p> TYPE: <code>float</code> </p> <code>blocking</code> <p>whether to block until temperature is reached. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tolerance</code> <p>fractional tolerance to be considered on target. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>release</code> <p>event to release thread. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[Thread, Event] | None</code> <p>tuple[threading.Thread, threading.Event]|None: thread and event</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.shake","title":"shake","text":"<pre><code>shake(\n    speed: int | None = None,\n    duration: int | None = None,\n    blocking: bool = True,\n    *,\n    acceleration: int | None = None,\n    release: Event | None = None,\n)\n</code></pre> <p>Shake the plate at target speed, for specified duration</p> PARAMETER DESCRIPTION <code>speed</code> <p>shaking speed. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>duration</code> <p>duration of shake. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>blocking</code> <p>whether to block until shake is complete. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>acceleration</code> <p>acceleration value. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>release</code> <p>event to release thread. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.stop","title":"stop","text":"<pre><code>stop(emergency: bool = True)\n</code></pre> <p>Stop the shaker immediately at an undefined position, ignoring the defined deceleration time if in an emergency</p> PARAMETER DESCRIPTION <code>emergency</code> <p>whether to perform an emergency stop. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.stream","title":"stream","text":"<pre><code>stream(on: bool, show: bool = False)\n</code></pre> <p>Start or stop data streaming</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start streaming</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to print out data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.toggleECO","title":"toggleECO","text":"<pre><code>toggleECO(on: bool, timeout: int = 5)\n</code></pre> <p>Toggle the economical mode to save energy and decrease abrasion </p> PARAMETER DESCRIPTION <code>on</code> <p>whether to enter eco mode</p> <p> TYPE: <code>bool</code> </p> <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/bioshake.html#controllably.Make.Mixture.QInstruments.bioshake.BioShake.toggleShake","title":"toggleShake","text":"<pre><code>toggleShake(\n    on: bool, duration: int | None = None, home: bool = True\n)\n</code></pre> <p>Starts/stops shaking with defined speed with defined acceleration/deceleration time. Shake runtime can be specified, as well as whether to return to home position after stopping.</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start shaking</p> <p> TYPE: <code>bool</code> </p> <code>duration</code> <p>shake runtime. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>home</code> <p>whether to return to home when shaking stops. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html","title":"Qinstruments Api","text":"<p>QInstruments API for controlling hardware from QInstruments.</p> ATTRIBUTE DESCRIPTION <code>READ_FORMAT</code> <p>format for reading data</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>format for writing data</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>data type for data</p> <p> TYPE: <code>NamedTuple</code> </p> <code>BoolData</code> <p>data type for boolean data</p> <p> TYPE: <code>NamedTuple</code> </p> <code>FloatData</code> <p>data type for float data</p> <p> TYPE: <code>NamedTuple</code> </p> <code>IntData</code> <p>data type for integer data</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>QInstrumentsDevice</code> <p>provides an interface for available actions to control devices from QInstruments</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice","title":"QInstrumentsDevice","text":"<pre><code>QInstrumentsDevice(\n    port: str | None = None,\n    baudrate: int = 9600,\n    timeout: int = 1,\n    *,\n    init_timeout: int = 5,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <p>QInstrumentsDevice provides an interface for available actions to control devices from QInstruments, including orbital shakers, heat plates, and cold plates.</p> ATTRIBUTE DESCRIPTION <code>port</code> <p>device serial port</p> <p> TYPE: <code>str</code> </p> <code>baudrate</code> <p>device baudrate</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>device timeout</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>serial</code> <p>serial object for the device</p> <p> TYPE: <code>Serial</code> </p> <code>init_timeout</code> <p>timeout for initialization</p> <p> TYPE: <code>int</code> </p> <code>message_end</code> <p>message end character</p> <p> TYPE: <code>str</code> </p> <code>model</code> <p>device model</p> <p> TYPE: <code>str</code> </p> <code>flags</code> <p>flags for the device</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>clear</code> <p>clear the input and output buffers</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>query</code> <p>query the device (i.e. write and read data)</p> <code>read</code> <p>read data from the device</p> <code>write</code> <p>write data to the device</p> <code>disableBootScreen</code> <p>permanent deactivation of the boot screen startup text</p> <code>disableCLED</code> <p>permanent deactivation of the LED indication lights</p> <code>enableBootScreen</code> <p>permanent activation of the boot screen startup text</p> <code>enableCLED</code> <p>permanent activation of the LED indication lights</p> <code>flashLed</code> <p>user device LED flashes five times</p> <code>getCLED</code> <p>returns the status LED state</p> <code>getDescription</code> <p>returns model type</p> <code>getErrorList</code> <p>returns a list with errors and warnings which can occur during processing</p> <code>getSerial</code> <p>returns the device serial number</p> <code>getVersion</code> <p>returns the firmware version number</p> <code>info</code> <p>retrieve the boot screen text</p> <code>resetDevice</code> <p>restarts the controller</p> <code>setBuzzer</code> <p>ring the buzzer for duration in milliseconds</p> <code>version</code> <p>returns the model type and firmware version number</p> <code>leaveEcoMode</code> <p>leaves the economical mode and switches into the normal operating state</p> <code>setEcoMode</code> <p>witches the shaker into economical mode and reduces electricity consumption</p> <code>getShakeAcceleration</code> <p>returns the acceleration/deceleration value</p> <code>getShakeAccelerationMax</code> <p>get the maximum acceleration/deceleration time in seconds</p> <code>getShakeAccelerationMin</code> <p>get the minimum acceleration/deceleration time in seconds</p> <code>getShakeActualSpeed</code> <p>returns the current mixing speed</p> <code>getShakeDefaultDirection</code> <p>returns the mixing direction when the device starts up</p> <code>getShakeDirection</code> <p>returns the current mixing direction</p> <code>getShakeMaxRpm</code> <p>returns the device specific maximum target speed (i.e. hardware limits)</p> <code>getShakeMinRpm</code> <p>returns the device specific minimum target speed (i.e. hardware limits)</p> <code>getShakeRemainingTime</code> <p>returns the remaining time in seconds if device was started with the command shakeOnWithRuntime</p> <code>getShakeSpeedLimitMax</code> <p>returns the upper limit for the target speed</p> <code>getShakeSpeedLimitMin</code> <p>returns the lower limit for the target speed</p> <code>getShakeState</code> <p>returns shaker state as an integer</p> <code>getShakeStateAsString</code> <p>returns shaker state as a string</p> <code>getShakeTargetSpeed</code> <p>returns the target mixing speed</p> <code>setShakeAcceleration</code> <p>sets the acceleration/deceleration value in seconds</p> <code>setShakeDefaultDirection</code> <p>permanently sets the default mixing direction after device start up</p> <code>setShakeDirection</code> <p>sets the mixing direction</p> <code>setShakeSpeedLimitMax</code> <p>permanently set upper limit for the target speed (between 0 to 3000)</p> <code>setShakeSpeedLimitMin</code> <p>permanently set lower limit for the target speed (between 0 to 3000)</p> <code>setShakeTargetSpeed</code> <p>set the target mixing speed</p> <code>shakeEmergencyOff</code> <p>stop the shaker immediately at an undefined position ignoring the defined deceleration time</p> <code>shakeGoHome</code> <p>move shaker to the home position and locks in place</p> <code>shakeOff</code> <p>stops shaking within the defined deceleration time, go to the home position and locks in place</p> <code>shakeOffNonZeroPos</code> <p>tops shaking within the defined deceleration time, do not go to home position and do not lock in home position</p> <code>shakeOffWithDeEnergizeSolenoid</code> <p>tops shaking within the defined deceleration time, go to the home position and locks in place for 1 second, then unlock home position</p> <code>shakeOn</code> <p>tarts shaking with defined speed with defined acceleration time</p> <code>shakeOnWithRuntime</code> <p>starts shaking with defined speed within defined acceleration time for given time value in seconds</p> <code>getTemp40Calibr</code> <p>returns the offset value at the 40\u00b0C calibration point</p> <code>getTemp90Calibr</code> <p>returns the offset value at the 90\u00b0C calibration point</p> <code>getTempActual</code> <p>returns the current temperature in celsius</p> <code>getTempLimiterMax</code> <p>returns the upper limit for the target temperature in celsius</p> <code>getTempLimiterMin</code> <p>returns the lower limit for the target temperature in celsius</p> <code>getTempMax</code> <p>returns the device specific maximum target temperature in celsius (i.e. hardware limits)</p> <code>getTempMin</code> <p>returns the device specific minimum target temperature in celsius (i.e. hardware limits)</p> <code>getTempState</code> <p>returns the state of the temperature control feature</p> <code>getTempTarget</code> <p>returns the target temperature</p> <code>setTemp40Calibr</code> <p>permanently sets the offset value at the 40\u00b0C calibration point in 1/10\u00b0C increments</p> <code>setTemp90Calibr</code> <p>permanently sets the offset value at the 90\u00b0C calibration point in 1/10\u00b0C increments</p> <code>setTempLimiterMax</code> <p>permanently sets the upper limit for the target temperature in 1/10\u00b0C increments</p> <code>setTempLimiterMin</code> <p>permanently sets the lower limit for the target temperature in 1/10\u00b0C increments</p> <code>setTempTarget</code> <p>sets target temperature between TempMin and TempMax in 1/10\u00b0C increments</p> <code>tempOff</code> <p>switches off the temperature control feature and stops heating/cooling</p> <code>tempOn</code> <p>switches on the temperature control feature and starts heating/cooling</p> <code>getElmSelftest</code> <p>returns whether the ELM self-test is enabled or disabled at device startup</p> <code>getElmStartupPosition</code> <p>returns whether ELM is unlocked after device startup</p> <code>getElmState</code> <p>returns the ELM status</p> <code>getElmStateAsString</code> <p>returns the ELM status as a string</p> <code>setElmLockPos</code> <p>close the ELM</p> <code>setElmSelftest</code> <p>permanently set whether the ELM self-test is enabled at device startup</p> <code>setElmStartupPosition</code> <p>permanently set whether the ELM is unlocked after device startup</p> <code>setElmUnlockPos</code> <p>open the ELM</p> <p>Initialize QInstrumentsDevice class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port for the device. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>baudrate</code> <p>baudrate for the device. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>timeout</code> <p>timeout for the device. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>init_timeout</code> <p>timeout for initialization. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>data_type</code> <p>data type for data. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>format for reading data. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>format for writing data. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.disableBootScreen","title":"disableBootScreen","text":"<pre><code>disableBootScreen()\n</code></pre> <p>Permanent deactivation of the boot screen startup text</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.disableCLED","title":"disableCLED","text":"<pre><code>disableCLED()\n</code></pre> <p>Permanent deactivation of the LED indication lights. The instrument will reset after this command.</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.enableBootScreen","title":"enableBootScreen","text":"<pre><code>enableBootScreen()\n</code></pre> <p>Permanent activation of the boot screen startup text</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.enableCLED","title":"enableCLED","text":"<pre><code>enableCLED()\n</code></pre> <p>Permanent activation of the LED indication lights. The instrument will reset after this command.</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.flashLed","title":"flashLed","text":"<pre><code>flashLed()\n</code></pre> <p>User device LED flashes five times</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getCLED","title":"getCLED","text":"<pre><code>getCLED() -&gt; bool | None\n</code></pre> <p>Returns the status LED state</p> RETURNS DESCRIPTION <code>bool | None</code> <p>bool|None: whether the LED is enabled</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getDescription","title":"getDescription","text":"<pre><code>getDescription() -&gt; str\n</code></pre> <p>Returns model type</p> RETURNS DESCRIPTION <code>str</code> <p>model type</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getElmSelftest","title":"getElmSelftest","text":"<pre><code>getElmSelftest() -&gt; bool\n</code></pre> <p>Returns whether the ELM self-test is enabled or disabled at device startup</p> RETURNS DESCRIPTION <code>bool</code> <p>whether ELM self-test is enabled at device startup</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getElmStartupPosition","title":"getElmStartupPosition","text":"<pre><code>getElmStartupPosition() -&gt; bool\n</code></pre> <p>Returns whether ELM is unlocked after device startup</p> RETURNS DESCRIPTION <code>bool</code> <p>whether ELM is unlocked after device startup</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getElmState","title":"getElmState","text":"<pre><code>getElmState() -&gt; int | None\n</code></pre> <p>Returns the ELM status</p> RETURNS DESCRIPTION <code>int | None</code> <p>int|None: ELM status as integer</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getElmStateAsString","title":"getElmStateAsString","text":"<pre><code>getElmStateAsString() -&gt; str | None\n</code></pre> <p>Returns the ELM status as a string</p> RETURNS DESCRIPTION <code>str | None</code> <p>str|None: ELM status as string</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getErrorList","title":"getErrorList","text":"<pre><code>getErrorList() -&gt; list[str]\n</code></pre> <p>Returns a list with errors and warnings which can occur during processing</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: list of errors and warnings</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getSerial","title":"getSerial","text":"<pre><code>getSerial() -&gt; str\n</code></pre> <p>Returns the device serial number</p> RETURNS DESCRIPTION <code>str</code> <p>device serial number</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeAcceleration","title":"getShakeAcceleration","text":"<pre><code>getShakeAcceleration() -&gt; float | None\n</code></pre> <p>Returns the acceleration/deceleration value</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: acceleration/deceleration value</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeAccelerationMax","title":"getShakeAccelerationMax","text":"<pre><code>getShakeAccelerationMax() -&gt; float | None\n</code></pre> <p>Get the maximum acceleration/deceleration time in seconds</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: acceleration/deceleration time in seconds</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeAccelerationMin","title":"getShakeAccelerationMin","text":"<pre><code>getShakeAccelerationMin() -&gt; float | None\n</code></pre> <p>Get the minimum acceleration/deceleration time in seconds</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: acceleration/deceleration time in seconds</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeActualSpeed","title":"getShakeActualSpeed","text":"<pre><code>getShakeActualSpeed() -&gt; float | None\n</code></pre> <p>Returns the current mixing speed</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: current mixing speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeDefaultDirection","title":"getShakeDefaultDirection","text":"<pre><code>getShakeDefaultDirection() -&gt; bool | None\n</code></pre> <p>Returns the mixing direction when the device starts up</p> RETURNS DESCRIPTION <code>bool | None</code> <p>bool|None: whether mixing direction is counterclockwise</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeDirection","title":"getShakeDirection","text":"<pre><code>getShakeDirection() -&gt; bool | None\n</code></pre> <p>Returns the current mixing direction</p> RETURNS DESCRIPTION <code>bool | None</code> <p>bool|None: whether mixing direction is counterclockwise</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeMaxRpm","title":"getShakeMaxRpm","text":"<pre><code>getShakeMaxRpm() -&gt; float | None\n</code></pre> <p>Returns the device specific maximum target speed (i.e. hardware limits)</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: maximum target shake speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeMinRpm","title":"getShakeMinRpm","text":"<pre><code>getShakeMinRpm() -&gt; float | None\n</code></pre> <p>Returns the device specific minimum target speed (i.e. hardware limits)</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: minimum target shake speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeRemainingTime","title":"getShakeRemainingTime","text":"<pre><code>getShakeRemainingTime() -&gt; float | None\n</code></pre> <p>Returns the remaining time in seconds if device was started with the command <code>shakeOnWithRuntime</code></p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: minimum target shake speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeSpeedLimitMax","title":"getShakeSpeedLimitMax","text":"<pre><code>getShakeSpeedLimitMax() -&gt; float | None\n</code></pre> <p>Returns the upper limit for the target speed</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: upper limit for the target speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeSpeedLimitMin","title":"getShakeSpeedLimitMin","text":"<pre><code>getShakeSpeedLimitMin() -&gt; float | None\n</code></pre> <p>Returns the lower limit for the target speed</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: lower limit for the target speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeState","title":"getShakeState","text":"<pre><code>getShakeState() -&gt; int | None\n</code></pre> <p>Returns shaker state as an integer</p> RETURNS DESCRIPTION <code>int | None</code> <p>int|None: shaker state as integer</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeStateAsString","title":"getShakeStateAsString","text":"<pre><code>getShakeStateAsString() -&gt; str | None\n</code></pre> <p>Returns shaker state as a string</p> RETURNS DESCRIPTION <code>str | None</code> <p>str|None: shaker state as string</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getShakeTargetSpeed","title":"getShakeTargetSpeed","text":"<pre><code>getShakeTargetSpeed() -&gt; float | None\n</code></pre> <p>Returns the target mixing speed</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: target mixing speed</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTemp40Calibr","title":"getTemp40Calibr","text":"<pre><code>getTemp40Calibr() -&gt; float | None\n</code></pre> <p>Returns the offset value at the 40\u00b0C calibration point</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: offset value at the 40\u00b0C calibration point</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTemp90Calibr","title":"getTemp90Calibr","text":"<pre><code>getTemp90Calibr() -&gt; float | None\n</code></pre> <p>Returns the offset value at the 90\u00b0C calibration point</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: offset value at the 90\u00b0C calibration point</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempActual","title":"getTempActual","text":"<pre><code>getTempActual() -&gt; float | None\n</code></pre> <p>Returns the current temperature in celsius</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: current temperature in celsius</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempLimiterMax","title":"getTempLimiterMax","text":"<pre><code>getTempLimiterMax() -&gt; float | None\n</code></pre> <p>Returns the upper limit for the target temperature in celsius</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: upper limit for the target temperature in celsius</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempLimiterMin","title":"getTempLimiterMin","text":"<pre><code>getTempLimiterMin() -&gt; float | None\n</code></pre> <p>Returns the lower limit for the target temperature in celsius</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: lower limit for the target temperature in celsius</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempMax","title":"getTempMax","text":"<pre><code>getTempMax() -&gt; float | None\n</code></pre> <p>Returns the device specific maximum target temperature in celsius (i.e. hardware limits)</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: device specific maximum target temperature in celsius</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempMin","title":"getTempMin","text":"<pre><code>getTempMin() -&gt; float | None\n</code></pre> <p>Returns the device specific minimum target temperature in celsius (i.e. hardware limits)</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: device specific minimum target temperature in celsius</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempState","title":"getTempState","text":"<pre><code>getTempState() -&gt; bool\n</code></pre> <p>Returns the state of the temperature control feature</p> RETURNS DESCRIPTION <code>bool</code> <p>whether temperature control is enabled</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getTempTarget","title":"getTempTarget","text":"<pre><code>getTempTarget() -&gt; float | None\n</code></pre> <p>Returns the target temperature</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: target temperature</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.getVersion","title":"getVersion","text":"<pre><code>getVersion() -&gt; str\n</code></pre> <p>Returns the firmware version number</p> RETURNS DESCRIPTION <code>str</code> <p>firmware version number</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.info","title":"info","text":"<pre><code>info()\n</code></pre> <p>Retrieve the boot screen text</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.leaveEcoMode","title":"leaveEcoMode","text":"<pre><code>leaveEcoMode(timeout: int = 5)\n</code></pre> <p>Leaves the economical mode and switches into the normal operating state</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = False,\n    *,\n    timeout: int | float = 0.3,\n    format_in: str | None = None,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    timestamp: bool = False,\n) -&gt; Any\n</code></pre> <p>Query the device (i.e. write and read data)</p> PARAMETER DESCRIPTION <code>data</code> <p>data to write to the device</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>whether to expect multiple outputs. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>timeout</code> <p>timeout for the query. Defaults to 0.3.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>0.3</code> </p> <code>format_in</code> <p>format for writing data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>format_out</code> <p>format for reading data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>data_type</code> <p>data type for data. Defaults to None.</p> <p> TYPE: <code>NamedTuple | None</code> DEFAULT: <code>None</code> </p> <code>timestamp</code> <p>whether to include a timestamp. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>str|float|None: response (string / float)</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.resetDevice","title":"resetDevice","text":"<pre><code>resetDevice(timeout: int = 30)\n</code></pre> <p>Restarts the controller</p> <p>Note: This takes about 30 seconds for BS units and 5 for the Q1, CP models</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 30.</p> <p> TYPE: <code>int</code> DEFAULT: <code>30</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setBuzzer","title":"setBuzzer","text":"<pre><code>setBuzzer(duration: int)\n</code></pre> <p>Ring the buzzer for duration in milliseconds</p> PARAMETER DESCRIPTION <code>duration</code> <p>duration in milliseconds, from 50 to 999</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setEcoMode","title":"setEcoMode","text":"<pre><code>setEcoMode(timeout: int = 5)\n</code></pre> <p>Switches the shaker into economical mode and reduces electricity consumption.</p> <p>Note: all commands after this, other than leaveEcoMode, will return <code>e</code></p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setElmLockPos","title":"setElmLockPos","text":"<pre><code>setElmLockPos(timeout: int = 5) -&gt; bool\n</code></pre> <p>Close the ELM</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the ELM was successfully closed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setElmSelftest","title":"setElmSelftest","text":"<pre><code>setElmSelftest(enable: bool)\n</code></pre> <p>Permanently set whether the ELM self-test is enabled at device startup</p> PARAMETER DESCRIPTION <code>enable</code> <p>whether the ELM self-test is enabled at device startup</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setElmStartupPosition","title":"setElmStartupPosition","text":"<pre><code>setElmStartupPosition(unlock: bool)\n</code></pre> <p>Permanently set whether the ELM is unlocked after device startup</p> PARAMETER DESCRIPTION <code>unlock</code> <p>whether the ELM is unlocked after device startup</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setElmUnlockPos","title":"setElmUnlockPos","text":"<pre><code>setElmUnlockPos(timeout: int = 5) -&gt; bool\n</code></pre> <p>Open the ELM</p> <p>Note: The ELM should only be opened when the tablar is in the home position.</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the ELM was successfully opened</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeAcceleration","title":"setShakeAcceleration","text":"<pre><code>setShakeAcceleration(acceleration: int)\n</code></pre> <p>Sets the acceleration/deceleration value in seconds</p> PARAMETER DESCRIPTION <code>acceleration</code> <p>acceleration value</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeDefaultDirection","title":"setShakeDefaultDirection","text":"<pre><code>setShakeDefaultDirection(counterclockwise: bool)\n</code></pre> <p>Permanently sets the default mixing direction after device start up</p> PARAMETER DESCRIPTION <code>counterclockwise</code> <p>whether to set default mixing direction to counter clockwise</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeDirection","title":"setShakeDirection","text":"<pre><code>setShakeDirection(counterclockwise: bool)\n</code></pre> <p>Sets the mixing direction</p> PARAMETER DESCRIPTION <code>counterclockwise</code> <p>whether to set mixing direction to counter clockwise</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeSpeedLimitMax","title":"setShakeSpeedLimitMax","text":"<pre><code>setShakeSpeedLimitMax(speed: int)\n</code></pre> <p>Permanently set upper limit for the target speed (between 0 to 3000)</p> PARAMETER DESCRIPTION <code>speed</code> <p>upper limit for the target speed</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeSpeedLimitMin","title":"setShakeSpeedLimitMin","text":"<pre><code>setShakeSpeedLimitMin(speed: int)\n</code></pre> <p>Permanently set lower limit for the target speed (between 0 to 3000)</p> <p>Note: Speed values below 200 RPM are possible, but not recommended</p> PARAMETER DESCRIPTION <code>speed</code> <p>lower limit for the target speed</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setShakeTargetSpeed","title":"setShakeTargetSpeed","text":"<pre><code>setShakeTargetSpeed(speed: int)\n</code></pre> <p>Set the target mixing speed</p> <p>Note: Speed values below 200 RPM are possible, but not recommended</p> PARAMETER DESCRIPTION <code>speed</code> <p>target mixing speed</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setTemp40Calibr","title":"setTemp40Calibr","text":"<pre><code>setTemp40Calibr(temperature_calibration_40: float)\n</code></pre> <p>Permanently sets the offset value at the 40\u00b0C calibration point in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature_calibration_40</code> <p>offset value (between 0\u00b0C and 99\u00b0C)</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setTemp90Calibr","title":"setTemp90Calibr","text":"<pre><code>setTemp90Calibr(temperature_calibration_90: float)\n</code></pre> <p>Permanently sets the offset value at the 90\u00b0C calibration point in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature_calibration_90</code> <p>offset value (between 0\u00b0C and 99\u00b0C)</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setTempLimiterMax","title":"setTempLimiterMax","text":"<pre><code>setTempLimiterMax(temperature_max: float)\n</code></pre> <p>Permanently sets the upper limit for the target temperature in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature_max</code> <p>upper limit for the target temperature (between -20.0\u00b0C and 99.9\u00b0C)</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setTempLimiterMin","title":"setTempLimiterMin","text":"<pre><code>setTempLimiterMin(temperature_min: float)\n</code></pre> <p>Permanently sets the lower limit for the target temperature in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature_min</code> <p>lower limit for the target temperature (between -20.0\u00b0C and 99.9\u00b0C)</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.setTempTarget","title":"setTempTarget","text":"<pre><code>setTempTarget(temperature: float)\n</code></pre> <p>Sets target temperature between TempMin and TempMax in 1/10\u00b0C increments</p> PARAMETER DESCRIPTION <code>temperature</code> <p>target temperature (between TempMin and TempMax)</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeEmergencyOff","title":"shakeEmergencyOff","text":"<pre><code>shakeEmergencyOff()\n</code></pre> <p>Stop the shaker immediately at an undefined position ignoring the defined deceleration time</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeGoHome","title":"shakeGoHome","text":"<pre><code>shakeGoHome(timeout: int = 5)\n</code></pre> <p>Move shaker to the home position and locks in place</p> <p>Note: Minimum response time is less than 4 sec (internal failure timeout)</p> PARAMETER DESCRIPTION <code>timeout</code> <p>number of seconds to wait before aborting. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeOff","title":"shakeOff","text":"<pre><code>shakeOff()\n</code></pre> <p>Stops shaking within the defined deceleration time, go to the home position and locks in place</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeOffNonZeroPos","title":"shakeOffNonZeroPos","text":"<pre><code>shakeOffNonZeroPos()\n</code></pre> <p>Stops shaking within the defined deceleration time, do not go to home position and do not lock in home position</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeOffWithDeEnergizeSolenoid","title":"shakeOffWithDeEnergizeSolenoid","text":"<pre><code>shakeOffWithDeEnergizeSolenoid()\n</code></pre> <p>Stops shaking within the defined deceleration time, go to the home position and locks in place for 1 second,  then unlock home position</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeOn","title":"shakeOn","text":"<pre><code>shakeOn()\n</code></pre> <p>Starts shaking with defined speed with defined acceleration time</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.shakeOnWithRuntime","title":"shakeOnWithRuntime","text":"<pre><code>shakeOnWithRuntime(duration: int)\n</code></pre> <p>Starts shaking with defined speed within defined acceleration time for given time value in seconds</p> PARAMETER DESCRIPTION <code>duration</code> <p>shake duration in seconds (from 0 to 999,999)</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.tempOff","title":"tempOff","text":"<pre><code>tempOff()\n</code></pre> <p>Switches off the temperature control feature and stops heating/cooling</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.tempOn","title":"tempOn","text":"<pre><code>tempOn()\n</code></pre> <p>Switches on the temperature control feature and starts heating/cooling</p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_api.html#controllably.Make.Mixture.QInstruments.qinstruments_api.qinstruments_api.QInstrumentsDevice.version","title":"version","text":"<pre><code>version() -&gt; str\n</code></pre> <p>Returns the model type and firmware version number</p> RETURNS DESCRIPTION <code>str</code> <p>model type and firmware version number</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Make/Mixture/QInstruments/qinstruments_api/qinstruments_lib.html","title":"Qinstruments Lib","text":"<p>This module holds the references for QInstruments firmware.</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html","title":"Twomag","text":"<p>This module contains the TwoMagStirrer class, which is a wrapper for the TwoMagDevice class.</p> CLASS DESCRIPTION <code>TwoMagStirrer</code> <p>A class that wraps the TwoMagDevice class and provides a higher level of abstraction for the 2Mag stirrer.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer","title":"TwoMagStirrer","text":"<pre><code>TwoMagStirrer(\n    port: str,\n    address: str = \"A\",\n    model: str = MTP6,\n    *,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Maker</code></p> <p>2Mag stirrer class</p> ATTRIBUTE DESCRIPTION <code>address</code> <p>The address of the device</p> <p> TYPE: <code>str</code> </p> <code>model</code> <p>The model of the device</p> <p> TYPE: <code>str</code> </p> <code>power</code> <p>Power of device in percentage</p> <p> TYPE: <code>int</code> </p> <code>speed</code> <p>Speed of device in RPM</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>getPower</code> <p>get the power of the device</p> <code>getSpeed</code> <p>get the speed of the device</p> <code>getStatus</code> <p>get the status of the device</p> <code>setDefault</code> <p>set the device to default</p> <code>setPower</code> <p>set the power of the device</p> <code>setSpeed</code> <p>set the speed of the device</p> <code>start</code> <p>start the device</p> <code>stop</code> <p>stop the device</p> <p>Initialize a TwoMagStirrer object</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to which the device is connected</p> <p> TYPE: <code>str</code> </p> <code>address</code> <p>The address of the device. Defaults to 'A'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'A'</code> </p> <code>model</code> <p>The model of the device. Defaults to MIXdrive.MTP6.</p> <p> TYPE: <code>str</code> DEFAULT: <code>MTP6</code> </p> <code>verbose</code> <p>Whether to print out debug information. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>Whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.power","title":"power  <code>property</code>","text":"<pre><code>power: int\n</code></pre> <p>Power of device in percentage</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.speed","title":"speed  <code>property</code>","text":"<pre><code>speed: int\n</code></pre> <p>Speed of device in RPM</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.getPower","title":"getPower","text":"<pre><code>getPower() -&gt; int\n</code></pre> <p>Get the power of the device</p> RETURNS DESCRIPTION <code>int</code> <p>The power of the device in percentage</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.getSpeed","title":"getSpeed","text":"<pre><code>getSpeed() -&gt; int\n</code></pre> <p>Get the speed of the device</p> RETURNS DESCRIPTION <code>int</code> <p>The speed of the device in RPM</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; tuple[str, str]\n</code></pre> <p>Get the status of the device</p> RETURNS DESCRIPTION <code>tuple[str, str]</code> <p>tuple[str,str]: A tuple containing the status of the device</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.setDefault","title":"setDefault","text":"<pre><code>setDefault() -&gt; bool\n</code></pre> <p>Set the device to default</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was set to default</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.setPower","title":"setPower","text":"<pre><code>setPower(power: int) -&gt; int\n</code></pre> <p>Set the power of the device</p> PARAMETER DESCRIPTION <code>power</code> <p>The power to set the device to</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The power of the device in percentage</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.setSpeed","title":"setSpeed","text":"<pre><code>setSpeed(speed: int) -&gt; int\n</code></pre> <p>Set the speed of the device</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed to set the device to</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The speed of the device in RPM</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.start","title":"start","text":"<pre><code>start() -&gt; bool\n</code></pre> <p>Start the device</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was started</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag.html#controllably.Make.Mixture.TwoMag.twomag.TwoMagStirrer.stop","title":"stop","text":"<pre><code>stop() -&gt; bool\n</code></pre> <p>Stop the device</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was stopped</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html","title":"Twomag Api","text":"<p>This module holds the API for the 2Mag device.</p> ATTRIBUTE DESCRIPTION <code>READ_FORMAT</code> <p>The read format for the device</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>The write format for the device</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>The data type for the device</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>TwoMagDevice</code> <p>Class for the 2Mag device</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice","title":"TwoMagDevice","text":"<pre><code>TwoMagDevice(\n    port: str | None = None,\n    baudrate: int = 9600,\n    timeout: int = 1,\n    *,\n    init_timeout: int = 5,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <p>Class for the 2Mag device</p> ATTRIBUTE DESCRIPTION <code>address</code> <p>The address of the device</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>The version of the device</p> <p> TYPE: <code>str</code> </p> <code>mode</code> <p>The mode of the device</p> <p> TYPE: <code>str</code> </p> <code>speed</code> <p>The speed of the device in RPM</p> <p> TYPE: <code>int</code> </p> <code>power</code> <p>The power of the device in percentage</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>getPower</code> <p>get the power of the device</p> <code>getSpeed</code> <p>get the speed of the device</p> <code>getStatus</code> <p>get the status of the device</p> <code>setDefault</code> <p>set the device to default</p> <code>setPower</code> <p>set the power of the device</p> <code>setSpeed</code> <p>set the speed of the device</p> <code>start</code> <p>start the device</p> <code>stop</code> <p>stop the device</p> <p>Initialize the 2Mag device</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to which the device is connected. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>baudrate</code> <p>The baudrate of the device. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>timeout</code> <p>The timeout for the device. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>init_timeout</code> <p>The timeout for initialization. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>data_type</code> <p>The data type for the device. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>The read format for the device. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>The write format for the device. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>Whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>Whether to print out debug information. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.getPower","title":"getPower","text":"<pre><code>getPower() -&gt; int\n</code></pre> <p>Get the power of the device</p> RETURNS DESCRIPTION <code>int</code> <p>The power of the device in percentage</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.getSpeed","title":"getSpeed","text":"<pre><code>getSpeed() -&gt; int\n</code></pre> <p>Get the speed of the device</p> RETURNS DESCRIPTION <code>int</code> <p>The speed of the device in RPM</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; tuple[str, str]\n</code></pre> <p>Get the status of the device</p> RETURNS DESCRIPTION <code>tuple[str, str]</code> <p>tuple[str,str]: The version and mode of the device</p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = False,\n    *,\n    timeout: int | float = 0.3,\n    format_in: str | None = None,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    timestamp: bool = False,\n    **kwargs,\n) -&gt; Any\n</code></pre> <p>Query the device</p> PARAMETER DESCRIPTION <code>data</code> <p>The data to query</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>Whether to return multiple outputs. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>timeout</code> <p>The timeout for the query. Defaults to 0.3.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>0.3</code> </p> <code>format_in</code> <p>The format of the input. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>format_out</code> <p>The format of the output. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>data_type</code> <p>The data type of the output. Defaults to None.</p> <p> TYPE: <code>NamedTuple | None</code> DEFAULT: <code>None</code> </p> <code>timestamp</code> <p>Whether to timestamp the query. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>The output of the query</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.setAddress","title":"setAddress","text":"<pre><code>setAddress(address: str) -&gt; bool\n</code></pre> <p>Set the address of the device</p> PARAMETER DESCRIPTION <code>address</code> <p>The address to set the device to</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the address was set</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.setDefault","title":"setDefault","text":"<pre><code>setDefault() -&gt; bool\n</code></pre> <p>Set the device to default</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was set to default</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.setPower","title":"setPower","text":"<pre><code>setPower(power: int) -&gt; int\n</code></pre> <p>Set the power of the device</p> PARAMETER DESCRIPTION <code>power</code> <p>The power to set the device to in percentage</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The power of the device in percentage</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.setSpeed","title":"setSpeed","text":"<pre><code>setSpeed(speed: int) -&gt; int\n</code></pre> <p>Set the speed of the device</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed to set the device to in RPM</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The speed of the device in RPM</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.start","title":"start","text":"<pre><code>start() -&gt; bool\n</code></pre> <p>Start the device</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was started</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_api.html#controllably.Make.Mixture.TwoMag.twomag_api.twomag_api.TwoMagDevice.stop","title":"stop","text":"<pre><code>stop() -&gt; bool\n</code></pre> <p>Stop the device</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the device was stopped</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/Mixture/TwoMag/twomag_api/twomag_lib.html","title":"Twomag Lib","text":"<p>This module holds the references for QInstruments firmware.</p>"},{"location":"site/api/Make/ThinFilm/spinner.html","title":"Spinner","text":"<p>This module holds the spinner class.</p> CLASS DESCRIPTION <code>Spinner</code> <p>Spinner class</p> <code>Multi_Spinner</code> <p>Ensemble of spinner tools</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner","title":"Spinner","text":"<pre><code>Spinner(\n    port: str,\n    *,\n    baudrate: int = 9600,\n    verbose=False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>TimedDeviceMixin</code>, <code>Maker</code></p> <p>Spinner class</p> ATTRIBUTE DESCRIPTION <code>target_rpm</code> <p>target rpm of the spinner</p> <p> TYPE: <code>int</code> </p> <code>timer_event</code> <p>event for timer</p> <p> TYPE: <code>Event</code> </p> <code>threads</code> <p>threads for the spinner</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>soak</code> <p>soak the spinner</p> <code>spin</code> <p>spin the spinner</p> <code>stop</code> <p>stop the spinner</p> <code>setSpinSpeed</code> <p>set the spin speed</p> <code>setValue</code> <p>set the spin speed</p> <code>execute</code> <p>execute the soak and spin steps</p> <code>shutdown</code> <p>shutdown procedure for the spinner</p> <p>Initialize the spinner</p> PARAMETER DESCRIPTION <code>port</code> <p>port to connect to</p> <p> TYPE: <code>str</code> </p> <code>baudrate</code> <p>baudrate of the connection. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>verbose</code> <p>verbosity of the class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.execute","title":"execute","text":"<pre><code>execute(\n    soak_time: int | float = 0,\n    spin_speed: int = 2000,\n    spin_time: int | float = 1,\n    blocking: bool = True,\n    *args,\n    **kwargs,\n)\n</code></pre> <p>Execute the soak and spin steps</p> PARAMETER DESCRIPTION <code>soak_time</code> <p>soak time. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>spin_speed</code> <p>spin speed. Defaults to 2000.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2000</code> </p> <code>spin_time</code> <p>spin time. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.setSpinSpeed","title":"setSpinSpeed","text":"<pre><code>setSpinSpeed(rpm: int, event: Event | None = None) -&gt; bool\n</code></pre> <p>Set the spin speed in rpm</p> PARAMETER DESCRIPTION <code>rpm</code> <p>spin speed in rpm</p> <p> TYPE: <code>int</code> </p> <code>event</code> <p>event to set. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the command was successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.setValue","title":"setValue","text":"<pre><code>setValue(value: int, event: Event | None = None) -&gt; bool\n</code></pre> <p>Set the spin speed in rpm</p> PARAMETER DESCRIPTION <code>value</code> <p>spin speed in rpm</p> <p> TYPE: <code>int</code> </p> <code>event</code> <p>event to set. Defaults to None.</p> <p> TYPE: <code>Event</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the command was successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.soak","title":"soak","text":"<pre><code>soak(duration: int | float, blocking: bool = True)\n</code></pre> <p>Soak the spinner for a given duration</p> PARAMETER DESCRIPTION <code>duration</code> <p>soak time in seconds</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.spin","title":"spin","text":"<pre><code>spin(\n    rpm: int, duration: int | float, blocking: bool = True\n)\n</code></pre> <p>Spin the spinner at a given speed</p> PARAMETER DESCRIPTION <code>rpm</code> <p>spin speed in rpm</p> <p> TYPE: <code>int</code> </p> <code>duration</code> <p>spin time in seconds</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>whether to block the thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Make/ThinFilm/spinner.html#controllably.Make.ThinFilm.spinner.Spinner.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the spinner</p>"},{"location":"site/api/Make/Vacuum/vacuum_mixin.html","title":"Vacuum Mixin","text":"<p>This module contains the VacuumMixin class.</p> ATTRIBUTE DESCRIPTION <code>VACUUM_ON_DELAY</code> <p>delay for vacuum on</p> <p> TYPE: <code>int</code> </p> <code>VACUUM_OFF_DELAY</code> <p>delay for vacuum off</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>VacuumMixin</code> <p>Mixin class for vacuum control</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Make/Vacuum/vacuum_mixin.html#controllably.Make.Vacuum.vacuum_mixin.VacuumMixin","title":"VacuumMixin","text":"<pre><code>VacuumMixin(*args, **kwargs)\n</code></pre> <p>Mixin class for vacuum control</p> METHOD DESCRIPTION <code>evacuate</code> <p>Evacuate to create vacuum</p> <code>vent</code> <p>Vent to release vacuum</p> <code>toggleVacuum</code> <p>Toggle vacuum</p>"},{"location":"site/api/Make/Vacuum/vacuum_mixin.html#controllably.Make.Vacuum.vacuum_mixin.VacuumMixin.evacuate","title":"evacuate","text":"<pre><code>evacuate(wait: float | None = None)\n</code></pre> <p>Evacuate to create vacuum</p> PARAMETER DESCRIPTION <code>wait</code> <p>Time to wait after evacuating. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Make/Vacuum/vacuum_mixin.html#controllably.Make.Vacuum.vacuum_mixin.VacuumMixin.toggleVacuum","title":"toggleVacuum","text":"<pre><code>toggleVacuum(on: bool)\n</code></pre> <p>Toggle vacuum</p>"},{"location":"site/api/Make/Vacuum/vacuum_mixin.html#controllably.Make.Vacuum.vacuum_mixin.VacuumMixin.vent","title":"vent","text":"<pre><code>vent(wait: float | None = None)\n</code></pre> <p>Vent to release vacuum</p> PARAMETER DESCRIPTION <code>wait</code> <p>Time to wait after venting. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Measure/measure.html","title":"Measure","text":"<p>This module contains the base classes for making measurements with a device.</p> ATTRIBUTE DESCRIPTION <code>MAX_LEN</code> <p>maximum length of data buffer</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>Measurer</code> <p>Base class for maker tools</p> <code>Program</code> <p>Base Program template</p> <code>ProgramDetails</code> <p>ProgramDetails dataclass represents the set of inputs, default values, truncated docstring and tooltip of a program class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer","title":"Measurer","text":"<pre><code>Measurer(*, verbose: bool = False, **kwargs)\n</code></pre> <p>Base class for maker tools.</p> ATTRIBUTE DESCRIPTION <code>buffer</code> <p>data buffer for the device</p> <p> TYPE: <code>deque</code> </p> <code>buffer_df</code> <p>data buffer as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records</code> <p>records for the device</p> <p> TYPE: <code>deque</code> </p> <code>records_df</code> <p>records as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>record_event</code> <p>event for recording data</p> <p> TYPE: <code>Event</code> </p> <code>program</code> <p>program to run</p> <p> TYPE: <code>Program</code> </p> <code>runs</code> <p>dictionary of runs</p> <p> TYPE: <code>dict</code> </p> <code>n_runs</code> <p>number of runs</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <p>Initialize Measurer class</p> PARAMETER DESCRIPTION <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.buffer_df","title":"buffer_df  <code>property</code>","text":"<pre><code>buffer_df: DataFrame\n</code></pre> <p>Data buffer as a DataFrame</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy: bool\n</code></pre> <p>Whether the device is busy</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.records_df","title":"records_df  <code>property</code>","text":"<pre><code>records_df: DataFrame\n</code></pre> <p>Records as a DataFrame</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clear the cache</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.getData","title":"getData","text":"<pre><code>getData(\n    query: Any | None = None, *args, **kwargs\n) -&gt; Any | None\n</code></pre> <p>Get data from the device</p> PARAMETER DESCRIPTION <code>query</code> <p>query to device. Defaults to None.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any | None</code> <p>Any|None: data from device</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.getDataframe","title":"getDataframe","text":"<pre><code>getDataframe(\n    data_store: Iterable[tuple[NamedTuple, datetime]],\n) -&gt; DataFrame\n</code></pre> <p>Get dataframe of data collected</p> PARAMETER DESCRIPTION <code>data_store</code> <p>data store</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: dataframe of data collected</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.loadProgram","title":"loadProgram","text":"<pre><code>loadProgram(\n    program: Program,\n    docstring_parser: Callable[[Any, bool], ProgramDetails]\n    | None = None,\n)\n</code></pre> <p>Load a program to the Measurer</p> PARAMETER DESCRIPTION <code>program</code> <p>program to load</p> <p> TYPE: <code>Program</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.measure","title":"measure","text":"<pre><code>measure(\n    *args,\n    parameters: dict | None = None,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; DataFrame | None\n</code></pre> <p>Run the measurement program</p> <p>args: positional arguments     parameters (dict, optional): dictionary of kwargs. Defaults to None.     blocking (bool, optional): whether to block until completion. Defaults to True.     *kwargs: keyword arguments</p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>pd.DataFrame|None: dataframe of data collected</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.record","title":"record","text":"<pre><code>record(\n    on: bool,\n    show: bool = False,\n    clear_cache: bool = False,\n    *,\n    callback: Callable | None = None,\n    **kwargs,\n)\n</code></pre> <p>Record data from the device</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to record data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to show data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clear_cache</code> <p>whether to clear the cache. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>callback</code> <p>callback function to process data. Defaults to None.</p> <p> TYPE: <code>Callable</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the device and clear cache</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.saveData","title":"saveData","text":"<pre><code>saveData(filepath: str | Path)\n</code></pre> <p>Save data to file</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to save file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Measurer.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    show: bool = False,\n    *,\n    callback: Callable | None = None,\n    **kwargs,\n)\n</code></pre> <p>Stream data from the device</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to stream data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to show data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>callback</code> <p>callback function to process data. Defaults to None.</p> <p> TYPE: <code>Callable</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program","title":"Program","text":"<pre><code>Program(\n    instrument: Measurer | None = None,\n    parameters: dict | None = None,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>Base Program template</p> ATTRIBUTE DESCRIPTION <code>data</code> <p>data collected from device when running the program</p> <p> TYPE: <code>deque</code> </p> <code>instrument</code> <p>Measurer object</p> <p> TYPE: <code>Measurer</code> </p> <code>parameters</code> <p>dictionary of kwargs</p> <p> TYPE: <code>dict</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>data_df</code> <p>dataframe of data collected</p> <p> TYPE: <code>DataFrame</code> </p> METHOD DESCRIPTION <code>getDataframe</code> <p>get dataframe of data collected</p> <code>run</code> <p>measurement program to run</p> <code>saveData</code> <p>save data to file</p> <p>==========</p> <p>Initialize Program class</p> PARAMETER DESCRIPTION <code>instrument</code> <p>Measurer object. Defaults to None.</p> <p> TYPE: <code>Measurer</code> DEFAULT: <code>None</code> </p> <code>parameters</code> <p>dictionary of kwargs. Defaults to None.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program.data_df","title":"data_df  <code>property</code>","text":"<pre><code>data_df: DataFrame\n</code></pre> <p>Data collected from device when running the program</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program.getDataframe","title":"getDataframe","text":"<pre><code>getDataframe(\n    data_store: Iterable[NamedTuple, datetime],\n) -&gt; DataFrame\n</code></pre> <p>Get dataframe of data collected</p> PARAMETER DESCRIPTION <code>data_store</code> <p>data store</p> <p> TYPE: <code>Iterable[NamedTuple, datetime]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: dataframe of data collected</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program.parseDocstring","title":"parseDocstring  <code>staticmethod</code>","text":"<pre><code>parseDocstring(\n    program_class: Program, verbose: bool = False\n) -&gt; ProgramDetails\n</code></pre> <p>Get the input fields and defaults</p> PARAMETER DESCRIPTION <code>program_class</code> <p>program class of interest</p> <p> TYPE: <code>Callable</code> </p> <code>verbose</code> <p>whether to print out truncated docstring. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>ProgramDetails</code> <p>details of program class</p> <p> TYPE: <code>ProgramDetails</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program.run","title":"run","text":"<pre><code>run(*args, **kwargs) -&gt; DataFrame\n</code></pre> <p>Measurement program to run</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: Dataframe of data collected</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.Program.saveData","title":"saveData","text":"<pre><code>saveData(filepath: str | Path)\n</code></pre> <p>Save data to file</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to save file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.ProgramDetails","title":"ProgramDetails  <code>dataclass</code>","text":"<pre><code>ProgramDetails(\n    signature: Signature,\n    description: str = \"\",\n    parameter_descriptions: dict[str, str] = dict(),\n    return_descriptions: dict[tuple[str], str] = dict(),\n)\n</code></pre> <p>ProgramDetails dataclass represents the set of inputs, default values, truncated docstring and tooltip of a program class</p>"},{"location":"site/api/Measure/measure.html#controllably.Measure.measure.ProgramDetails--constructor","title":"Constructor:","text":"<pre><code>inputs (list[str]): list of input field names\ndefaults (dict[str, Any]): dictionary of kwargs and default values\nshort_doc (str): truncated docstring of the program\ntooltip (str): descriptions of input fields\n</code></pre>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html","title":"Sentron","text":"<p>This module provides a class for the Sentron pH meter.</p> ATTRIBUTE DESCRIPTION <code>MAX_LEN</code> <p>Maximum length of the data buffer</p> <p> TYPE: <code>int</code> </p> <code>READ_FORMAT</code> <p>Format for reading data</p> <p> TYPE: <code>str</code> </p> <code>pHData</code> <p>NamedTuple for pH data</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>SI600</code> <p>Sentron pH meter class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600","title":"SI600","text":"<pre><code>SI600(\n    port: str,\n    stabilize_timeout: float = 10,\n    pH_tolerance: float = 1.5,\n    temp_tolerance: float = 1.5,\n    *,\n    baudrate: int = 9600,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Measurer</code></p> <p>Sentron pH meter</p> ATTRIBUTE DESCRIPTION <code>pH_tolerance</code> <p>Tolerance for pH</p> <p> TYPE: <code>float</code> </p> <code>temp_tolerance</code> <p>Tolerance for temperature</p> <p> TYPE: <code>float</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> </p> <code>buffer</code> <p>data buffer for the device</p> <p> TYPE: <code>deque</code> </p> <code>buffer_df</code> <p>data buffer as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records</code> <p>records for the device</p> <p> TYPE: <code>deque</code> </p> <code>records_df</code> <p>records as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>record_event</code> <p>event for recording data</p> <p> TYPE: <code>Event</code> </p> <code>program</code> <p>program to run</p> <p> TYPE: <code>Program</code> </p> <code>runs</code> <p>dictionary of runs</p> <p> TYPE: <code>dict</code> </p> <code>n_runs</code> <p>number of runs</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>getData</code> <p>Get pH and temperature data</p> <code>atPH</code> <p>Check if the device is at the target pH</p> <code>atTemperature</code> <p>Check if the device is at the target temperature</p> <code>getPH</code> <p>Get pH</p> <code>getTemperature</code> <p>Get temperature</p> <code>record</code> <p>Record data</p> <code>stream</code> <p>Stream data</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for the device</p> <p>Initialize the Sentron pH meter</p> PARAMETER DESCRIPTION <code>port</code> <p>Serial port</p> <p> TYPE: <code>str</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>pH_tolerance</code> <p>Tolerance for pH</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.5</code> </p> <code>temp_tolerance</code> <p>Tolerance for temperature</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.5</code> </p> <code>baudrate</code> <p>Baudrate for serial communication</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>verbose</code> <p>Print verbose output</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600.atPH","title":"atPH","text":"<pre><code>atPH(\n    pH: float,\n    *,\n    tolerance: float | None = None,\n    stabilize_timeout: float = 0,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target pH</p> PARAMETER DESCRIPTION <code>pH</code> <p>Target pH</p> <p> TYPE: <code>float</code> </p> <code>tolerance</code> <p>Tolerance for pH</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target pH</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600.atTemperature","title":"atTemperature","text":"<pre><code>atTemperature(\n    temperature: float,\n    *,\n    tolerance: float | None = None,\n    stabilize_timeout: float = 0,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target temperature</p> PARAMETER DESCRIPTION <code>temperature</code> <p>Target temperature</p> <p> TYPE: <code>float</code> </p> <code>tolerance</code> <p>Tolerance for temperature</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target temperature</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600.getData","title":"getData","text":"<pre><code>getData(*args, **kwargs) -&gt; pHData | None\n</code></pre> <p>Get pH and temperature data</p> RETURNS DESCRIPTION <code>pHData</code> <p>pH and temperature data</p> <p> TYPE: <code>pHData | None</code> </p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600.getPH","title":"getPH","text":"<pre><code>getPH() -&gt; float | None\n</code></pre> <p>Get pH</p> RETURNS DESCRIPTION <code>float</code> <p>pH</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Chemical/Sentron/sentron.html#controllably.Measure.Chemical.Sentron.sentron.SI600.getTemperature","title":"getTemperature","text":"<pre><code>getTemperature() -&gt; float | None\n</code></pre> <p>Get temperature</p> RETURNS DESCRIPTION <code>float</code> <p>temperature</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html","title":"Biologic","text":""},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic","title":"BioLogic","text":"<pre><code>BioLogic(\n    host: str = \"192.109.209.128\",\n    timeout: int = 5,\n    populate_info: bool = True,\n    *,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Measurer</code></p> <p>Initialize Measurer class</p> PARAMETER DESCRIPTION <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.host","title":"host  <code>property</code> <code>writable</code>","text":"<pre><code>host: str\n</code></pre> <p>BioLogicDevice address</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout: int\n</code></pre> <p>Device timeout</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clear the cache</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.getDataframe","title":"getDataframe","text":"<pre><code>getDataframe(\n    data_store: Iterable[tuple[NamedTuple, datetime]],\n) -&gt; DataFrame\n</code></pre> <p>Get dataframe of data collected</p> PARAMETER DESCRIPTION <code>data_store</code> <p>data store</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: dataframe of data collected</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.loadProgram","title":"loadProgram","text":"<pre><code>loadProgram(\n    program: BiologicProgram,\n    docstring_parser: Callable[[Any, bool], ProgramDetails]\n    | None = None,\n)\n</code></pre> <p>Load a program to the Measurer</p> PARAMETER DESCRIPTION <code>program</code> <p>program to load</p> <p> TYPE: <code>BiologicProgram</code> </p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.measure","title":"measure","text":"<pre><code>measure(\n    *args,\n    parameters: dict | None = None,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; DataFrame | None\n</code></pre> <p>Run the measurement program</p> <p>args: positional arguments     parameters (dict, optional): dictionary of kwargs. Defaults to None.     blocking (bool, optional): whether to block until completion. Defaults to True.     *kwargs: keyword arguments</p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>pd.DataFrame|None: dataframe of data collected</p>"},{"location":"site/api/Measure/Electrical/BioLogic/biologic.html#controllably.Measure.Electrical.BioLogic.biologic.BioLogic.saveData","title":"saveData","text":"<pre><code>saveData(filepath: str | Path)\n</code></pre> <p>Save data to file</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to save file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html","title":"Keithley","text":""},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley","title":"Keithley","text":"<pre><code>Keithley(\n    keithley_class: str,\n    host: str | None = None,\n    name: str | None = None,\n    *,\n    adapter: str | None = None,\n    read_termination: str = \"\\n\",\n    write_termination: str = \"\\n\",\n    timeout: int = 2000,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Measurer</code></p> <p>Initialize Measurer class</p> PARAMETER DESCRIPTION <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.host","title":"host  <code>property</code> <code>writable</code>","text":"<pre><code>host: str\n</code></pre> <p>BioLogicDevice address</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Device name</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clear the cache</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.getDataframe","title":"getDataframe","text":"<pre><code>getDataframe(\n    data_store: Iterable[tuple[NamedTuple, datetime]],\n) -&gt; DataFrame\n</code></pre> <p>Get dataframe of data collected</p> PARAMETER DESCRIPTION <code>data_store</code> <p>data store</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: dataframe of data collected</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.measure","title":"measure","text":"<pre><code>measure(\n    *args,\n    parameters: dict | None = None,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; DataFrame | None\n</code></pre> <p>Run the measurement program</p> <p>args: positional arguments     parameters (dict, optional): dictionary of kwargs. Defaults to None.     blocking (bool, optional): whether to block until completion. Defaults to True.     *kwargs: keyword arguments</p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>pd.DataFrame|None: dataframe of data collected</p>"},{"location":"site/api/Measure/Electrical/Keithley/keithley.html#controllably.Measure.Electrical.Keithley.keithley.Keithley.saveData","title":"saveData","text":"<pre><code>saveData(filepath: str | Path)\n</code></pre> <p>Save data to file</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to save file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"site/api/Measure/Electrical/Keithley/programs/base_programs.html","title":"Base Programs","text":""},{"location":"site/api/Measure/Electrical/Keithley/programs/base_programs.html#controllably.Measure.Electrical.Keithley.programs.base_programs.FourTerminalSensing","title":"FourTerminalSensing","text":"<pre><code>FourTerminalSensing(device: Keithley2450, **kwargs)\n</code></pre> <p>               Bases: <code>Program</code></p> <p>Base class for four-terminal sensing programs. This class provides a template for implementing four-terminal sensing measurements.</p>"},{"location":"site/api/Measure/Electrical/Keithley/programs/base_programs.html#controllably.Measure.Electrical.Keithley.programs.base_programs.FourTerminalSensing.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the four-terminal sensing measurement. Override this method in subclasses to implement specific measurement logic.</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html","title":"Force Actuator","text":""},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.COLUMNS","title":"COLUMNS  <code>module-attribute</code>","text":"<pre><code>COLUMNS = (\n    \"Time\",\n    \"Displacement\",\n    \"Value\",\n    \"Factor\",\n    \"Baseline\",\n    \"Force\",\n)\n</code></pre> <p>Headers for output data from force sensor</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.G","title":"G  <code>module-attribute</code>","text":"<pre><code>G = 9.81\n</code></pre> <p>Acceleration due to Earth's gravity</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator","title":"ForceActuator","text":"<pre><code>ForceActuator(\n    port: str,\n    limits: Iterable[float] = (-30.0, 0),\n    force_threshold: float = 10000,\n    stabilize_timeout: float = 1,\n    force_tolerance: float = 0.01,\n    *,\n    home_displacement: float = -1.0,\n    max_speed: float = MAX_SPEED,\n    steps_per_second: int = 6400,\n    calibration_factor: float = 1.0,\n    correction_parameters: tuple[float] = (1.0, 0.0),\n    touch_force_threshold: float = 2 * G,\n    touch_timeout: int = 300,\n    from_top: bool = True,\n    baudrate: int = 115200,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>ForceSensor provides methods to read out values from a force sensor</p> ATTRIBUTE DESCRIPTION <code>baseline</code> <p>baseline readout at which zero newtons is set</p> <p> TYPE: <code>float</code> </p> <code>calibration_factor</code> <p>calibration factor of device readout to newtons</p> <p> TYPE: <code>float</code> </p> <code>displacement</code> <p>machine displacement</p> <p> TYPE: <code>float</code> </p> <code>end_stop</code> <p>whether the end stop is triggered</p> <p> TYPE: <code>bool</code> </p> <code>home_displacement</code> <p>starting displacement of home position</p> <p> TYPE: <code>float</code> </p> <code>precision</code> <p>number of decimal places to print force value</p> <p> TYPE: <code>int</code> </p> <code>threshold</code> <p>force threshold to stop movement</p> <p> TYPE: <code>float</code> </p> <code>force</code> <p>force experienced</p> <p> TYPE: <code>float</code> </p> <code>limits</code> <p>lower and upper limits of movement</p> <p> TYPE: <code>ndarray</code> </p> METHOD DESCRIPTION <code>clearCache</code> <p>clear most recent data and configurations</p> <code>disconnect</code> <p>disconnect from device</p> <code>getForce</code> <p>get the force response</p> <code>home</code> <p>home the actuator</p> <code>isFeasible</code> <p>checks and returns whether the target displacement is feasible</p> <code>measure</code> <p>measure the stress-strain response of sample</p> <code>move</code> <p>move the actuator by desired distance. Alias of moveBy() method</p> <code>moveBy</code> <p>move the actuator by desired distance</p> <code>moveTo</code> <p>move the actuator to desired displacement</p> <code>reset</code> <p>reset the device</p> <code>setThreshold</code> <p>set the force threshold for the machine</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>tare</code> <p>alias for zero()</p> <code>stream</code> <p>start or stop feedback loop</p> <code>record</code> <p>start or stop data recording</p> <code>touch</code> <p>touch the sample</p> <code>waitThreshold</code> <p>wait for force sensor to reach the force threshold</p> <code>zero</code> <p>set the current reading as baseline (i.e. zero force)</p> <p>Initialize the actuated sensor</p> PARAMETER DESCRIPTION <code>port</code> <p>Serial port</p> <p> TYPE: <code>str</code> </p> <code>limits</code> <p>Lower and upper limits for the actuator</p> <p> TYPE: <code>Iterable[float]</code> DEFAULT: <code>(-30.0, 0)</code> </p> <code>force_threshold</code> <p>Force threshold</p> <p> TYPE: <code>float</code> DEFAULT: <code>10000</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>force_tolerance</code> <p>Tolerance for</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>home_displacement</code> <p>Home position</p> <p> TYPE: <code>float</code> DEFAULT: <code>-1.0</code> </p> <code>max_speed</code> <p>Maximum speed</p> <p> TYPE: <code>float</code> DEFAULT: <code>MAX_SPEED</code> </p> <code>steps_per_second</code> <p>Steps per second</p> <p> TYPE: <code>int</code> DEFAULT: <code>6400</code> </p> <code>calibration_factor</code> <p>Calibration factor</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>correction_parameters</code> <p>Polynomial correction parameters</p> <p> TYPE: <code>tuple[float]</code> DEFAULT: <code>(1.0, 0.0)</code> </p> <code>baudrate</code> <p>Baudrate for serial communication</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>verbose</code> <p>Print verbose output</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy: bool\n</code></pre> <p>Whether the device is busy</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.records_df","title":"records_df  <code>property</code>","text":"<pre><code>records_df: DataFrame\n</code></pre> <p>DataFrame of records</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.atDisplacement","title":"atDisplacement","text":"<pre><code>atDisplacement(\n    displacement: float,\n    current_displacement: float | None = None,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target displacement</p> PARAMETER DESCRIPTION <code>displacement</code> <p>Target displacement</p> <p> TYPE: <code>float</code> </p> <code>current_displacement</code> <p>Current displacement. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target displacement</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.atForce","title":"atForce","text":"<pre><code>atForce(\n    force: float,\n    current_force: float | None = None,\n    *,\n    tolerance: float | None = None,\n    stabilize_timeout: float = 0,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target force</p> PARAMETER DESCRIPTION <code>force</code> <p>Target force</p> <p> TYPE: <code>float</code> </p> <code>current_force</code> <p>Current force</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>tolerance</code> <p>Tolerance for force</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target force</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.clearCache","title":"clearCache","text":"<pre><code>clearCache()\n</code></pre> <p>Clear most recent data and configurations</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Establish connection with device</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from device</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getAttributes","title":"getAttributes","text":"<pre><code>getAttributes() -&gt; dict\n</code></pre> <p>Get attributes</p> RETURNS DESCRIPTION <code>dict</code> <p>Attributes</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getData","title":"getData","text":"<pre><code>getData(*args, **kwargs) -&gt; MoveForceData | None\n</code></pre> <p>Get data from device</p> RETURNS DESCRIPTION <code>MoveForceData</code> <p>Data from device</p> <p> TYPE: <code>MoveForceData | None</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getDataframe","title":"getDataframe","text":"<pre><code>getDataframe(\n    data_store: Iterable[tuple[NamedTuple, datetime]],\n) -&gt; DataFrame\n</code></pre> <p>Get dataframe of data collected</p> PARAMETER DESCRIPTION <code>data_store</code> <p>data store</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: dataframe of data collected</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getDisplacement","title":"getDisplacement","text":"<pre><code>getDisplacement() -&gt; float | None\n</code></pre> <p>Get displacement</p> RETURNS DESCRIPTION <code>float</code> <p>Displacement in mm</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getForce","title":"getForce","text":"<pre><code>getForce() -&gt; float | None\n</code></pre> <p>Get the force response and displacement of actuator</p> RETURNS DESCRIPTION <code>str</code> <p>device response</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.getValue","title":"getValue","text":"<pre><code>getValue() -&gt; float | None\n</code></pre> <p>Get the value readout from device</p> RETURNS DESCRIPTION <code>float | None</code> <p>float|None: Value readout</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.home","title":"home","text":"<pre><code>home() -&gt; bool\n</code></pre> <p>Home the actuator</p> RETURNS DESCRIPTION <code>bool</code> <p>whether homing is a success</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.loadProgram","title":"loadProgram","text":"<pre><code>loadProgram(\n    program: Program,\n    docstring_parser: Callable[[Any, bool], ProgramDetails]\n    | None = None,\n)\n</code></pre> <p>Load a program to the Measurer</p> PARAMETER DESCRIPTION <code>program</code> <p>program to load</p> <p> TYPE: <code>Program</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.measure","title":"measure","text":"<pre><code>measure(\n    *args,\n    parameters: dict | None = None,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; DataFrame | None\n</code></pre> <p>Run the measurement program</p> <p>args: positional arguments     parameters (dict, optional): dictionary of kwargs. Defaults to None.     blocking (bool, optional): whether to block until completion. Defaults to True.     *kwargs: keyword arguments</p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>pd.DataFrame|None: dataframe of data collected</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.move","title":"move","text":"<pre><code>move(by: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator to the target displacement and apply the target force</p> PARAMETER DESCRIPTION <code>by</code> <p>distance in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.moveBy","title":"moveBy","text":"<pre><code>moveBy(by: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator by desired distance</p> PARAMETER DESCRIPTION <code>by</code> <p>distance in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.moveTo","title":"moveTo","text":"<pre><code>moveTo(to: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator to desired displacement</p> PARAMETER DESCRIPTION <code>to</code> <p>displacement in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.record","title":"record","text":"<pre><code>record(\n    on: bool, show: bool = False, clear_cache: bool = False\n)\n</code></pre> <p>Start or stop data recording</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start recording data</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the device</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.saveData","title":"saveData","text":"<pre><code>saveData(filepath: str | Path)\n</code></pre> <p>Save data to file</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to save file</p> <p> TYPE: <code>str | Path</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.stream","title":"stream","text":"<pre><code>stream(on: bool, show: bool = False)\n</code></pre> <p>Start or stop feedback loop</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start loop to continuously read from device</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.touch","title":"touch","text":"<pre><code>touch(\n    force_threshold: float = 0.1,\n    displacement_threshold: float | None = None,\n    speed: float | None = None,\n    from_top: bool = True,\n    record: bool = False,\n    timeout: int = None,\n) -&gt; bool\n</code></pre> <p>Apply the target force</p> PARAMETER DESCRIPTION <code>force_threshold</code> <p>target force. Defaults to 0.1.</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p> <code>displacement_threshold</code> <p>target displacement. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed</code> <p>movement speed. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>from_top</code> <p>whether compression direction is towards negative displacement. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>record</code> <p>whether to record data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful (i.e. force threshold is not reached)</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.waitThreshold","title":"waitThreshold","text":"<pre><code>waitThreshold(\n    displacement: float, timeout: float | None = None\n) -&gt; float\n</code></pre> <p>Wait for force sensor to reach the threshold</p> PARAMETER DESCRIPTION <code>displacement</code> <p>target displacement</p> <p> TYPE: <code>float</code> </p> <code>timeout</code> <p>timeout duration in seconds. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>float</code> <p>actual displacement upon reaching threshold</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Measure/Mechanical/_force_actuator.html#controllably.Measure.Mechanical._force_actuator.ForceActuator.zero","title":"zero","text":"<pre><code>zero(timeout: int = 5)\n</code></pre> <p>Set current reading as baseline (i.e. zero force)</p> PARAMETER DESCRIPTION <code>timeout</code> <p>duration to wait while zeroing, in seconds. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html","title":"Actuated Sensor","text":"<p>This module provides a class for the actuated sensor.</p> ATTRIBUTE DESCRIPTION <code>MAX_SPEED</code> <p>Maximum speed</p> <p> TYPE: <code>float</code> </p> <code>READ_FORMAT</code> <p>Format for reading data</p> <p> TYPE: <code>str</code> </p> <code>MoveForceData</code> <p>NamedTuple for move force data</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>ActuatedSensor</code> <p>Actuated sensor class</p> <code>ForceDisplacement</code> <p>Stress-Strain program</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor","title":"ActuatedSensor","text":"<pre><code>ActuatedSensor(\n    port: str,\n    limits: Iterable[float] = (-30.0, 0),\n    force_threshold: float = 10000,\n    stabilize_timeout: float = 1,\n    force_tolerance: float = 0.01,\n    *,\n    home_displacement: float = -1.0,\n    max_speed: float = MAX_SPEED,\n    steps_per_second: int = 6400,\n    calibration_factor: float = 1.0,\n    correction_parameters: tuple[float] = (1.0, 0.0),\n    baudrate: int = 115200,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>LoadCell</code></p> <p>Actuated sensor class</p> ATTRIBUTE DESCRIPTION <code>force_threshold</code> <p>Force threshold</p> <p> TYPE: <code>float</code> </p> <code>home_displacement</code> <p>Home position</p> <p> TYPE: <code>float</code> </p> <code>limits</code> <p>Lower and upper limits for the actuator</p> <p> TYPE: <code>Tuple[float]</code> </p> <code>max_speed</code> <p>Maximum speed</p> <p> TYPE: <code>float</code> </p> <code>program</code> <p>program to run</p> <p> TYPE: <code>Program</code> </p> <code>displacement</code> <p>current displacement</p> <p> TYPE: <code>float</code> </p> <code>baseline</code> <p>Baseline value</p> <p> TYPE: <code>int</code> </p> <code>buffer</code> <p>data buffer for the device</p> <p> TYPE: <code>deque</code> </p> <code>buffer_df</code> <p>data buffer as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records</code> <p>records for the device</p> <p> TYPE: <code>deque</code> </p> <code>records_df</code> <p>records as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>record_event</code> <p>event for recording data</p> <p> TYPE: <code>Event</code> </p> <code>runs</code> <p>dictionary of runs</p> <p> TYPE: <code>dict</code> </p> <code>n_runs</code> <p>number of runs</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the device</p> <code>getData</code> <p>Get data from device</p> <code>getDataframe</code> <p>Get data as a DataFrame</p> <code>atDisplacement</code> <p>Check if the device is at the target displacement</p> <code>getDisplacement</code> <p>Get displacement</p> <code>zero</code> <p>Set current reading as baseline</p> <code>home</code> <p>Move the actuator to the home position</p> <code>move</code> <p>Move the actuator to the target displacement and apply the target force</p> <code>moveBy</code> <p>Move the actuator by desired distance</p> <code>moveTo</code> <p>Move the actuator to desired displacement</p> <code>touch</code> <p>Apply the target force</p> <code>run</code> <p>Run the program</p> <p>Initialize the actuated sensor</p> PARAMETER DESCRIPTION <code>port</code> <p>Serial port</p> <p> TYPE: <code>str</code> </p> <code>limits</code> <p>Lower and upper limits for the actuator</p> <p> TYPE: <code>Iterable[float]</code> DEFAULT: <code>(-30.0, 0)</code> </p> <code>force_threshold</code> <p>Force threshold</p> <p> TYPE: <code>float</code> DEFAULT: <code>10000</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>force_tolerance</code> <p>Tolerance for</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>home_displacement</code> <p>Home position</p> <p> TYPE: <code>float</code> DEFAULT: <code>-1.0</code> </p> <code>max_speed</code> <p>Maximum speed</p> <p> TYPE: <code>float</code> DEFAULT: <code>MAX_SPEED</code> </p> <code>steps_per_second</code> <p>Steps per second</p> <p> TYPE: <code>int</code> DEFAULT: <code>6400</code> </p> <code>calibration_factor</code> <p>Calibration factor</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>correction_parameters</code> <p>Polynomial correction parameters</p> <p> TYPE: <code>tuple[float]</code> DEFAULT: <code>(1.0, 0.0)</code> </p> <code>baudrate</code> <p>Baudrate for serial communication</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>verbose</code> <p>Print verbose output</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.atDisplacement","title":"atDisplacement","text":"<pre><code>atDisplacement(\n    displacement: float,\n    current_displacement: float | None = None,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target displacement</p> PARAMETER DESCRIPTION <code>displacement</code> <p>Target displacement</p> <p> TYPE: <code>float</code> </p> <code>current_displacement</code> <p>Current displacement. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target displacement</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.getData","title":"getData","text":"<pre><code>getData(*args, **kwargs) -&gt; MoveForceData | None\n</code></pre> <p>Get data from device</p> RETURNS DESCRIPTION <code>MoveForceData</code> <p>displacement, value, end_stop</p> <p> TYPE: <code>MoveForceData | None</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.getDisplacement","title":"getDisplacement","text":"<pre><code>getDisplacement() -&gt; float | None\n</code></pre> <p>Get displacement</p> RETURNS DESCRIPTION <code>float</code> <p>Displacement in mm</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.home","title":"home","text":"<pre><code>home() -&gt; bool\n</code></pre> <p>Move the actuator to the home position</p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.move","title":"move","text":"<pre><code>move(by: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator to the target displacement and apply the target force</p> PARAMETER DESCRIPTION <code>by</code> <p>distance in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.moveBy","title":"moveBy","text":"<pre><code>moveBy(by: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator by desired distance</p> PARAMETER DESCRIPTION <code>by</code> <p>distance in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.moveTo","title":"moveTo","text":"<pre><code>moveTo(to: float, speed: float | None = None) -&gt; bool\n</code></pre> <p>Move the actuator to desired displacement</p> PARAMETER DESCRIPTION <code>to</code> <p>displacement in mm</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>movement speed. Defaults to 0.375.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.record","title":"record","text":"<pre><code>record(\n    on: bool,\n    show: bool = False,\n    clear_cache: bool = False,\n    *,\n    callback: Callable | None = None,\n    **kwargs,\n)\n</code></pre> <p>Record data from the device</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to record data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to show data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clear_cache</code> <p>whether to clear the cache. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>callback</code> <p>callback function to process data. Defaults to None.</p> <p> TYPE: <code>Callable | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    show: bool = False,\n    *,\n    callback: Callable | None = None,\n    **kwargs,\n)\n</code></pre> <p>Stream data from the device</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to stream data</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>whether to show data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>callback</code> <p>callback function to process data. Defaults to None.</p> <p> TYPE: <code>Callable | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.touch","title":"touch","text":"<pre><code>touch(\n    force_threshold: float = 0.1,\n    displacement_threshold: float | None = None,\n    speed: float | None = None,\n    from_top: bool = True,\n) -&gt; bool\n</code></pre> <p>Apply the target force</p> PARAMETER DESCRIPTION <code>force_threshold</code> <p>target force</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p> <code>displacement_threshold</code> <p>target displacement</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed</code> <p>movement speed</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>from_top</code> <p>whether to move from the top or bottom</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful (i.e. force threshold is not reached)</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ActuatedSensor.zero","title":"zero","text":"<pre><code>zero(wait: float = 5.0)\n</code></pre> <p>Set current reading as baseline</p> PARAMETER DESCRIPTION <code>wait</code> <p>Time to wait for the device to stabilize. Defaults to 5.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>5.0</code> </p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ForceDisplacement","title":"ForceDisplacement","text":"<pre><code>ForceDisplacement(\n    instrument: ActuatedSensor | None = None,\n    parameters: dict | None = None,\n    verbose: bool = False,\n)\n</code></pre> <p>               Bases: <code>Program</code></p> <p>Stress-Strain program</p>"},{"location":"site/api/Measure/Mechanical/actuated_sensor.html#controllably.Measure.Mechanical.actuated_sensor.ForceDisplacement.run","title":"run","text":"<pre><code>run(\n    force_threshold: float = 10,\n    displacement_threshold: float = -20,\n    speed: float | None = None,\n    stepped: bool = False,\n    *,\n    step_size: float = 0.1,\n    step_interval: float = -5,\n    pullback: float = 0,\n    clear_cache: bool = True,\n) -&gt; DataFrame\n</code></pre> <p>Run the program</p> PARAMETER DESCRIPTION <code>force_threshold</code> <p>Force threshold</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>displacement_threshold</code> <p>Displacement threshold</p> <p> TYPE: <code>float</code> DEFAULT: <code>-20</code> </p> <code>speed</code> <p>Movement speed</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stepped</code> <p>Stepped movement</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>step_size</code> <p>Step size</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.1</code> </p> <code>step_interval</code> <p>Step interval</p> <p> TYPE: <code>float</code> DEFAULT: <code>-5</code> </p> <code>pullback</code> <p>Pullback distance</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> <code>clear_cache</code> <p>Clear data cache</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: Data as a DataFrame</p>"},{"location":"site/api/Measure/Mechanical/load_cell.html","title":"Load Cell","text":"<p>This module provides a class for the load cell.</p> ATTRIBUTE DESCRIPTION <code>READ_FORMAT</code> <p>Format for reading data</p> <p> TYPE: <code>str</code> </p> <code>ValueData</code> <p>NamedTuple for value data</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>LoadCell</code> <p>Load cell class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.G","title":"G  <code>module-attribute</code>","text":"<pre><code>G = 9.81\n</code></pre> <p>Acceleration due to Earth's gravity</p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell","title":"LoadCell","text":"<pre><code>LoadCell(\n    port: str,\n    stabilize_timeout: float = 1,\n    force_tolerance: float = 0.01,\n    *,\n    calibration_factor: float = 1.0,\n    correction_parameters: tuple[float] = (1.0, 0.0),\n    baudrate: int = 115200,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Measurer</code></p> <p>Load cell</p> ATTRIBUTE DESCRIPTION <code>force_tolerance</code> <p>Tolerance for force</p> <p> TYPE: <code>float</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> </p> <code>baseline</code> <p>Baseline value</p> <p> TYPE: <code>int</code> </p> <code>calibration_factor</code> <p>counts per unit force</p> <p> TYPE: <code>float</code> </p> <code>correction_parameters</code> <p>polynomial correction parameters, starting with highest order</p> <p> TYPE: <code>tuple[float]</code> </p> <code>buffer</code> <p>data buffer for the device</p> <p> TYPE: <code>deque</code> </p> <code>buffer_df</code> <p>data buffer as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records</code> <p>records for the device</p> <p> TYPE: <code>deque</code> </p> <code>records_df</code> <p>records as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>record_event</code> <p>event for recording data</p> <p> TYPE: <code>Event</code> </p> <code>program</code> <p>program to run</p> <p> TYPE: <code>Program</code> </p> <code>runs</code> <p>dictionary of runs</p> <p> TYPE: <code>dict</code> </p> <code>n_runs</code> <p>number of runs</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the device</p> <code>getAttributes</code> <p>Get attributes</p> <code>getData</code> <p>Get data from device</p> <code>getDataframe</code> <p>Get data as a DataFrame</p> <code>atForce</code> <p>Check if the device is at the target force</p> <code>getForce</code> <p>Get force</p> <code>getValue</code> <p>Get value</p> <code>reset</code> <p>Reset the device</p> <code>zero</code> <p>Set current reading as baseline</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <p>Initialize the LoadCell class</p> PARAMETER DESCRIPTION <code>port</code> <p>Serial port</p> <p> TYPE: <code>str</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>1</code> </p> <code>force_tolerance</code> <p>Tolerance for force</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.01</code> </p> <code>calibration_factor</code> <p>counts per unit force</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>correction_parameters</code> <p>polynomial correction parameters, starting with highest order</p> <p> TYPE: <code>tuple[float]</code> DEFAULT: <code>(1.0, 0.0)</code> </p> <code>baudrate</code> <p>Baudrate for serial communication</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>verbose</code> <p>Print verbose output</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.atForce","title":"atForce","text":"<pre><code>atForce(\n    force: float,\n    current_force: float | None = None,\n    *,\n    tolerance: float | None = None,\n    stabilize_timeout: float = 0,\n) -&gt; bool\n</code></pre> <p>Check if the device is at the target temperature</p> PARAMETER DESCRIPTION <code>force</code> <p>Target force</p> <p> TYPE: <code>float</code> </p> <code>tolerance</code> <p>Tolerance for force</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the device is at the target force</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.getAttributes","title":"getAttributes","text":"<pre><code>getAttributes() -&gt; dict\n</code></pre> <p>Get attributes</p> RETURNS DESCRIPTION <code>dict</code> <p>Attributes</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.getData","title":"getData","text":"<pre><code>getData(*args, **kwargs) -&gt; ValueData | None\n</code></pre> <p>Get data from device</p> RETURNS DESCRIPTION <code>ValueData</code> <p>Value data</p> <p> TYPE: <code>ValueData | None</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.getForce","title":"getForce","text":"<pre><code>getForce() -&gt; float | None\n</code></pre> <p>Get force</p> RETURNS DESCRIPTION <code>float</code> <p>Force</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.getValue","title":"getValue","text":"<pre><code>getValue() -&gt; float | None\n</code></pre> <p>Get value</p> RETURNS DESCRIPTION <code>float</code> <p>Value</p> <p> TYPE: <code>float | None</code> </p>"},{"location":"site/api/Measure/Mechanical/load_cell.html#controllably.Measure.Mechanical.load_cell.LoadCell.zero","title":"zero","text":"<pre><code>zero(timeout: int = 5)\n</code></pre> <p>Set current reading as baseline</p> PARAMETER DESCRIPTION <code>timeout</code> <p>Time to wait for the device to stabilize. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p>"},{"location":"site/api/Measure/Physical/balance.html","title":"Balance","text":"<p>This module provides a class for the balance.</p> ATTRIBUTE DESCRIPTION <code>G</code> <p>Acceleration due to gravity</p> <p> TYPE: <code>float</code> </p> CLASS DESCRIPTION <code>Balance</code> <p>Balance class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Measure/Physical/balance.html#controllably.Measure.Physical.balance.Balance","title":"Balance","text":"<pre><code>Balance(\n    port: str,\n    stabilize_timeout: float = 10,\n    force_tolerance: float = 1.5,\n    mass_tolerance: float = 0.15,\n    *,\n    calibration_factor: float = 1.0,\n    correction_parameters: tuple[float] = (1.0, 0.0),\n    baudrate: int = 115200,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>LoadCell</code></p> <p>Balance class for interfacing with a balance.</p> ATTRIBUTE DESCRIPTION <code>mass_tolerance</code> <p>The tolerance for the mass measurement.</p> <p> TYPE: <code>float</code> </p> <code>force_tolerance</code> <p>Tolerance for force</p> <p> TYPE: <code>float</code> </p> <code>stabilize_timeout</code> <p>Time to wait for the device to stabilize</p> <p> TYPE: <code>float</code> </p> <code>baseline</code> <p>Baseline value</p> <p> TYPE: <code>int</code> </p> <code>calibration_factor</code> <p>counts per unit force</p> <p> TYPE: <code>float</code> </p> <code>correction_parameters</code> <p>polynomial correction parameters, starting with highest order</p> <p> TYPE: <code>tuple[float]</code> </p> <code>buffer</code> <p>data buffer for the device</p> <p> TYPE: <code>deque</code> </p> <code>buffer_df</code> <p>data buffer as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>records</code> <p>records for the device</p> <p> TYPE: <code>deque</code> </p> <code>records_df</code> <p>records as a DataFrame</p> <p> TYPE: <code>DataFrame</code> </p> <code>record_event</code> <p>event for recording data</p> <p> TYPE: <code>Event</code> </p> <code>program</code> <p>program to run</p> <p> TYPE: <code>Program</code> </p> <code>runs</code> <p>dictionary of runs</p> <p> TYPE: <code>dict</code> </p> <code>n_runs</code> <p>number of runs</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the device</p> <code>getDataframe</code> <p>Get a DataFrame from the data store</p> <code>atMass</code> <p>Check if the balance is at a specific mass</p> <code>getMass</code> <p>Get the mass measured by the balance</p> <code>tare</code> <p>Tare the balance</p> <code>getAttributes</code> <p>Get attributes</p> <code>getData</code> <p>Get data from device</p> <code>atForce</code> <p>Check if the device is at the target force</p> <code>getForce</code> <p>Get force</p> <code>getValue</code> <p>Get value</p> <code>reset</code> <p>Reset the device</p> <code>zero</code> <p>Set current reading as baseline</p> <code>disconnect</code> <p>disconnect from the device</p> <code>execute</code> <p>execute task</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>run</code> <p>alias for execute()</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <p>Initialize the balance.</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to connect to.</p> <p> TYPE: <code>str</code> </p> <code>stabilize_timeout</code> <p>The time to wait for the balance to stabilize.</p> <p> TYPE: <code>float</code> DEFAULT: <code>10</code> </p> <code>force_tolerance</code> <p>The tolerance for the force measurement.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.5</code> </p> <code>mass_tolerance</code> <p>The tolerance for the mass measurement</p> <p> TYPE: <code>float</code> DEFAULT: <code>0.15</code> </p> <code>calibration_factor</code> <p>The calibration factor for the balance.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>correction_parameters</code> <p>The correction parameters for the balance.</p> <p> TYPE: <code>tuple[float]</code> DEFAULT: <code>(1.0, 0.0)</code> </p> <code>baudrate</code> <p>The baudrate for the balance.</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>verbose</code> <p>The verbosity of the balance.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Measure/Physical/balance.html#controllably.Measure.Physical.balance.Balance.atMass","title":"atMass","text":"<pre><code>atMass(mass: float) -&gt; float\n</code></pre> <p>Check if the balance is at a specific mass.</p> PARAMETER DESCRIPTION <code>mass</code> <p>The mass to check for.</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The force measured by the balance.</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Measure/Physical/balance.html#controllably.Measure.Physical.balance.Balance.getMass","title":"getMass","text":"<pre><code>getMass() -&gt; float\n</code></pre> <p>Get the mass measured by the balance.</p> RETURNS DESCRIPTION <code>float</code> <p>The mass measured by the balance.</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Measure/Physical/balance.html#controllably.Measure.Physical.balance.Balance.tare","title":"tare","text":"<pre><code>tare(wait: float = 5.0)\n</code></pre> <p>Tare the balance.</p> PARAMETER DESCRIPTION <code>wait</code> <p>The time to wait after taring.</p> <p> TYPE: <code>float</code> DEFAULT: <code>5.0</code> </p>"},{"location":"site/api/Move/gcode.html","title":"Gcode","text":"<p>This module provides utilities for G-code based devices.</p> ATTRIBUTE DESCRIPTION <code>MOVEMENT_BUFFER</code> <p>buffer time after movement</p> <p> TYPE: <code>int</code> </p> <code>MOVEMENT_TIMEOUT</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>GCodeDevice</code> <p>Protocol for G-code devices</p> <code>GCode</code> <p>Interface to control a G-code based device.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode","title":"GCode","text":"<pre><code>GCode(\n    port: str,\n    *,\n    device_type_name: str = \"GRBL\",\n    baudrate: int = 115200,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Mover</code></p> <p>GCode provides an interface to control a G-code based device. Refer to https://reprap.org/wiki/G-code for more information on G-code commands.</p> ATTRIBUTE DESCRIPTION <code>movement_buffer</code> <p>buffer time after movement</p> <p> TYPE: <code>int</code> </p> <code>movement_timeout</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingBox</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> <code>max_accels</code> <p>maximum accelerations of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>max_speeds</code> <p>maximum speeds of the robot</p> <p> TYPE: <code>ndarray</code> </p> METHOD DESCRIPTION <code>query</code> <p>query the device</p> <code>toggleCoolantValve</code> <p>toggle the coolant valve</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target direction</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize GCode class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port address</p> <p> TYPE: <code>str</code> </p> <code>device_type_name</code> <p>name of the device type. Defaults to 'GRBL'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'GRBL'</code> </p> <code>baudrate</code> <p>baudrate of the device. Defaults to 115200.</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>movement_buffer</code> <p>buffer time after movement. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.max_accels","title":"max_accels  <code>property</code>","text":"<pre><code>max_accels: ndarray\n</code></pre> <p>Maximum accelerations of the robot</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.max_speeds","title":"max_speeds  <code>property</code>","text":"<pre><code>max_speeds: ndarray\n</code></pre> <p>Maximum speeds of the robot</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.halt","title":"halt","text":"<pre><code>halt() -&gt; Position\n</code></pre> <p>Halt robot movement</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.home","title":"home","text":"<pre><code>home(\n    axis: str | None = None, *, timeout: int | None = None\n) -&gt; bool\n</code></pre> <p>Make the robot go home</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to home. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the robot successfully homed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.moveBy","title":"moveBy","text":"<pre><code>moveBy(\n    by: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot by target direction</p> PARAMETER DESCRIPTION <code>by</code> <p>target direction</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>speed factor. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>jog movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>rapid movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>robot coordinates. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.moveTo","title":"moveTo","text":"<pre><code>moveTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot to target position</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>speed factor. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>jog movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>rapid movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>robot coordinates. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = True,\n    *,\n    timeout: int | float = 1,\n    jog: bool = False,\n    wait: bool = False,\n) -&gt; Any\n</code></pre> <p>Query the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to query</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>lines of data. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>jog</code> <p>jog movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>wait</code> <p>wait for movement. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>response from device</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the robot</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(\n    speed_factor: float | None = None,\n    *,\n    persist: bool = True,\n)\n</code></pre> <p>Set the speed factor of the robot</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>speed factor. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>persist</code> <p>persist speed factor. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCode.toggleCoolantValve","title":"toggleCoolantValve","text":"<pre><code>toggleCoolantValve(on: bool)\n</code></pre> <p>Toggle the coolant valve</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to turn the coolant valve on</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice","title":"GCodeDevice","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for G-code devices</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.getSettings","title":"getSettings","text":"<pre><code>getSettings() -&gt; dict[str, int | float | str]\n</code></pre> <p>Check the settings of the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.halt","title":"halt","text":"<pre><code>halt() -&gt; Position\n</code></pre> <p>Halt the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.home","title":"home","text":"<pre><code>home(axis: str | None = None, **kwargs) -&gt; bool\n</code></pre> <p>Home the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.query","title":"query","text":"<pre><code>query(\n    data: Any, multi_out: bool = True, **kwargs\n) -&gt; list[str] | None\n</code></pre> <p>Query the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.read","title":"read","text":"<pre><code>read() -&gt; str\n</code></pre> <p>Read data from the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.readAll","title":"readAll","text":"<pre><code>readAll() -&gt; list[str]\n</code></pre> <p>Read all data from the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(speed_factor: float | int, **kwargs)\n</code></pre> <p>Set the speed factor of the device</p>"},{"location":"site/api/Move/gcode.html#controllably.Move.gcode.GCodeDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p>"},{"location":"site/api/Move/move.html","title":"Move","text":"<p>This module provides the base class for mover tools.</p> CLASS DESCRIPTION <code>Mover</code> <p>base class for mover tools</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover","title":"Mover","text":"<pre><code>Mover(\n    *,\n    robot_position: Position = Position(),\n    home_position: Position = Position(),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    workspace: BoundingVolume | None = None,\n    safe_height: float | None = None,\n    saved_positions: dict | None = None,\n    speed_max: float = 600,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>Base class for mover tools.</p> ATTRIBUTE DESCRIPTION <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target direction</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>transferLabware</code> <p>transfer labware from one slot to another</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize Mover class</p> PARAMETER DESCRIPTION <code>robot_position</code> <p>current position of the robot. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>scale</code> <p>factor to scale the basis vectors by. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>deck</code> <p>Deck object for workspace. Defaults to None.</p> <p> TYPE: <code>Deck</code> DEFAULT: <code>None</code> </p> <code>workspace</code> <p>workspace bounding box. Defaults to None.</p> <p> TYPE: <code>BoundingVolume</code> DEFAULT: <code>None</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min. Defaults to 600.</p> <p> TYPE: <code>float</code> DEFAULT: <code>600</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.calibrated_offset","title":"calibrated_offset  <code>property</code>","text":"<pre><code>calibrated_offset: Position\n</code></pre> <p>Calibrated offset from robot to work position</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.home_position","title":"home_position  <code>property</code>","text":"<pre><code>home_position: Position\n</code></pre> <p>Home position of the robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy: bool\n</code></pre> <p>Whether the device is busy</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.position","title":"position  <code>property</code>","text":"<pre><code>position: Position\n</code></pre> <p>Work position of the tool end effector. Alias for <code>worktool_position</code></p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.robot_position","title":"robot_position  <code>property</code>","text":"<pre><code>robot_position: Position\n</code></pre> <p>Current position of the robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.scale","title":"scale  <code>property</code>","text":"<pre><code>scale: float\n</code></pre> <p>Factor to scale the basis vectors by</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.speed","title":"speed  <code>property</code>","text":"<pre><code>speed: float\n</code></pre> <p>Travel speed of robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.speed_factor","title":"speed_factor  <code>property</code> <code>writable</code>","text":"<pre><code>speed_factor: float\n</code></pre> <p>Fraction of maximum travel speed of robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.speed_max","title":"speed_max  <code>property</code> <code>writable</code>","text":"<pre><code>speed_max: dict[str, float]\n</code></pre> <p>Maximum speed(s) of robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.tool_offset","title":"tool_offset  <code>property</code>","text":"<pre><code>tool_offset: Position\n</code></pre> <p>Tool offset from robot to end effector</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.tool_position","title":"tool_position  <code>property</code>","text":"<pre><code>tool_position: Position\n</code></pre> <p>Robot position of the tool end effector</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.work_position","title":"work_position  <code>property</code>","text":"<pre><code>work_position: Position\n</code></pre> <p>Work position of the robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.worktool_position","title":"worktool_position  <code>property</code>","text":"<pre><code>worktool_position: Position\n</code></pre> <p>Work position of the tool end effector</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.calibrate","title":"calibrate  <code>staticmethod</code>","text":"<pre><code>calibrate(\n    internal_points: ndarray, external_points: ndarray\n) -&gt; tuple[Position, float]\n</code></pre> <p>Calibrate the internal and external coordinate systems</p> PARAMETER DESCRIPTION <code>internal_points</code> <p>internal points</p> <p> TYPE: <code>ndarray</code> </p> <code>external_points</code> <p>external points</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <code>tuple[Position, float]</code> <p>tuple[Position,float]: calibrated offset and scale</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.enterZone","title":"enterZone","text":"<pre><code>enterZone(zone: str, speed_factor: float | None = None)\n</code></pre> <p>Enter a zone on the deck</p> PARAMETER DESCRIPTION <code>zone</code> <p>zone to enter</p> <p> TYPE: <code>str</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.exitZone","title":"exitZone","text":"<pre><code>exitZone(speed_factor: float | None = None)\n</code></pre> <p>Exit the current zone on the deck</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.halt","title":"halt","text":"<pre><code>halt() -&gt; Position\n</code></pre> <p>Halt robot movement</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.home","title":"home","text":"<pre><code>home(axis: str | None = None) -&gt; bool\n</code></pre> <p>Make the robot go home</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to home. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the robot successfully homed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.isFeasible","title":"isFeasible","text":"<pre><code>isFeasible(\n    coordinates: Sequence[float] | ndarray,\n    external: bool = True,\n    tool_offset: bool = True,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether the target coordinates is feasible</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>target coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>external</code> <p>whether the target coordinates are in external coordinates. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tool_offset</code> <p>whether to consider the tool offset. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the target coordinates are feasible</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.loadDeck","title":"loadDeck","text":"<pre><code>loadDeck(deck: Deck)\n</code></pre> <p>Load <code>Deck</code> layout object to mover</p> PARAMETER DESCRIPTION <code>deck</code> <p>Deck layout object</p> <p> TYPE: <code>Deck</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.loadDeckFromDict","title":"loadDeckFromDict","text":"<pre><code>loadDeckFromDict(details: dict[str, Any])\n</code></pre> <p>Load <code>Deck</code> layout object from dictionary</p> PARAMETER DESCRIPTION <code>details</code> <p>Deck layout dictionary</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.loadDeckFromFile","title":"loadDeckFromFile","text":"<pre><code>loadDeckFromFile(deck_file: str)\n</code></pre> <p>Load <code>Deck</code> layout object from file</p> PARAMETER DESCRIPTION <code>deck_file</code> <p>Deck layout file</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.move","title":"move","text":"<pre><code>move(\n    axis: str,\n    by: float,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot in a specific axis by a specific value</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to move</p> <p> TYPE: <code>str</code> </p> <code>by</code> <p>displacement to move</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.moveBy","title":"moveBy","text":"<pre><code>moveBy(\n    by: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot by target direction</p> PARAMETER DESCRIPTION <code>by</code> <p>target direction</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.moveRobotTo","title":"moveRobotTo","text":"<pre><code>moveRobotTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot to target position</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.moveTo","title":"moveTo","text":"<pre><code>moveTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot to target position</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.moveToSafeHeight","title":"moveToSafeHeight","text":"<pre><code>moveToSafeHeight(\n    speed_factor: float | None = None,\n) -&gt; Position\n</code></pre> <p>Move the robot to safe height</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.moveToolTo","title":"moveToolTo","text":"<pre><code>moveToolTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the tool end effector to target position</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the robot</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.rotate","title":"rotate","text":"<pre><code>rotate(\n    axis: str,\n    by: float,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot in a specific axis by a specific value</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to rotate</p> <p> TYPE: <code>str</code> </p> <code>by</code> <p>angle to rotate</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.rotateBy","title":"rotateBy","text":"<pre><code>rotateBy(\n    by: Sequence[float] | Rotation | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    robot: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot by target rotation</p> PARAMETER DESCRIPTION <code>by</code> <p>target rotation</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to rotate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool/robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.rotateRobotTo","title":"rotateRobotTo","text":"<pre><code>rotateRobotTo(\n    to: Sequence[float] | Rotation,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot to target orientation</p> PARAMETER DESCRIPTION <code>to</code> <p>target orientation</p> <p> TYPE: <code>Sequence[float] | Rotation</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.rotateTo","title":"rotateTo","text":"<pre><code>rotateTo(\n    to: Sequence[float] | Rotation | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    robot: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot to target orientation</p> PARAMETER DESCRIPTION <code>to</code> <p>target orientation</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to rotate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool/robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.rotateToolTo","title":"rotateToolTo","text":"<pre><code>rotateToolTo(\n    to: Sequence[float] | Rotation,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the tool end effector to target orientation</p> PARAMETER DESCRIPTION <code>to</code> <p>target orientation</p> <p> TYPE: <code>Sequence[float] | Rotation</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.safeMoveTo","title":"safeMoveTo","text":"<pre><code>safeMoveTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor_lateral: float | None = None,\n    speed_factor_up: float | None = None,\n    speed_factor_down: float | None = None,\n    *,\n    jog: bool = False,\n    rotation_before_lateral: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Safe version of moveTo by moving in to safe height first</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor_lateral</code> <p>fraction of maximum speed to travel laterally at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed_factor_up</code> <p>fraction of maximum speed to travel up at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>speed_factor_down</code> <p>fraction of maximum speed to travel down at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rotation_before_lateral</code> <p>whether to rotate before moving laterally. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.setSafeHeight","title":"setSafeHeight","text":"<pre><code>setSafeHeight(height: float)\n</code></pre> <p>Set safe height for robot</p> PARAMETER DESCRIPTION <code>height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(\n    speed_factor: float, *, persist: bool = True\n)\n</code></pre> <p>Set the speed factor of the robot</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>fraction of maximum speed to travel at</p> <p> TYPE: <code>float</code> </p> <code>persist</code> <p>whether to persist the speed factor. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.setToolOffset","title":"setToolOffset","text":"<pre><code>setToolOffset(\n    offset: Sequence[float] | Position | ndarray,\n) -&gt; Position\n</code></pre> <p>Set the tool offset of the robot</p> PARAMETER DESCRIPTION <code>offset</code> <p>tool offset</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>old tool offset</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.showWorkspace","title":"showWorkspace","text":"<pre><code>showWorkspace() -&gt; tuple[Figure, Axes]\n</code></pre> <p>Show the workspace of the robot</p> RETURNS DESCRIPTION <code>tuple[Figure, Axes]</code> <p>tuple[matplotlib.pyplot.Figure, matplotlib.pyplot.Axes]: matplotlib figure, axes</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.transferLabware","title":"transferLabware","text":"<pre><code>transferLabware(\n    from_slot: str,\n    to_slot: str,\n    src_offset: Sequence[float] | ndarray = (0, 0, 0),\n    dst_offset: Sequence[float] | ndarray = (0, 0, 0),\n    speed_factor: float | None = None,\n)\n</code></pre> <p>Transfer labware from one slot to another</p> PARAMETER DESCRIPTION <code>from_slot</code> <p>source slot name</p> <p> TYPE: <code>str</code> </p> <code>to_slot</code> <p>destination slot name</p> <p> TYPE: <code>str</code> </p> <code>src_offset</code> <p>offset from top of labware at source. Defaults to (0,0,0).</p> <p> TYPE: <code>Sequence[float] | ndarray</code> DEFAULT: <code>(0, 0, 0)</code> </p> <code>dst_offset</code> <p>offset from center of destination slot. Defaults to (0,0,0).</p> <p> TYPE: <code>Sequence[float] | ndarray</code> DEFAULT: <code>(0, 0, 0)</code> </p> <code>speed_factor</code> <p>speed factor. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.transformRobotToTool","title":"transformRobotToTool  <code>staticmethod</code>","text":"<pre><code>transformRobotToTool(\n    internal_position: Position, offset: Position\n) -&gt; Position\n</code></pre> <p>Transform robot coordinates to tool coordinates</p> PARAMETER DESCRIPTION <code>internal_position</code> <p>robot position</p> <p> TYPE: <code>Position</code> </p> <code>offset</code> <p>tool offset</p> <p> TYPE: <code>Position</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>tool position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.transformRobotToWork","title":"transformRobotToWork  <code>staticmethod</code>","text":"<pre><code>transformRobotToWork(\n    internal_position: Position,\n    offset: Position,\n    scale: float = 1.0,\n) -&gt; Position\n</code></pre> <p>Transform robot coordinates to work coordinates</p> PARAMETER DESCRIPTION <code>internal_position</code> <p>robot position</p> <p> TYPE: <code>Position</code> </p> <code>offset</code> <p>calibrated offset</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>scale factor. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>work position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.transformToolToRobot","title":"transformToolToRobot  <code>staticmethod</code>","text":"<pre><code>transformToolToRobot(\n    external_position: Position, offset: Position\n) -&gt; Position\n</code></pre> <p>Transform tool coordinates to robot coordinates</p> PARAMETER DESCRIPTION <code>external_position</code> <p>tool position</p> <p> TYPE: <code>Position</code> </p> <code>offset</code> <p>tool offset</p> <p> TYPE: <code>Position</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.transformWorkToRobot","title":"transformWorkToRobot  <code>staticmethod</code>","text":"<pre><code>transformWorkToRobot(\n    external_position: Position,\n    offset: Position,\n    scale: float = 1.0,\n) -&gt; Position\n</code></pre> <p>Transform work coordinates to robot coordinates</p> PARAMETER DESCRIPTION <code>external_position</code> <p>work position</p> <p> TYPE: <code>Position</code> </p> <code>offset</code> <p>calibrated offset</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>scale factor. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/move.html#controllably.Move.move.Mover.updateRobotPosition","title":"updateRobotPosition","text":"<pre><code>updateRobotPosition(\n    by: Position | Rotation | None = None,\n    to: Position | Rotation | None = None,\n) -&gt; Position\n</code></pre> <p>Update the robot position</p> PARAMETER DESCRIPTION <code>by</code> <p>move/rotate by. Defaults to None.</p> <p> TYPE: <code>Position | Rotation</code> DEFAULT: <code>None</code> </p> <code>to</code> <p>move/rotate to. Defaults to None.</p> <p> TYPE: <code>Position | Rotation</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/Cartesian/cartesian.html","title":"Cartesian","text":"<p>This module holds the base class for cartesian mover tools.</p> CLASS DESCRIPTION <code>Gantry</code> <p>Gantry provides controls for a general cartesian robot.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Cartesian/cartesian.html#controllably.Move.Cartesian.cartesian.Gantry","title":"Gantry","text":"<pre><code>Gantry(\n    port: str,\n    limits: Sequence[Sequence[float]] = (\n        (0, 0, 0),\n        (0, 0, 0),\n    ),\n    *,\n    robot_position: Position = Position(),\n    home_position: Position = Position(),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    safe_height: float | None = None,\n    saved_positions: dict | None = None,\n    speed_max: float | None = None,\n    device_type_name: str = \"GRBL\",\n    baudrate: int = 115200,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>GCode</code></p> <p>Gantry provides controls for a general cartesian robot.</p> ATTRIBUTE DESCRIPTION <code>limits</code> <p>lower and upper limits of gantry</p> <p> TYPE: <code>ndarray</code> </p> <code>movement_buffer</code> <p>buffer time after movement</p> <p> TYPE: <code>int</code> </p> <code>movement_timeout</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingBox</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>query</code> <p>query the device</p> <code>toggleCoolantValve</code> <p>toggle the coolant valve</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target direction</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize Gantry class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port address</p> <p> TYPE: <code>str</code> </p> <code>limits</code> <p>lower and upper limits of gantry, in terms of robot coordinate system. Defaults to ((0, 0, 0), (0, 0, 0)).</p> <p> TYPE: <code>Sequence[Sequence[float]]</code> DEFAULT: <code>((0, 0, 0), (0, 0, 0))</code> </p> <code>robot_position</code> <p>current position of the robot. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>scale</code> <p>factor to scale the basis vectors by. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>deck</code> <p>Deck object for workspace. Defaults to None.</p> <p> TYPE: <code>Deck</code> DEFAULT: <code>None</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>saved_positions</code> <p>dictionary of saved positions. Defaults to dict().</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>device_type_name</code> <p>name of the device type. Defaults to 'GRBL'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'GRBL'</code> </p> <code>baudrate</code> <p>baudrate. Defaults to 115200.</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>movement_buffer</code> <p>buffer for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>whether to simulate. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/Cartesian/cartesian.html#controllably.Move.Cartesian.cartesian.Gantry.limits","title":"limits  <code>property</code>","text":"<pre><code>limits: ndarray\n</code></pre> <p>Lower and upper limits of gantry</p>"},{"location":"site/api/Move/Cartesian/ender.html","title":"Ender","text":""},{"location":"site/api/Move/Cartesian/ender.html#controllably.Move.Cartesian.ender.Ender","title":"Ender","text":"<pre><code>Ender(\n    port: str,\n    limits: Sequence[Sequence[float]] = (\n        (0, 0, 0),\n        (0, 0, 0),\n    ),\n    *,\n    robot_position: Position = Position(),\n    home_position: Position = Position(),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    safe_height: float | None = None,\n    saved_positions: dict | None = None,\n    speed_max: float | None = None,\n    device_type_name: str = \"Marlin\",\n    baudrate: int = 115200,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Gantry</code>, <code>HeaterMixin</code></p> <p>Initialize Gantry class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port address</p> <p> TYPE: <code>str</code> </p> <code>limits</code> <p>lower and upper limits of gantry, in terms of robot coordinate system. Defaults to ((0, 0, 0), (0, 0, 0)).</p> <p> TYPE: <code>Sequence[Sequence[float]]</code> DEFAULT: <code>((0, 0, 0), (0, 0, 0))</code> </p> <code>robot_position</code> <p>current position of the robot. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>scale</code> <p>factor to scale the basis vectors by. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>deck</code> <p>Deck object for workspace. Defaults to None.</p> <p> TYPE: <code>Deck</code> DEFAULT: <code>None</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>saved_positions</code> <p>dictionary of saved positions. Defaults to dict().</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>device_type_name</code> <p>name of the device type. Defaults to 'GRBL'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Marlin'</code> </p> <code>baudrate</code> <p>baudrate. Defaults to 115200.</p> <p> TYPE: <code>int</code> DEFAULT: <code>115200</code> </p> <code>movement_buffer</code> <p>buffer for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>whether to simulate. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html","title":"Jointed","text":"<p>This module provides the base class for jointed robot arms.</p> CLASS DESCRIPTION <code>RobotArm</code> <p>RobotArm provides methods to control a robot arm</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm","title":"RobotArm","text":"<pre><code>RobotArm(\n    *args,\n    home_waypoints: Sequence[Position] | None = None,\n    joint_limits: Sequence[Sequence[float]] | None = None,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Mover</code></p> <p>RobotArm provides methods to control a robot arm</p> ATTRIBUTE DESCRIPTION <code>home_waypoints</code> <p>home waypoints for the robot</p> <p> TYPE: <code>list[Position]</code> </p> <code>joint_limits</code> <p>joint limits for the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>joint_position</code> <p>current joint angles</p> <p> TYPE: <code>ndarray</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>isFeasibleJoint</code> <p>checks and returns whether the target joint angles are feasible</p> <code>jointMoveBy</code> <p>move the robot by target joint angles</p> <code>jointMoveTo</code> <p>move the robot to target joint position</p> <code>updateJointPosition</code> <p>update the joint position based on relative or absolute movement</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target rotation</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize RobotArm class</p> PARAMETER DESCRIPTION <code>home_waypoints</code> <p>home waypoints for the robot. Defaults to list().</p> <p> TYPE: <code>Sequence[Position]</code> DEFAULT: <code>None</code> </p> <code>joint_limits</code> <p>joint limits for the robot. Defaults to None.</p> <p> TYPE: <code>Sequence[Sequence[float]]</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.joint_position","title":"joint_position  <code>property</code> <code>writable</code>","text":"<pre><code>joint_position: ndarray\n</code></pre> <p>Current joint angles</p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.home","title":"home","text":"<pre><code>home(axis: str | None = None) -&gt; bool\n</code></pre> <p>Make the robot go home</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to home. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the robot successfully homed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.isFeasibleJoint","title":"isFeasibleJoint","text":"<pre><code>isFeasibleJoint(\n    joint_position: Sequence[float] | ndarray,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether the target joint angles are feasible</p> PARAMETER DESCRIPTION <code>joint_position</code> <p>target joint angles</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the target coordinates are feasible</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.jointMoveBy","title":"jointMoveBy","text":"<pre><code>jointMoveBy(\n    by: Sequence[float] | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = True,\n) -&gt; ndarray\n</code></pre> <p>Move the robot by target joint angles</p> PARAMETER DESCRIPTION <code>by</code> <p>target joint angles to move by</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: new robot joint position</p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.jointMoveTo","title":"jointMoveTo","text":"<pre><code>jointMoveTo(\n    to: Sequence[float] | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = True,\n) -&gt; Position\n</code></pre> <p>Move the robot to target joint position</p> PARAMETER DESCRIPTION <code>to</code> <p>target joint positions</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>np.ndarray: new robot joint position</p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.rotateBy","title":"rotateBy","text":"<pre><code>rotateBy(\n    by: Sequence[float] | Rotation | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    robot: bool = True,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot by target rotation</p> PARAMETER DESCRIPTION <code>by</code> <p>target rotation</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to rotate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool/robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.rotateTo","title":"rotateTo","text":"<pre><code>rotateTo(\n    to: Sequence[float] | Rotation | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    robot: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot to target orientation</p> PARAMETER DESCRIPTION <code>to</code> <p>target orientation</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to rotate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool/robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/Jointed/jointed.html#controllably.Move.Jointed.jointed.RobotArm.updateJointPosition","title":"updateJointPosition","text":"<pre><code>updateJointPosition(\n    by: Sequence[float] | Rotation | ndarray | None = None,\n    to: Sequence[float] | Rotation | ndarray | None = None,\n)\n</code></pre> <p>Update the joint position based on relative or absolute movement</p> PARAMETER DESCRIPTION <code>by</code> <p>relative movement. Defaults to None.</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray | None</code> DEFAULT: <code>None</code> </p> <code>to</code> <p>absolute movement. Defaults to None.</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html","title":"Dobot","text":"<p>This module provides utility functions for Dobot's robot arms</p> ATTRIBUTE DESCRIPTION <code>MOVEMENT_BUFFER</code> <p>buffer time for movement</p> <p> TYPE: <code>float</code> </p> <code>MOVEMENT_TIMEOUT</code> <p>timeout for movement</p> <p> TYPE: <code>float</code> </p> CLASS DESCRIPTION <code>Dobot</code> <p>Dobot provides methods to control Dobot's robot arms</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot","title":"Dobot","text":"<pre><code>Dobot(\n    host: str,\n    joint_limits: Sequence[Sequence[float]] | None = None,\n    *,\n    home_waypoints: Sequence[Position] | None = None,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>RobotArm</code></p> <p>Dobot provides methods to control Dobot's robot arms</p> ATTRIBUTE DESCRIPTION <code>movement_buffer</code> <p>buffer time for movement</p> <p> TYPE: <code>int</code> </p> <code>movement_timeout</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>max_joint_accels</code> <p>maximum joint accelerations of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>max_joint_speeds</code> <p>maximum joint speeds of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot</p> <p> TYPE: <code>list[Position]</code> </p> <code>joint_limits</code> <p>joint limits for the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>joint_position</code> <p>current joint angles</p> <p> TYPE: <code>ndarray</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>isFeasibleJoint</code> <p>checks and returns whether the target joint angles are feasible</p> <code>jointMoveBy</code> <p>move the robot by target joint angles</p> <code>jointMoveTo</code> <p>move the robot to target joint position</p> <code>updateJointPosition</code> <p>update the joint position based on relative or absolute movement</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target rotation</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize Dobot class</p> PARAMETER DESCRIPTION <code>host</code> <p>IP address of Dobot</p> <p> TYPE: <code>str</code> </p> <code>joint_limits</code> <p>joint limits of the robot. Defaults to None.</p> <p> TYPE: <code>Optional[Sequence[Sequence[float]]]</code> DEFAULT: <code>None</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot. Defaults to [].</p> <p> TYPE: <code>Sequence[Position]</code> DEFAULT: <code>None</code> </p> <code>movement_buffer</code> <p>buffer time for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>whether to output logs. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.max_joint_accels","title":"max_joint_accels  <code>property</code>","text":"<pre><code>max_joint_accels: ndarray\n</code></pre> <p>Maximum joint accelerations of the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.max_joint_speeds","title":"max_joint_speeds  <code>property</code>","text":"<pre><code>max_joint_speeds: ndarray\n</code></pre> <p>Maximum joint speeds of the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.halt","title":"halt","text":"<pre><code>halt()\n</code></pre> <p>Halt robot movement</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.isFeasibleJoint","title":"isFeasibleJoint","text":"<pre><code>isFeasibleJoint(\n    joint_position: Sequence[float] | ndarray,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether the target joint angles are feasible</p> PARAMETER DESCRIPTION <code>joint_position</code> <p>target joint angles</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the target coordinates are feasible</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.jointMoveBy","title":"jointMoveBy","text":"<pre><code>jointMoveBy(\n    by: Sequence[float] | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = True,\n) -&gt; ndarray\n</code></pre> <p>Move the robot by target direction</p> PARAMETER DESCRIPTION <code>by</code> <p>target joint angles to move by</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: new robot joint position</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.jointMoveTo","title":"jointMoveTo","text":"<pre><code>jointMoveTo(\n    to: Sequence[float] | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = True,\n) -&gt; ndarray\n</code></pre> <p>Move the robot by target direction</p> PARAMETER DESCRIPTION <code>to</code> <p>target joint positions</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: new robot joint position</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.moveBy","title":"moveBy","text":"<pre><code>moveBy(\n    by: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot by target direction</p> PARAMETER DESCRIPTION <code>by</code> <p>target direction</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.moveTo","title":"moveTo","text":"<pre><code>moveTo(\n    to: Sequence[float] | Position | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    rapid: bool = False,\n    robot: bool = False,\n) -&gt; Position\n</code></pre> <p>Move the robot to target position</p> PARAMETER DESCRIPTION <code>to</code> <p>target position</p> <p> TYPE: <code>Sequence[float] | Position | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to travel at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rapid</code> <p>whether to move rapidly. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to move the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>new tool/robot position</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.rotateTo","title":"rotateTo","text":"<pre><code>rotateTo(\n    to: Sequence[float] | Rotation | ndarray,\n    speed_factor: float | None = None,\n    *,\n    jog: bool = False,\n    robot: bool = False,\n) -&gt; Rotation\n</code></pre> <p>Rotate the robot to target orientation</p> PARAMETER DESCRIPTION <code>to</code> <p>target orientation</p> <p> TYPE: <code>Sequence[float] | Rotation | ndarray</code> </p> <code>speed_factor</code> <p>fraction of maximum speed to rotate at. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>jog</code> <p>whether to jog the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>robot</code> <p>whether to rotate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Rotation</code> <p>new tool/robot orientation</p> <p> TYPE: <code>Rotation</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(\n    speed_factor: float | None = None,\n    *,\n    persist: bool = True,\n)\n</code></pre> <p>Set the speed factor of the robot</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>speed factor. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>persist</code> <p>persist speed factor. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot.html#controllably.Move.Jointed.Dobot.dobot.Dobot.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html","title":"M1Pro","text":"<p>This module provides methods to control Dobot's M1Pro robot arm</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_SPEEDS</code> <p>default speeds of the robot</p> <p> TYPE: <code>dict</code> </p> CLASS DESCRIPTION <code>M1Pro</code> <p>M1Pro provides methods to control Dobot's M1Pro robot arm</p> FUNCTION DESCRIPTION <code>within_volume</code> <p>check if a point is within the robot's workspace</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html#controllably.Move.Jointed.Dobot.m1pro.M1Pro","title":"M1Pro","text":"<pre><code>M1Pro(\n    host: str,\n    joint_limits: Sequence[Sequence[float]] | None = None,\n    right_handed: bool = True,\n    *,\n    robot_position: Position = Position(),\n    home_waypoints: Sequence[Position] | None = None,\n    home_position: Position = Position((300, 0, 240)),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    safe_height: float | None = 240,\n    saved_positions: dict | None = None,\n    speed_max: float | None = None,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Dobot</code></p> <p>M1Pro provides methods to control Dobot's M1Pro robot arm</p> ATTRIBUTE DESCRIPTION <code>movement_buffer</code> <p>buffer time for movement</p> <p> TYPE: <code>int</code> </p> <code>movement_timeout</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>max_joint_accels</code> <p>maximum joint accelerations of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>max_joint_speeds</code> <p>maximum joint speeds of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot</p> <p> TYPE: <code>list[Position]</code> </p> <code>joint_limits</code> <p>joint limits for the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>joint_position</code> <p>current joint angles</p> <p> TYPE: <code>ndarray</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>setHandedness</code> <p>set the handedness of the robot</p> <code>isFeasibleJoint</code> <p>checks and returns whether the target joint angles are feasible</p> <code>jointMoveBy</code> <p>move the robot by target joint angles</p> <code>jointMoveTo</code> <p>move the robot to target joint position</p> <code>updateJointPosition</code> <p>update the joint position based on relative or absolute movement</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible and sets the handedness of the robot if necessary</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target rotation</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize M1Pro class</p> PARAMETER DESCRIPTION <code>host</code> <p>IP address of Dobot</p> <p> TYPE: <code>str</code> </p> <code>joint_limits</code> <p>joint limits of the robot. Defaults to None.</p> <p> TYPE: <code>Sequence[Sequence[float]] | None</code> DEFAULT: <code>None</code> </p> <code>right_handed</code> <p>whether the robot is in right-handed mode (i.e elbow bends to the right). Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>robot_position</code> <p>current position of the robot. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot. Defaults to list().</p> <p> TYPE: <code>Sequence[Position]</code> DEFAULT: <code>None</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system. Defaults to Position((300,0,240)).</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position((300, 0, 240))</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>scale</code> <p>factor to scale the basis vectors by. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>deck</code> <p>Deck object for workspace. Defaults to None.</p> <p> TYPE: <code>Deck | None</code> DEFAULT: <code>None</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system. Defaults to 240.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>240</code> </p> <code>saved_positions</code> <p>dictionary of saved positions. Defaults to dict().</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>movement_buffer</code> <p>buffer time for movement. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>whether to output logs. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>whether to simulate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html#controllably.Move.Jointed.Dobot.m1pro.M1Pro.isFeasible","title":"isFeasible","text":"<pre><code>isFeasible(\n    coordinates: Sequence[float] | ndarray,\n    external: bool = True,\n    tool_offset: bool = True,\n) -&gt; bool\n</code></pre> <p>Checks and returns whether the target coordinates is feasible. Also sets the handedness of the robot if necessary.</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>target coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> <code>external</code> <p>whether the target coordinates are in external coordinates. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>tool_offset</code> <p>whether to consider the tool offset. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the target coordinates are feasible</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html#controllably.Move.Jointed.Dobot.m1pro.M1Pro.setHandedness","title":"setHandedness","text":"<pre><code>setHandedness(\n    right_handed: bool, stretch: bool = False\n) -&gt; bool\n</code></pre> <p>Set the handedness of the robot</p> PARAMETER DESCRIPTION <code>right_handed</code> <p>whether to select right-handedness</p> <p> TYPE: <code>bool</code> </p> <code>stretch</code> <p>whether to stretch the arm. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html#controllably.Move.Jointed.Dobot.m1pro.M1Pro.stretchArm","title":"stretchArm","text":"<pre><code>stretchArm() -&gt; bool\n</code></pre> <p>Extend the arm to full reach</p> RETURNS DESCRIPTION <code>bool</code> <p>whether movement is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/m1pro.html#controllably.Move.Jointed.Dobot.m1pro.within_volume","title":"within_volume","text":"<pre><code>within_volume(point: Sequence[float]) -&gt; bool\n</code></pre> <p>Check whether a point is within the robot's workspace</p> PARAMETER DESCRIPTION <code>point</code> <p>3D coordinates of the point</p> <p> TYPE: <code>Sequence[float]</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the point is within the robot's workspace</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/mg400.html","title":"Mg400","text":"<p>This module provides methods to control Dobot's MG400 robot arm</p> ATTRIBUTE DESCRIPTION <code>DEFAULT_SPEEDS</code> <p>default speeds of the robot</p> <p> TYPE: <code>dict</code> </p> CLASS DESCRIPTION <code>MG400</code> <p>MG400 provides methods to control Dobot's MG400 robot arm</p> FUNCTION DESCRIPTION <code>within_volume</code> <p>checks whether a point is within the robot's workspace</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Jointed/Dobot/mg400.html#controllably.Move.Jointed.Dobot.mg400.MG400","title":"MG400","text":"<pre><code>MG400(\n    host: str,\n    joint_limits: Sequence[Sequence[float]] | None = None,\n    *,\n    robot_position: Position = Position(),\n    home_waypoints: Sequence[Position] | None = None,\n    home_position: Position = Position((0, 300, 0)),\n    tool_offset: Position = Position(),\n    calibrated_offset: Position = Position(),\n    scale: float = 1.0,\n    deck: Deck | None = None,\n    safe_height: float | None = 75,\n    saved_positions: dict | None = None,\n    speed_max: float | None = None,\n    movement_buffer: int | None = None,\n    movement_timeout: int | None = None,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Dobot</code></p> <p>MG400 provides methods to control Dobot's MG400 robot arm</p> ATTRIBUTE DESCRIPTION <code>movement_buffer</code> <p>buffer time for movement</p> <p> TYPE: <code>int</code> </p> <code>movement_timeout</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>max_joint_accels</code> <p>maximum joint accelerations of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>max_joint_speeds</code> <p>maximum joint speeds of the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot</p> <p> TYPE: <code>list[Position]</code> </p> <code>joint_limits</code> <p>joint limits for the robot</p> <p> TYPE: <code>ndarray</code> </p> <code>joint_position</code> <p>current joint angles</p> <p> TYPE: <code>ndarray</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>device</code> <p>device object that communicates with physical tool</p> <p> TYPE: <code>Device</code> </p> <code>flags</code> <p>flags for the class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>deck</code> <p>Deck object for workspace</p> <p> TYPE: <code>Deck</code> </p> <code>workspace</code> <p>workspace bounding box</p> <p> TYPE: <code>BoundingVolume</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system</p> <p> TYPE: <code>float</code> </p> <code>saved_positions</code> <p>dictionary of saved positions</p> <p> TYPE: <code>dict</code> </p> <code>current_zone_waypoints</code> <p>current zone entry waypoints</p> <p> TYPE: <code>tuple[str, list[Position]]</code> </p> <code>speed</code> <p>travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_factor</code> <p>fraction of maximum travel speed of robot</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min</p> <p> TYPE: <code>float</code> </p> <code>robot_position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system</p> <p> TYPE: <code>Position</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector</p> <p> TYPE: <code>Position</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position</p> <p> TYPE: <code>Position</code> </p> <code>scale</code> <p>factor to scale the basis vectors by</p> <p> TYPE: <code>float</code> </p> <code>tool_position</code> <p>robot position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>work_position</code> <p>work position of the robot</p> <p> TYPE: <code>Position</code> </p> <code>worktool_position</code> <p>work position of the tool end effector</p> <p> TYPE: <code>Position</code> </p> <code>position</code> <p>work position of the tool end effector; alias for worktool_position</p> <p> TYPE: <code>Position</code> </p> METHOD DESCRIPTION <code>retractArm</code> <p>retract arm, rotate about base, then extend again</p> <code>isFeasibleJoint</code> <p>checks and returns whether the target joint angles are feasible</p> <code>jointMoveBy</code> <p>move the robot by target joint angles</p> <code>jointMoveTo</code> <p>move the robot to target joint position</p> <code>updateJointPosition</code> <p>update the joint position based on relative or absolute movement</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown procedure for tool</p> <code>enterZone</code> <p>enter a zone on the deck</p> <code>exitZone</code> <p>exit the current zone on the deck</p> <code>halt</code> <p>halt robot movement</p> <code>home</code> <p>make the robot go home</p> <code>isFeasible</code> <p>checks and returns whether the target coordinates is feasible and sets the handedness of the robot if necessary</p> <code>loadDeck</code> <p>load Deck layout object to mover</p> <code>loadDeckFromDict</code> <p>load Deck layout object from dictionary</p> <code>loadDeckFromFile</code> <p>load Deck layout object from file</p> <code>move</code> <p>move the robot in a specific axis by a specific value</p> <code>moveBy</code> <p>move the robot by target direction</p> <code>moveTo</code> <p>move the robot to target position</p> <code>moveToSafeHeight</code> <p>move the robot to safe height</p> <code>moveRobotTo</code> <p>move the robot to target position</p> <code>moveToolTo</code> <p>move the tool end effector to target position</p> <code>reset</code> <p>reset the robot</p> <code>rotate</code> <p>rotate the robot in a specific axis by a specific value</p> <code>rotateBy</code> <p>rotate the robot by target rotation</p> <code>rotateTo</code> <p>rotate the robot to target orientation</p> <code>rotateRobotTo</code> <p>rotate the robot to target orientation</p> <code>rotateToolTo</code> <p>rotate the tool end effector to target orientation</p> <code>safeMoveTo</code> <p>safe version of moveTo by moving to safe height first</p> <code>setSafeHeight</code> <p>set safe height for robot</p> <code>setSpeedFactor</code> <p>set the speed factor of the robot</p> <code>setToolOffset</code> <p>set the tool offset of the robot</p> <code>showWorkspace</code> <p>show the workspace of the robot</p> <code>updateRobotPosition</code> <p>update the robot position</p> <code>transformRobotToTool</code> <p>transform robot coordinates to tool coordinates</p> <code>transformRobotToWork</code> <p>transform robot coordinates to work coordinates</p> <code>transformToolToRobot</code> <p>transform tool coordinates to robot coordinates</p> <code>transformWorkToRobot</code> <p>transform work coordinates to robot coordinates</p> <code>calibrate</code> <p>calibrate the internal and external coordinate systems</p> <p>Initialize MG400 class</p> PARAMETER DESCRIPTION <code>host</code> <p>IP address of Dobot</p> <p> TYPE: <code>str</code> </p> <code>joint_limits</code> <p>joint limits of the robot. Defaults to None.</p> <p> TYPE: <code>Sequence[Sequence[float]] | None</code> DEFAULT: <code>None</code> </p> <code>robot_position</code> <p>current position of the robot. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>home_waypoints</code> <p>home waypoints for the robot. Defaults to list().</p> <p> TYPE: <code>Sequence[Position]</code> DEFAULT: <code>None</code> </p> <code>home_position</code> <p>home position of the robot in terms of robot coordinate system. Defaults to Position((0,300,0)).</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position((0, 300, 0))</code> </p> <code>tool_offset</code> <p>tool offset from robot to end effector. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>calibrated_offset</code> <p>calibrated offset from robot to work position. Defaults to Position().</p> <p> TYPE: <code>Position</code> DEFAULT: <code>Position()</code> </p> <code>scale</code> <p>factor to scale the basis vectors by. Defaults to 1.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1.0</code> </p> <code>deck</code> <p>Deck object for workspace. Defaults to None.</p> <p> TYPE: <code>Deck | None</code> DEFAULT: <code>None</code> </p> <code>safe_height</code> <p>safe height in terms of robot coordinate system. Defaults to 75.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>75</code> </p> <code>saved_positions</code> <p>dictionary of saved positions. Defaults to dict().</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>speed_max</code> <p>maximum speed of robot in mm/min. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>movement_buffer</code> <p>buffer time for movement. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>movement_timeout</code> <p>timeout for movement. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>whether to output logs. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>whether to simulate the robot. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/mg400.html#controllably.Move.Jointed.Dobot.mg400.MG400.retractArm","title":"retractArm","text":"<pre><code>retractArm(\n    target: Sequence[float] | None = None,\n) -&gt; Position\n</code></pre> <p>Retract arm, rotate about base, then extend again</p> PARAMETER DESCRIPTION <code>target</code> <p>x,y,z coordinates of destination. Defaults to None.</p> <p> TYPE: <code>tuple[float] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>current position of the robot</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/mg400.html#controllably.Move.Jointed.Dobot.mg400.within_volume","title":"within_volume","text":"<pre><code>within_volume(point: Sequence[float]) -&gt; bool\n</code></pre> <p>Check whether a point is within the robot's workspace</p> PARAMETER DESCRIPTION <code>point</code> <p>3D coordinates of the point</p> <p> TYPE: <code>Sequence[float]</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the point is within the robot's workspace</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html","title":"Dobot Api","text":"<p>This module provides a class to connect and interface with Dobot's arms</p> ATTRIBUTE DESCRIPTION <code>DASHBOARD_PORT</code> <p>port number for the dashboard API</p> <p> TYPE: <code>int</code> </p> <code>FEEDBACK_PORT</code> <p>port number for the feedback API</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>DobotDevice</code> <p>DobotDevice provides methods to connect and interface with Dobot's arms</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice","title":"DobotDevice","text":"<pre><code>DobotDevice(\n    host: str,\n    port: int | None = None,\n    timeout: int = 10,\n    *,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>DobotDevice provides methods to connect and interface with Dobot's arms</p> ATTRIBUTE DESCRIPTION <code>host</code> <p>device host</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>device port</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>device timeout</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>dashboard_api</code> <p>dashboard API for the device</p> <p> TYPE: <code>DobotApiDashboard</code> </p> <code>move_api</code> <p>move API for the device</p> <p> TYPE: <code>DobotApiMove</code> </p> <code>flags</code> <p>flags for the device</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>reset</code> <p>reset the device</p> <code>clear</code> <p>clear the input and output buffers</p> <code>query</code> <p>query the device</p> <code>read</code> <p>read data from the device</p> <code>write</code> <p>write data to the device</p> <code>close</code> <p>close the connection to the device</p> <code>ClearError</code> <p>clear any errors on the device</p> <code>DisableRobot</code> <p>disable the robot</p> <code>EnableRobot</code> <p>enable the robot</p> <code>ResetRobot</code> <p>stop the robot</p> <code>SetArmOrientation</code> <p>set the handedness of the robot</p> <code>SpeedFactor</code> <p>set the speed factor of the robot</p> <code>GetAngle</code> <p>get the angle of the robot</p> <code>GetPose</code> <p>get the pose of the robot</p> <code>DOExecute</code> <p>execute a digital output</p> <code>JointMovJ</code> <p>move the robot to the specified joint coordinates</p> <code>MovJ</code> <p>move the robot to the specified cartesian coordinates</p> <code>RelMovJ</code> <p>move the robot by the specified joint offsets</p> <code>RelMovL</code> <p>move the robot by the specified cartesian offsets</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.ClearError","title":"ClearError","text":"<pre><code>ClearError()\n</code></pre> <p>Clear any errors on the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.DOExecute","title":"DOExecute","text":"<pre><code>DOExecute(channel: int, on: int)\n</code></pre> <p>Execute a digital output</p> PARAMETER DESCRIPTION <code>channel</code> <p>channel of the digital output</p> <p> TYPE: <code>int</code> </p> <code>on</code> <p>whether to enable the digital output (1 or 0)</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.DisableRobot","title":"DisableRobot","text":"<pre><code>DisableRobot()\n</code></pre> <p>Disable the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.EnableRobot","title":"EnableRobot","text":"<pre><code>EnableRobot(*args)\n</code></pre> <p>Enable the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.GetAngle","title":"GetAngle","text":"<pre><code>GetAngle()\n</code></pre> <p>Get the angle of the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.GetPose","title":"GetPose","text":"<pre><code>GetPose()\n</code></pre> <p>Get the pose of the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.JointMovJ","title":"JointMovJ","text":"<pre><code>JointMovJ(\n    j1: float, j2: float, j3: float, j4: float, *args\n)\n</code></pre> <p>Move the robot to the specified joint coordinates</p> PARAMETER DESCRIPTION <code>j1</code> <p>joint 1 coordinate</p> <p> TYPE: <code>float</code> </p> <code>j2</code> <p>joint 2 coordinate</p> <p> TYPE: <code>float</code> </p> <code>j3</code> <p>joint 3 coordinate</p> <p> TYPE: <code>float</code> </p> <code>j4</code> <p>joint 4 coordinate</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.MovJ","title":"MovJ","text":"<pre><code>MovJ(x: float, y: float, z: float, r: float, *args)\n</code></pre> <p>Move the robot to the specified cartesian coordinates</p> PARAMETER DESCRIPTION <code>x</code> <p>x-coordinate</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>y-coordinate</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>z-coordinate</p> <p> TYPE: <code>float</code> </p> <code>r</code> <p>r-coordinate</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.RelMovJ","title":"RelMovJ","text":"<pre><code>RelMovJ(\n    offset1: float,\n    offset2: float,\n    offset3: float,\n    offset4: float,\n    *args,\n)\n</code></pre> <p>Move the robot by the specified joint offsets</p> PARAMETER DESCRIPTION <code>offset1</code> <p>joint 1 offset</p> <p> TYPE: <code>float</code> </p> <code>offset2</code> <p>joint 2 offset</p> <p> TYPE: <code>float</code> </p> <code>offset3</code> <p>joint 3 offset</p> <p> TYPE: <code>float</code> </p> <code>offset4</code> <p>joint 4 offset</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.RelMovL","title":"RelMovL","text":"<pre><code>RelMovL(\n    offsetX: float,\n    offsetY: float,\n    offsetZ: float,\n    offsetR: float,\n    *args,\n)\n</code></pre> <p>Move the robot by the specified cartesian offsets</p> PARAMETER DESCRIPTION <code>offsetX</code> <p>x offset</p> <p> TYPE: <code>float</code> </p> <code>offsetY</code> <p>y offset</p> <p> TYPE: <code>float</code> </p> <code>offsetZ</code> <p>z offset</p> <p> TYPE: <code>float</code> </p> <code>offsetR</code> <p>r offset</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.ResetRobot","title":"ResetRobot","text":"<pre><code>ResetRobot()\n</code></pre> <p>Stop the robot</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.SetArmOrientation","title":"SetArmOrientation","text":"<pre><code>SetArmOrientation(right_handed: bool)\n</code></pre> <p>Set the handedness of the robot</p> PARAMETER DESCRIPTION <code>right_handed</code> <p>whether to select right-handed mode</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.SpeedFactor","title":"SpeedFactor","text":"<pre><code>SpeedFactor(speed_factor: int)\n</code></pre> <p>Set the speed factor of the robot</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>speed factor to set</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the connection to the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.query","title":"query","text":"<pre><code>query(data: Any, lines: bool = True) -&gt; list[str] | None\n</code></pre> <p>Query the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to query</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>list[str] | None</code> <p>list[str]|None: data read from the device, if any</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.read","title":"read","text":"<pre><code>read(lines: bool = False) -&gt; str | list[str]\n</code></pre> <p>Read data from the device</p> PARAMETER DESCRIPTION <code>lines</code> <p>whether to read multiple lines. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>str | list[str]</code> <p>str|list[str]: line(s) of data read from the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the device</p>"},{"location":"site/api/Move/Jointed/Dobot/dobot_api/dobot_api.html#controllably.Move.Jointed.Dobot.dobot_api.dobot_api.DobotDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to write</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the write was successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/grbl_api/grbl_api.html","title":"Grbl Api","text":"<p>GRBL API for controlling CNC machines using the GRBL firmware. Refer to https://github.com/gnea/grbl/tree/master/doc/markdown for more information on the GRBL firmware.</p> ATTRIBUTE DESCRIPTION <code>LOOP_INTERVAL</code> <p>loop interval for device</p> <p> TYPE: <code>float</code> </p> <code>MOVEMENT_TIMEOUT</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>READ_FORMAT</code> <p>read format for device</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>write format for device</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>data for device</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>GRBL</code> <p>GRBL class for controlling CNC machines using the GRBL firmware.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL","title":"GRBL","text":"<pre><code>GRBL(\n    port: str | None = None,\n    baudrate: int = 115200,\n    timeout: int = 1,\n    init_timeout: int = 2,\n    message_end: str = \"\\n\",\n    *args,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <pre><code>GRBL class for controlling CNC machines using the GRBL firmware.\nRefer to https://github.com/gnea/grbl/tree/master/doc/markdown for more information on the GRBL firmware.\n\nAttributes:\n    port (str): device serial port\n    baudrate (int): device baudrate\n    timeout (int): device timeout\n    connection_details (dict): connection details for the device\n    serial (serial.Serial): serial object for the device\n    init_timeout (int): timeout for initialization\n    message_end (str): message end character\n    flags (SimpleNamespace[str, bool]): flags for the device\n    is_connected (bool): whether the device is connected\n    verbose (bool): verbosity of class\n\nMethods:\n    getAlarms: check for alarms in the response\n    getErrors: check for errors in the response\n    getInfo: query device information\n    getParameters: query device parameters\n    getSettings: query device settings\n    getState: query device state\n    getStatus: query device status\n    clearAlarms: clear alarms in the response\n    halt: halt the device\n    home: home the device\n    resume: resume activity on the device\n    setSpeedFactor: set the speed factor in the device\n    clear: clear the input and output buffers\n    connect: connect to the device\n    disconnect: disconnect from the device\n    query: query the device (i.e. write and read data)\n    read: read data from the device\n    write: write data to the device\n</code></pre> <pre><code>    Initialize GRBL class\n\n    Args:\n        port (str|None): Serial port to connect to. Defaults to None.\n        baudrate (int): baudrate for serial communication. Defaults to 115200.\n        timeout (int): timeout for serial communication. Defaults to 1.\n        init_timeout (int): timeout for initialization of serial communication. Defaults to 2.\n        message_end (str): message end character for serial communication. Defaults to '\n</code></pre> <p>'.             simulation (bool): simulation mode for testing. Defaults to False.</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.clearAlarms","title":"clearAlarms","text":"<pre><code>clearAlarms()\n</code></pre> <p>Clear alarms in the device</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getAlarms","title":"getAlarms","text":"<pre><code>getAlarms(response: str) -&gt; bool\n</code></pre> <p>Checks for alarms in the response</p> PARAMETER DESCRIPTION <code>response</code> <p>response</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether an alarm was found</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getErrors","title":"getErrors","text":"<pre><code>getErrors(response: str) -&gt; bool\n</code></pre> <p>Checks for errors in the response</p> PARAMETER DESCRIPTION <code>response</code> <p>response</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether an error was found</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getInfo","title":"getInfo","text":"<pre><code>getInfo() -&gt; list[str]\n</code></pre> <p>Query device information</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: information in the response</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getParameters","title":"getParameters","text":"<pre><code>getParameters() -&gt; dict[str, list[float]]\n</code></pre> <p>Query device parameters</p> RETURNS DESCRIPTION <code>dict[str, list[float]]</code> <p>dict[str, list[float]]: parameters in the response</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getSettings","title":"getSettings","text":"<pre><code>getSettings() -&gt; dict[str, int | float | str]\n</code></pre> <p>Query device settings</p> RETURNS DESCRIPTION <code>dict[str, int | float | str]</code> <p>dict[str, int|float|str]: settings in the response</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getState","title":"getState","text":"<pre><code>getState() -&gt; dict[str, str]\n</code></pre> <p>Query device state</p> RETURNS DESCRIPTION <code>dict[str, str]</code> <p>dict[str, str]: state in the response</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; tuple[str, ndarray[float], ndarray[float]]\n</code></pre> <p>Query device status</p> RETURNS DESCRIPTION <code>tuple[str, ndarray[float], ndarray[float]]</code> <p>tuple[str, np.ndarray[float], np.ndarray[float]]: status, current position, home offset</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.halt","title":"halt","text":"<pre><code>halt() -&gt; Position\n</code></pre> <p>Halt the device</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.home","title":"home","text":"<pre><code>home(\n    axis: str | None = None, *, timeout: int | None = None\n) -&gt; bool\n</code></pre> <p>Home the device</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to home. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>timeout for homing</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the device was homed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = True,\n    *,\n    timeout: int | float = 1,\n    jog: bool = False,\n    wait: bool = False,\n    **kwargs,\n) -&gt; list[str] | None\n</code></pre> <p>Query the device (i.e. write and read data)</p> PARAMETER DESCRIPTION <code>data</code> <p>data to query</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>whether to read lines</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>timeout for query</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>1</code> </p> <code>jog</code> <p>whether to perform jog movements</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>wait</code> <p>whether to wait for the device to reach the status</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[str] | None</code> <p>list[str]|None: response from the device</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.resume","title":"resume","text":"<pre><code>resume()\n</code></pre> <p>Resume activity on the device</p>"},{"location":"site/api/Move/grbl_api/grbl_api.html#controllably.Move.grbl_api.grbl_api.GRBL.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(\n    speed_factor: float, *, speed_max: int, **kwargs\n)\n</code></pre> <p>Set the speed factor in the device</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>speed factor</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Move/grbl_api/grbl_lib.html","title":"Grbl Lib","text":"<p>This module holds the references for GRBL firmware.</p>"},{"location":"site/api/Move/grbl_api/grbl_lib.html#controllably.Move.grbl_api.grbl_lib.Message","title":"Message  <code>module-attribute</code>","text":"<pre><code>Message = namedtuple('Message', ['message', 'description'])\n</code></pre> <p>Message is a named tuple for a pair of message and its description</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html","title":"Marlin Api","text":"<p>This module provides a class to interact with the Marlin firmware.</p> ATTRIBUTE DESCRIPTION <code>LOOP_INTERVAL</code> <p>loop interval for checking status</p> <p> TYPE: <code>float</code> </p> <code>MOVEMENT_TIMEOUT</code> <p>timeout for movement</p> <p> TYPE: <code>int</code> </p> <code>READ_FORMAT</code> <p>read format for serial communication</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>write format for serial communication</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>data structure for serial communication</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>Marlin</code> <p>Marlin class provides methods to interact with the Marlin firmware.</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin","title":"Marlin","text":"<pre><code>Marlin(\n    port: str | None = None,\n    baudrate: int = 115200,\n    timeout: int = 1,\n    init_timeout: int = 2,\n    message_end: str = \"\\n\",\n    *args,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <pre><code>Marlin class provides methods to interact with the Marlin firmware.\nRefer to https://marlinfw.org/meta/gcode/ for more information on the Marlin firmware.\n\nAttributes:\n    port (str): device serial port\n    baudrate (int): device baudrate\n    timeout (int): device timeout\n    connection_details (dict): connection details for the device\n    serial (serial.Serial): serial object for the device\n    init_timeout (int): timeout for initialization\n    message_end (str): message end character\n    flags (SimpleNamespace[str, bool]): flags for the device\n    is_connected (bool): whether the device is connected\n    verbose (bool): verbosity of class\n\nMethods:\n    getInfo: Query device information\n    getSettings: Query device settings\n    getStatus: Query device status\n    halt: Halt the device\n    home: Home the device\n    setSpeedFactor: Set the speed factor in the device\n    connect: Connect to the device\n    query: Query the device (i.e. write and read data)\n    clear: clear the input and output buffers\n    connect: connect to the device\n    disconnect: disconnect from the device\n    read: read data from the device\n    write: write data to the device\n</code></pre> <pre><code>    Initialize Marlin class\n\n    Args:\n        port (str|None): Serial port to connect to. Defaults to None.\n        baudrate (int): baudrate for serial communication. Defaults to 115200.\n        timeout (int): timeout for serial communication. Defaults to 1.\n        init_timeout (int): timeout for initialization of serial communication. Defaults to 2.\n        message_end (str): message end character for serial communication. Defaults to '\n</code></pre> <p>'.             simulation (bool): simulation mode for testing. Defaults to False.</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.getInfo","title":"getInfo","text":"<pre><code>getInfo() -&gt; dict[str, str]\n</code></pre> <p>Query device information</p> RETURNS DESCRIPTION <code>dict[str, str]</code> <p>dict[str, str]: information in the response</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.getSettings","title":"getSettings","text":"<pre><code>getSettings() -&gt; dict[str, int | float | str]\n</code></pre> <p>Query device settings</p> RETURNS DESCRIPTION <code>dict[str, int | float | str]</code> <p>dict[str, int|float|str]: settings in the response</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; tuple[str, ndarray[float], ndarray[float]]\n</code></pre> <p>Query device status</p> RETURNS DESCRIPTION <code>tuple[str, ndarray[float], ndarray[float]]</code> <p>tuple[str, np.ndarray[float], np.ndarray[float]]: status, current position, home offset</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.halt","title":"halt","text":"<pre><code>halt() -&gt; Position\n</code></pre> <p>Halt the device</p> RETURNS DESCRIPTION <code>Position</code> <p>current position of the device</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.home","title":"home","text":"<pre><code>home(axis: str | None = None, **kwargs) -&gt; bool\n</code></pre> <p>Home the device</p> PARAMETER DESCRIPTION <code>axis</code> <p>axis to home. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the device was homed</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = True,\n    *,\n    timeout: int | float = 1,\n    wait: bool = False,\n    **kwargs,\n) -&gt; list[str] | None\n</code></pre> <p>Query the device (i.e. write and read data)</p> PARAMETER DESCRIPTION <code>data</code> <p>data to write to the device</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>whether to read multiple lines of data. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>timeout for reading data. Defaults to 1.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>1</code> </p> <code>wait</code> <p>whether to wait for the device to be idle. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>list[str] | None</code> <p>list[str]|None: response from the device</p>"},{"location":"site/api/Move/marlin_api/marlin_api.html#controllably.Move.marlin_api.marlin_api.Marlin.setSpeedFactor","title":"setSpeedFactor","text":"<pre><code>setSpeedFactor(\n    speed_factor: float, *, speed_max: int, **kwargs\n)\n</code></pre> <p>Set the speed factor in the device</p> PARAMETER DESCRIPTION <code>speed_factor</code> <p>speed factor</p> <p> TYPE: <code>float</code> </p> <code>speed_max</code> <p>maximum speed</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html","title":"Liquid","text":"<p>This module contains the LiquidHandler class.</p> CLASS DESCRIPTION <code>LiquidHandler</code> <p>Liquid handler base class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler","title":"LiquidHandler","text":"<pre><code>LiquidHandler(*, verbose: bool = False, **kwargs)\n</code></pre> <p>Liquid handler base class</p> ATTRIBUTE DESCRIPTION <code>device</code> <p>Device object</p> <p> TYPE: <code>Device | StreamingDevice</code> </p> <code>flags</code> <p>Flags for the class</p> <p> TYPE: <code>SimpleNamespace</code> </p> <code>speed_in</code> <p>Speed for aspiration</p> <p> </p> <code>speed_out</code> <p>Speed for dispense</p> <p> </p> <code>reagent</code> <p>Name of reagent</p> <p> </p> <code>offset</code> <p>Offset for liquid handling</p> <p> </p> <code>connection_details</code> <p>Connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>is_busy</code> <p>Whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>Whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>Verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>capacity</code> <p>Capacity of liquid handler</p> <p> TYPE: <code>float</code> </p> <code>channel</code> <p>Current channel of liquid handler</p> <p> TYPE: <code>float</code> </p> <code>volume</code> <p>Current volume of liquid in the channel</p> <p> TYPE: <code>float</code> </p> <code>volume_resolution</code> <p>Volume resolution of liquid handler</p> <p> TYPE: <code>float</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the device</p> <code>disconnect</code> <p>Disconnect from the device</p> <code>resetFlags</code> <p>Reset all flags to to default</p> <code>shutdown</code> <p>Shutdown procedure for tool</p> <code>aspirate</code> <p>Aspirate desired volume of reagent</p> <code>blowout</code> <p>Blowout liquid from tip</p> <code>dispense</code> <p>Dispense desired volume of reagent</p> <code>pullback</code> <p>Pullback liquid from tip</p> <code>cycle</code> <p>Cycle between aspirate and dispense</p> <code>empty</code> <p>Empty the channel</p> <code>fill</code> <p>Fill the channel</p> <code>rinse</code> <p>Rinse the channel with aspirate and dispense cycles</p> <p>Instantiate the class</p> PARAMETER DESCRIPTION <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.capacity","title":"capacity  <code>property</code> <code>writable</code>","text":"<pre><code>capacity: float\n</code></pre> <p>Capacity of liquid handler</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.channel","title":"channel  <code>property</code> <code>writable</code>","text":"<pre><code>channel: float\n</code></pre> <p>Current channel of liquid handler</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details: dict\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy: bool\n</code></pre> <p>Whether the device is busy</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.volume","title":"volume  <code>property</code> <code>writable</code>","text":"<pre><code>volume: float\n</code></pre> <p>Current volume of liquid in the channel</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.volume_resolution","title":"volume_resolution  <code>property</code> <code>writable</code>","text":"<pre><code>volume_resolution: float\n</code></pre> <p>Volume resolution of liquid handler</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.aspirate","title":"aspirate","text":"<pre><code>aspirate(\n    volume: float,\n    speed: float | None = None,\n    reagent: str | None = None,\n    *,\n    pullback: bool = False,\n    delay: int = 0,\n    pause: bool = False,\n    ignore: bool = False,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Aspirate desired volume of reagent</p> PARAMETER DESCRIPTION <code>volume</code> <p>target volume</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to aspirate at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>name of reagent. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>pullback</code> <p>whether to pullback after aspirate. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay</code> <p>time delay after aspirate. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore</code> <p>whether to aspirate reagent regardless. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.blowout","title":"blowout","text":"<pre><code>blowout(**kwargs) -&gt; bool\n</code></pre> <p>Blowout liquid from tip</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.cycle","title":"cycle","text":"<pre><code>cycle(\n    volume: float,\n    speed: float | None = None,\n    reagent: str | None = None,\n    cycles: int = 1,\n    *,\n    delay: int = 0,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Cycle between aspirate and dispense</p> PARAMETER DESCRIPTION <code>volume</code> <p>target volume</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to aspirate and dispense at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>name of reagent. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>cycles</code> <p>number of cycles. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>delay</code> <p>time delay after each action. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.dispense","title":"dispense","text":"<pre><code>dispense(\n    volume: float,\n    speed: float | None = None,\n    *,\n    blowout: bool = False,\n    delay: int = 0,\n    pause: bool = False,\n    ignore: bool = False,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Dispense desired volume of reagent</p> PARAMETER DESCRIPTION <code>volume</code> <p>target volume</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to dispense at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>blowout</code> <p>whether perform blowout. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay</code> <p>time delay after dispense. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore</code> <p>whether to dispense reagent regardless. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.empty","title":"empty","text":"<pre><code>empty(\n    speed: float | None = None,\n    *,\n    blowout: bool = False,\n    delay: int = 0,\n    pause: bool = False,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Empty the channel</p> PARAMETER DESCRIPTION <code>speed</code> <p>speed to empty. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>blowout</code> <p>whether to perform blowout. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay</code> <p>delay time between steps in seconds. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.fill","title":"fill","text":"<pre><code>fill(\n    speed: float | None = None,\n    reagent: str | None = None,\n    *,\n    pullback: bool = False,\n    cycles: int = 0,\n    delay: int = 0,\n    pause: bool = False,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Fill the channel</p> PARAMETER DESCRIPTION <code>speed</code> <p>speed to aspirate and dispense at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>name of reagent. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>pullback</code> <p>whether to pullback after aspirate. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>cycles</code> <p>number of cycles before filling. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>delay</code> <p>time delay after each action. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.pullback","title":"pullback","text":"<pre><code>pullback(**kwargs) -&gt; bool\n</code></pre> <p>Pullback liquid from tip</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.rinse","title":"rinse","text":"<pre><code>rinse(\n    speed: float | None = None,\n    reagent: str | None = None,\n    cycles: int = 3,\n    *,\n    delay: int = 0,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Rinse the channel with aspirate and dispense cycles</p> PARAMETER DESCRIPTION <code>speed</code> <p>speed to aspirate and dispense at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>name of reagent. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>cycles</code> <p>number of cycles. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> <code>delay</code> <p>time delay after each action. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/liquid.html#controllably.Transfer.Liquid.liquid.LiquidHandler.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown procedure for tool</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html","title":"Sartorius","text":"<p>This module contains the Sartorius class.</p> CLASS DESCRIPTION <code>Sartorius</code> <p>Sartorius pipette tool class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius","title":"Sartorius","text":"<pre><code>Sartorius(\n    port: str,\n    *,\n    channel: int = 1,\n    verbose: bool = False,\n    simulation: bool = False,\n    tip_inset_mm: int = 12,\n    tip_capacitance: int = 276,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>LiquidHandler</code></p> <p>Sartorius pipette tool class</p> ATTRIBUTE DESCRIPTION <code>tip_length</code> <p>The length of the tip attached to the pipette tool.</p> <p> TYPE: <code>int | float</code> </p> <code>pullback_steps</code> <p>The number of steps to pull back the pipette tool.</p> <p> TYPE: <code>int</code> </p> <code>speed_interpolation</code> <p>The interpolation of speed values.</p> <p> TYPE: <code>dict</code> </p> <code>capacity</code> <p>The capacity of the pipette tool.</p> <p> TYPE: <code>float</code> </p> <code>channel</code> <p>The channel of the pipette tool.</p> <p> TYPE: <code>int</code> </p> <code>volume_resolution</code> <p>The volume resolution of the pipette tool.</p> <p> TYPE: <code>float</code> </p> <code>tip_inset_mm</code> <p>The inset of the tip in mm.</p> <p> TYPE: <code>float</code> </p> <code>device</code> <p>Device object</p> <p> TYPE: <code>SartoriusDevice</code> </p> <code>flags</code> <p>Flags for the class</p> <p> TYPE: <code>SimpleNamespace</code> </p> <code>speed_in</code> <p>Speed for aspiration</p> <p> TYPE: <code>int | float</code> </p> <code>speed_out</code> <p>Speed for dispense</p> <p> TYPE: <code>int | float</code> </p> <code>reagent</code> <p>Name of reagent</p> <p> </p> <code>offset</code> <p>Offset for liquid handling</p> <p> </p> <code>connection_details</code> <p>Connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>is_busy</code> <p>Whether the device is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>Whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>Verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>volume</code> <p>Current volume of liquid in the channel</p> <p> TYPE: <code>float</code> </p> METHOD DESCRIPTION <code>aspirate</code> <p>Aspirate desired volume of reagent</p> <code>blowout</code> <p>Blowout liquid from tip</p> <code>dispense</code> <p>Dispense desired volume of reagent</p> <code>pullback</code> <p>Pullback liquid from tip</p> <code>addAirGap</code> <p>Add an air gap to the pipette tool</p> <code>attach</code> <p>Attach the tip to the pipette tool</p> <code>eject</code> <p>Eject the tip from the pipette tool</p> <code>home</code> <p>Home the pipette tool</p> <code>setSpeed</code> <p>Set the speed of the pipette tool</p> <code>isTipOn</code> <p>Check if the tip is on the pipette tool</p> <code>connect</code> <p>Connect to the device</p> <code>disconnect</code> <p>Disconnect from the device</p> <code>resetFlags</code> <p>Reset all flags to to default</p> <code>shutdown</code> <p>Shutdown procedure for tool</p> <code>cycle</code> <p>Cycle between aspirate and dispense</p> <code>empty</code> <p>Empty the channel</p> <code>fill</code> <p>Fill the channel</p> <code>rinse</code> <p>Rinse the channel with aspirate and dispense cycles</p> <p>Initialize the Sartorius pipette tool.</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to connect to the pipette tool.</p> <p> TYPE: <code>str</code> </p> <code>channel</code> <p>The channel to connect to. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>verbose</code> <p>Whether to print verbose output. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>Whether to simulate the pipette tool. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>tip_inset_mm</code> <p>The inset of the tip in mm. Defaults to 12.</p> <p> TYPE: <code>int</code> DEFAULT: <code>12</code> </p> <code>tip_capacitance</code> <p>The capacitance of the tip. Defaults to 276.</p> <p> TYPE: <code>int</code> DEFAULT: <code>276</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.tip_inset_mm","title":"tip_inset_mm  <code>property</code>","text":"<pre><code>tip_inset_mm: float\n</code></pre> <p>The inset of the tip in mm</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.addAirGap","title":"addAirGap","text":"<pre><code>addAirGap(steps: int = 10) -&gt; bool\n</code></pre> <p>Add an air gap to the pipette tool.</p> PARAMETER DESCRIPTION <code>steps</code> <p>The number of steps to move the pipette tool.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the action is successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.attach","title":"attach","text":"<pre><code>attach(tip_length: int | float) -&gt; bool\n</code></pre> <p>Attach the tip to the pipette tool.</p> PARAMETER DESCRIPTION <code>tip_length</code> <p>The length of the tip to attach.</p> <p> TYPE: <code>int | float</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the action is successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.blowout","title":"blowout","text":"<pre><code>blowout(home: bool = True, **kwargs) -&gt; bool\n</code></pre> <p>Blowout liquid from tip</p> PARAMETER DESCRIPTION <code>home</code> <p>whether to home the pipette tool after blowing out</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.eject","title":"eject","text":"<pre><code>eject() -&gt; bool\n</code></pre> <p>Eject the tip from the pipette tool.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the action is successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.home","title":"home","text":"<pre><code>home() -&gt; bool\n</code></pre> <p>Home the pipette tool.</p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the action is successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.isTipOn","title":"isTipOn","text":"<pre><code>isTipOn() -&gt; bool\n</code></pre> <p>Check if the tip is on the pipette tool.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the tip is on the pipette tool, False otherwise.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius.Sartorius.setSpeed","title":"setSpeed","text":"<pre><code>setSpeed(\n    speed: int | float, as_default: bool = True\n) -&gt; bool\n</code></pre> <p>Set the speed of the pipette tool.</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed to set the pipette tool to.</p> <p> TYPE: <code>float</code> </p> <code>as_default</code> <p>Whether to set the speed as the default speed.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>Whether the action is successful.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html","title":"Sartorius Api","text":"<p>This module contains the SartoriusDevice class.</p> ATTRIBUTE DESCRIPTION <code>READ_FORMAT</code> <p>command template for reading</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>command template for writing</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>data type for communication</p> <p> TYPE: <code>NamedTuple</code> </p> <code>IntData</code> <p>data type for communication</p> <p> TYPE: <code>NamedTuple</code> </p> <code>STEP_RESOLUTION</code> <p>minimum number of steps to have tolerable errors in volume</p> <p> TYPE: <code>int</code> </p> <code>RESPONSE_TIME</code> <p>delay between sending a command and receiving a response, in seconds</p> <p> TYPE: <code>float</code> </p> CLASS DESCRIPTION <code>SartoriusDevice</code> <p>Sartorius pipette device class</p> FUNCTION DESCRIPTION <code>interpolate_speed</code> <p>Calculates the best parameters for volume and speed</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.RESPONSE_TIME","title":"RESPONSE_TIME  <code>module-attribute</code>","text":"<pre><code>RESPONSE_TIME = 1.03\n</code></pre> <p>Delay between sending a command and receiving a response, in seconds</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.STEP_RESOLUTION","title":"STEP_RESOLUTION  <code>module-attribute</code>","text":"<pre><code>STEP_RESOLUTION = 10\n</code></pre> <p>Minimum number of steps to have tolerable errors in volume</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice","title":"SartoriusDevice","text":"<pre><code>SartoriusDevice(\n    port: str | None = None,\n    baudrate: int = 9600,\n    timeout: int = 2,\n    *,\n    channel: int = 1,\n    step_resolution: int = STEP_RESOLUTION,\n    response_time: float = RESPONSE_TIME,\n    tip_inset_mm: int = 12,\n    tip_capacitance: int = 276,\n    init_timeout: int = 2,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <p>Sartorius pipette device class</p> ATTRIBUTE DESCRIPTION <code>info</code> <p>Sartorius model info</p> <p> TYPE: <code>ModelInfo</code> </p> <code>model</code> <p>model of the pipette</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>version of the pipette</p> <p> TYPE: <code>str</code> </p> <code>total_cycles</code> <p>total number of cycles of the pipette</p> <p> TYPE: <code>int</code> </p> <code>volume_resolution</code> <p>volume resolution of the pipette</p> <p> TYPE: <code>float</code> </p> <code>step_resolution</code> <p>minimum number of steps to have tolerable errors in volume</p> <p> TYPE: <code>int</code> </p> <code>capacitance</code> <p>capacitance as measured at the end of the pipette</p> <p> TYPE: <code>int</code> </p> <code>position</code> <p>current position of the pipette</p> <p> TYPE: <code>int</code> </p> <code>speed_code_in</code> <p>speed code for aspirating</p> <p> TYPE: <code>int</code> </p> <code>speed_code_out</code> <p>speed code for dispensing</p> <p> TYPE: <code>int</code> </p> <code>status</code> <p>status of the pipette</p> <p> TYPE: <code>int</code> </p> <code>channel</code> <p>channel id</p> <p> TYPE: <code>int</code> </p> <code>response_time</code> <p>delay between sending a command and receiving a response, in seconds</p> <p> TYPE: <code>float</code> </p> <code>tip_capacitance</code> <p>threshold above which a conductive pipette tip is considered to be attached</p> <p> TYPE: <code>int</code> </p> <code>tip_inset_mm</code> <p>length of pipette that is inserted into the pipette tip</p> <p> TYPE: <code>int</code> </p> <code>tip_length</code> <p>length of the pipette tip</p> <p> TYPE: <code>int</code> </p> <code>capacity</code> <p>Capacity of the pipette</p> <p> TYPE: <code>int</code> </p> <code>home_position</code> <p>Home position of the pipette</p> <p> TYPE: <code>int</code> </p> <code>max_position</code> <p>Maximum position of the pipette</p> <p> TYPE: <code>int</code> </p> <code>tip_eject_position</code> <p>Tip eject position of the pipette</p> <p> TYPE: <code>int</code> </p> <code>limits</code> <p>Lower and upper step limits of the pipette</p> <p> TYPE: <code>tuple[int]</code> </p> <code>preset_speeds</code> <p>Preset speeds available for the pipette</p> <p> TYPE: <code>ndarray[int | float]</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the device</p> <code>query</code> <p>Query the device</p> <code>getCapacitance</code> <p>Get the capacitance as measured at the end of the pipette</p> <code>getErrors</code> <p>Get errors from the device</p> <code>getPosition</code> <p>Get the current position of the pipette</p> <code>getStatus</code> <p>Get the status of the pipette</p> <code>isTipOn</code> <p>Check and return whether a pipette tip is attached</p> <code>getInfo</code> <p>Get details of the Sartorius pipette model</p> <code>getModel</code> <p>Get the model of the pipette</p> <code>getVolumeResolution</code> <p>Get the volume resolution of the pipette</p> <code>getInSpeedCode</code> <p>Get the speed code for aspirating</p> <code>getOutSpeedCode</code> <p>Get the speed code for dispensing</p> <code>getVersion</code> <p>Get the version of the pipette</p> <code>getLifetimeCycles</code> <p>Get the total number of cycles of the pipette</p> <code>setInSpeedCode</code> <p>Set the speed code for aspirating</p> <code>setOutSpeedCode</code> <p>Set the speed code for dispensing</p> <code>setChannelID</code> <p>Set the channel ID</p> <code>aspirate</code> <p>Aspirate desired volume of reagent into pipette</p> <code>blowout</code> <p>Blowout liquid from tip</p> <code>dispense</code> <p>Dispense desired volume of reagent</p> <code>eject</code> <p>Eject the pipette tip</p> <code>home</code> <p>Return plunger to home position</p> <code>move</code> <p>Move the plunger either up or down by a specified number of steps</p> <code>moveBy</code> <p>Move the plunger by a specified number of steps</p> <code>moveTo</code> <p>Move the plunger to a specified position</p> <code>zero</code> <p>Zero the plunger position</p> <code>reset</code> <p>Reset the pipette</p> <p>Initialize the Sartorius pipette device</p> PARAMETER DESCRIPTION <code>port</code> <p>COM port address. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>baudrate</code> <p>baudrate of the device. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>timeout</code> <p>timeout for communication. Defaults to 2.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>channel</code> <p>channel id. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>step_resolution</code> <p>minimum number of steps to have tolerable errors in volume. Defaults to STEP_RESOLUTION.</p> <p> TYPE: <code>int</code> DEFAULT: <code>STEP_RESOLUTION</code> </p> <code>response_time</code> <p>delay between sending a command and receiving a response, in seconds. Defaults to RESPONSE_TIME.</p> <p> TYPE: <code>float</code> DEFAULT: <code>RESPONSE_TIME</code> </p> <code>tip_inset_mm</code> <p>length of pipette that is inserted into the pipette tip. Defaults to 12.</p> <p> TYPE: <code>int</code> DEFAULT: <code>12</code> </p> <code>tip_capacitance</code> <p>threshold above which a conductive pipette tip is considered to be attached. Defaults to 276.</p> <p> TYPE: <code>int</code> DEFAULT: <code>276</code> </p> <code>init_timeout</code> <p>timeout for initialization. Defaults to 2.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2</code> </p> <code>data_type</code> <p>data type for communication. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>read format for communication. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>write format for communication. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>simulation mode. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbose mode. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: int\n</code></pre> <p>Capacity of the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.home_position","title":"home_position  <code>property</code>","text":"<pre><code>home_position: int\n</code></pre> <p>Home position of the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.limits","title":"limits  <code>property</code>","text":"<pre><code>limits: tuple[int]\n</code></pre> <p>Lower and upper step limits of the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.max_position","title":"max_position  <code>property</code>","text":"<pre><code>max_position: int\n</code></pre> <p>Maximum position of the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.preset_speeds","title":"preset_speeds  <code>property</code>","text":"<pre><code>preset_speeds: ndarray[int | float]\n</code></pre> <p>Preset speeds available for the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.tip_eject_position","title":"tip_eject_position  <code>property</code>","text":"<pre><code>tip_eject_position: int\n</code></pre> <p>Tip eject position of the pipette</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.aspirate","title":"aspirate","text":"<pre><code>aspirate(steps: int) -&gt; str\n</code></pre> <p>Aspirate desired volume of reagent into pipette</p> PARAMETER DESCRIPTION <code>steps</code> <p>number of steps to aspirate</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.blowout","title":"blowout","text":"<pre><code>blowout(\n    home: bool = True, *, position: int | None = None\n) -&gt; str\n</code></pre> <p>Blowout liquid from tip</p> PARAMETER DESCRIPTION <code>home</code> <p>return to home position. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>position</code> <p>position to move to. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.dispense","title":"dispense","text":"<pre><code>dispense(steps: int) -&gt; str\n</code></pre> <p>Dispense desired volume of reagent</p> PARAMETER DESCRIPTION <code>steps</code> <p>number of steps to dispense</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.eject","title":"eject","text":"<pre><code>eject(\n    home: bool = True, *, position: int | None = None\n) -&gt; str\n</code></pre> <p>Eject the pipette tip</p> PARAMETER DESCRIPTION <code>home</code> <p>return to home position. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>position</code> <p>position to move to. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getCapacitance","title":"getCapacitance","text":"<pre><code>getCapacitance() -&gt; int\n</code></pre> <p>Get the capacitance as measured at the end of the pipette</p> RETURNS DESCRIPTION <code>int</code> <p>capacitance as measured at the end of the pipette</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getErrors","title":"getErrors","text":"<pre><code>getErrors() -&gt; str\n</code></pre> <p>Get errors from the device</p> RETURNS DESCRIPTION <code>str</code> <p>errors from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getInSpeedCode","title":"getInSpeedCode","text":"<pre><code>getInSpeedCode() -&gt; int\n</code></pre> <p>Get the speed code for aspirating</p> RETURNS DESCRIPTION <code>int</code> <p>speed code for aspirating</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getInfo","title":"getInfo","text":"<pre><code>getInfo(*, model: str | None = None) -&gt; ModelInfo\n</code></pre> <p>Get details of the Sartorius pipette model</p> PARAMETER DESCRIPTION <code>model</code> <p>model name. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ModelInfo</code> <p>lib.ModelInfo: Sartorius model info</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getLifetimeCycles","title":"getLifetimeCycles","text":"<pre><code>getLifetimeCycles() -&gt; int\n</code></pre> <p>Get the total number of cycles of the pipette</p> RETURNS DESCRIPTION <code>int</code> <p>total number of cycles of the pipette</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getModel","title":"getModel","text":"<pre><code>getModel() -&gt; str\n</code></pre> <p>Get the model of the pipette</p> RETURNS DESCRIPTION <code>str</code> <p>model of the pipette</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getOutSpeedCode","title":"getOutSpeedCode","text":"<pre><code>getOutSpeedCode() -&gt; int\n</code></pre> <p>Get the speed code for dispensing</p> RETURNS DESCRIPTION <code>int</code> <p>speed code for dispensing</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getPosition","title":"getPosition","text":"<pre><code>getPosition() -&gt; int\n</code></pre> <p>Get the current position of the pipette</p> RETURNS DESCRIPTION <code>int</code> <p>current position of the pipette</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; int\n</code></pre> <p>Get the status of the pipette</p> RETURNS DESCRIPTION <code>int</code> <p>status of the pipette</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getVersion","title":"getVersion","text":"<pre><code>getVersion() -&gt; str\n</code></pre> <p>Get the version of the pipette</p> RETURNS DESCRIPTION <code>str</code> <p>version of the pipette</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.getVolumeResolution","title":"getVolumeResolution","text":"<pre><code>getVolumeResolution() -&gt; float\n</code></pre> <p>Get the volume resolution of the pipette</p> RETURNS DESCRIPTION <code>float</code> <p>volume resolution of the pipette</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.home","title":"home","text":"<pre><code>home() -&gt; str\n</code></pre> <p>Return plunger to home position</p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.isTipOn","title":"isTipOn","text":"<pre><code>isTipOn() -&gt; bool\n</code></pre> <p>Check and return whether a pipette tip is attached</p> RETURNS DESCRIPTION <code>bool</code> <p>whether a pipette tip is attached</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.move","title":"move","text":"<pre><code>move(steps: int) -&gt; str\n</code></pre> <p>Move the plunger either up or down by a specified number of steps</p> PARAMETER DESCRIPTION <code>steps</code> <p>number of steps to move</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.moveBy","title":"moveBy","text":"<pre><code>moveBy(steps: int) -&gt; str\n</code></pre> <p>Move the plunger by a specified number of steps</p> PARAMETER DESCRIPTION <code>steps</code> <p>number of steps to move</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.moveTo","title":"moveTo","text":"<pre><code>moveTo(position: int) -&gt; str\n</code></pre> <p>Move the plunger to a specified position</p> PARAMETER DESCRIPTION <code>position</code> <p>position to move to</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.reset","title":"reset","text":"<pre><code>reset() -&gt; str\n</code></pre> <p>Reset the pipette</p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.setChannelID","title":"setChannelID","text":"<pre><code>setChannelID(channel: int) -&gt; str\n</code></pre> <p>Set the channel ID</p> PARAMETER DESCRIPTION <code>channel</code> <p>channel ID</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.setInSpeedCode","title":"setInSpeedCode","text":"<pre><code>setInSpeedCode(value: int) -&gt; str\n</code></pre> <p>Set the speed code for aspirating</p> PARAMETER DESCRIPTION <code>value</code> <p>speed code</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.setOutSpeedCode","title":"setOutSpeedCode","text":"<pre><code>setOutSpeedCode(value: int) -&gt; str\n</code></pre> <p>Set the speed code for dispensing</p> PARAMETER DESCRIPTION <code>value</code> <p>speed code</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.SartoriusDevice.zero","title":"zero","text":"<pre><code>zero() -&gt; str\n</code></pre> <p>Zero the plunger position</p> RETURNS DESCRIPTION <code>str</code> <p>response from the device</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_api.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_api.interpolate_speed","title":"interpolate_speed","text":"<pre><code>interpolate_speed(\n    volume: int,\n    speed: int,\n    *,\n    speed_presets: tuple[int | float],\n    volume_resolution: float,\n    step_resolution: int = STEP_RESOLUTION,\n    time_resolution: float = RESPONSE_TIME,\n) -&gt; dict[str, int | float] | None\n</code></pre> <p>Calculates the best parameters for volume and speed</p> PARAMETER DESCRIPTION <code>volume</code> <p>volume to be transferred</p> <p> TYPE: <code>int</code> </p> <code>speed</code> <p>speed at which liquid is transferred</p> <p> TYPE: <code>int</code> </p> <code>speed_presets</code> <p>preset speeds available</p> <p> TYPE: <code>tuple[int | float]</code> </p> <code>volume_resolution</code> <p>volume resolution of pipette (i.e. uL per step)</p> <p> TYPE: <code>float</code> </p> <code>step_resolution</code> <p>minimum number of steps to have tolerable errors in volume. Defaults to STEP_RESOLUTION.</p> <p> TYPE: <code>int</code> DEFAULT: <code>STEP_RESOLUTION</code> </p> <code>time_resolution</code> <p>minimum communication / time delay. Defaults to RESPONSE_TIME.</p> <p> TYPE: <code>float</code> DEFAULT: <code>RESPONSE_TIME</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of best parameters</p> <p> TYPE: <code>dict[str, int | float] | None</code> </p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_lib.html","title":"Sartorius Lib","text":"<p>This module holds the references for pipette tools from Sartorius.</p> ATTRIBUTE DESCRIPTION <code>QUERIES</code> <p>List of all query codes available for the pipette</p> <p> TYPE: <code>list</code> </p> CLASS DESCRIPTION <code>ErrorCode</code> <p>Enum for error codes returned by the pipette</p> <code>Model</code> <p>Enum for pipette models, each containing a ModelInfo dataclass</p> <code>StaticQueryCode</code> <p>Enum for static query codes</p> <code>StatusCode</code> <p>Enum for status codes returned by the pipette</p> <code>StatusQueryCode</code> <p>Enum for status query codes</p> <code>ModelInfo</code> <p>Dataclass representing a pipette model with its specifications</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_lib.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_lib.QUERIES","title":"QUERIES  <code>module-attribute</code>","text":"<pre><code>QUERIES = _member_names_ + _member_names_\n</code></pre> <p>List of all query codes</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_lib.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_lib.ModelInfo","title":"ModelInfo  <code>dataclass</code>","text":"<pre><code>ModelInfo(\n    name: str,\n    capacity: int,\n    home_position: int,\n    max_position: int,\n    tip_eject_position: int,\n    resolution: float,\n    preset_speeds: tuple[int | float],\n)\n</code></pre> <p>ModelInfo dataclass represents a single model of pipette from Sartorius</p>"},{"location":"site/api/Transfer/Liquid/Pipette/Sartorius/sartorius_api/sartorius_lib.html#controllably.Transfer.Liquid.Pipette.Sartorius.sartorius_api.sartorius_lib.ModelInfo--constructor","title":"Constructor","text":"<p>Args:     name (str): model name     capacity (int): capacity of pipette     home_position (int): home position of pipette     max_position (int): maximum position of pipette     tip_eject_position (int): tip eject position of pipette     resolution (float): volume resolution of pipette (i.e. uL per step)     preset_speeds (PresetSpeeds): preset speeds of pipette</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html","title":"Tricontinent","text":"<p>This module provides a class for handling TriContinent pumps.</p> CLASS DESCRIPTION <code>TriContinent</code> <p>Class for handling TriContinent pumps.</p> <code>Multi_TriContinent</code> <p>Class for handling multiple TriContinent pumps.</p> <code>Parallel_TriContinent</code> <p>Class for handling multiple TriContinent pumps in parallel.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent","title":"TriContinent","text":"<pre><code>TriContinent(\n    port: str,\n    capacity: float = 1000.0,\n    *,\n    output_right: bool,\n    channel: int = 1,\n    verbose: bool = False,\n    simulation: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>LiquidHandler</code></p> <p>TriContinent class for handling TriContinent pumps.</p> ATTRIBUTE DESCRIPTION <code>capacity</code> <p>The capacity of the pump.</p> <p> TYPE: <code>float</code> </p> <code>channel</code> <p>The channel of the pump.</p> <p> TYPE: <code>int</code> </p> <code>volume_resolution</code> <p>The volume resolution of the pump.</p> <p> TYPE: <code>float</code> </p> <code>pullback_steps</code> <p>The number of pullback steps.</p> <p> TYPE: <code>int</code> </p> <code>speed_in</code> <p>The speed of the pump when aspirating.</p> <p> TYPE: <code>int</code> </p> <code>speed_out</code> <p>The speed of the pump when dispensing.</p> <p> TYPE: <code>int</code> </p> <code>start_speed</code> <p>The start speed of the pump.</p> <p> TYPE: <code>int</code> </p> <code>acceleration</code> <p>The acceleration of the pump.</p> <p> TYPE: <code>int</code> </p> <code>valve_position</code> <p>The valve position of the pump.</p> <p> TYPE: <code>str</code> </p> <code>init_status</code> <p>The initialization status of the pump.</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the pump.</p> <code>aspirate</code> <p>Aspirate desired volume of reagent.</p> <code>dispense</code> <p>Dispense desired volume of reagent.</p> <code>getState</code> <p>Get the settings of the pump.</p> <code>home</code> <p>Home the pump.</p> <code>setSpeed</code> <p>Set the speed of the pump.</p> <code>reverse</code> <p>Reverse the pump.</p> <code>setChannel</code> <p>Set the channel</p> <code>disconnect</code> <p>Disconnect from the device</p> <code>resetFlags</code> <p>Reset all flags to to default</p> <code>shutdown</code> <p>Shutdown procedure for tool</p> <code>cycle</code> <p>Cycle between aspirate and dispense</p> <code>empty</code> <p>Empty the channel</p> <code>fill</code> <p>Fill the channel</p> <code>rinse</code> <p>Rinse the channel with aspirate and dispense cycles</p> <p>Initialize the TriContinent class.</p> PARAMETER DESCRIPTION <code>port</code> <p>The port of the pump.</p> <p> TYPE: <code>str</code> </p> <code>capacity</code> <p>The capacity of the pump. Defaults to 1000.0.</p> <p> TYPE: <code>float</code> DEFAULT: <code>1000.0</code> </p> <code>output_right</code> <p>Whether the output valve is to the right.</p> <p> TYPE: <code>bool</code> </p> <code>channel</code> <p>The channel of the pump. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>verbose</code> <p>Whether to output extra information. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>simulation</code> <p>Whether to simulate the pump. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.acceleration","title":"acceleration  <code>property</code>","text":"<pre><code>acceleration\n</code></pre> <p>Acceleration of the pump</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.init_status","title":"init_status  <code>property</code>","text":"<pre><code>init_status\n</code></pre> <p>Initialization status of the pump</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.start_speed","title":"start_speed  <code>property</code>","text":"<pre><code>start_speed\n</code></pre> <p>Start speed of the pump</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.valve_position","title":"valve_position  <code>property</code>","text":"<pre><code>valve_position\n</code></pre> <p>Valve position of the pump</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.aspirate","title":"aspirate","text":"<pre><code>aspirate(\n    volume: float,\n    speed: float | None = None,\n    reagent: str | None = None,\n    *,\n    start_speed: int | None = None,\n    pullback: bool = False,\n    delay: int = 0,\n    pause: bool = False,\n    ignore: bool = False,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Aspirate desired volume of reagent</p> PARAMETER DESCRIPTION <code>volume</code> <p>target volume</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to aspirate at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>name of reagent. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>start_speed</code> <p>start speed of the pump. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>pullback</code> <p>whether to perform pullback. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay</code> <p>time delay after aspirate. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore</code> <p>whether to aspirate reagent regardless. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>blocking</code> <p>whether to block the thread until the action is complete. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.dispense","title":"dispense","text":"<pre><code>dispense(\n    volume: float,\n    speed: float | None = None,\n    *,\n    start_speed: int | None = None,\n    blowout: bool = False,\n    delay: int = 0,\n    pause: bool = False,\n    ignore: bool = False,\n    blocking: bool = True,\n    **kwargs,\n) -&gt; bool\n</code></pre> <p>Dispense desired volume of reagent</p> PARAMETER DESCRIPTION <code>volume</code> <p>target volume</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>speed to dispense at. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>start_speed</code> <p>start speed of the pump. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>blowout</code> <p>whether perform blowout. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>delay</code> <p>time delay after dispense. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>pause</code> <p>whether to pause for user intervention. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>ignore</code> <p>whether to dispense reagent regardless. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>blocking</code> <p>whether to block the thread until the action is complete. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the action is successful</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.getState","title":"getState","text":"<pre><code>getState() -&gt; dict[str, int | str | bool]\n</code></pre> <p>Get the settings of the pump.</p> RETURNS DESCRIPTION <code>dict[str, int | str | bool]</code> <p>dict[str, int|str|bool]: The settings of the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.home","title":"home","text":"<pre><code>home()\n</code></pre> <p>Home the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.reverse","title":"reverse","text":"<pre><code>reverse()\n</code></pre> <p>Reverse the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.setChannel","title":"setChannel","text":"<pre><code>setChannel()\n</code></pre> <p>Set the channel of the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent.TriContinent.setSpeed","title":"setSpeed","text":"<pre><code>setSpeed(speed: float)\n</code></pre> <p>Set the speed of the pump.</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed of the pump.</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html","title":"Tricontinent Api","text":"<p>This module provides a class for controlling TriContinent pumps.</p> ATTRIBUTE DESCRIPTION <code>MAX_CHANNELS</code> <p>Maximum number of channels.</p> <p> TYPE: <code>int</code> </p> <code>ACCEL_MULTIPLIER</code> <p>Acceleration multiplier.</p> <p> TYPE: <code>int</code> </p> <code>BUSY</code> <p>Busy status codes.</p> <p> TYPE: <code>str</code> </p> <code>IDLE</code> <p>Idle status codes.</p> <p> TYPE: <code>str</code> </p> <code>READ_FORMAT</code> <p>Read format template.</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>Write format template.</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>Data type for the device.</p> <p> TYPE: <code>NamedTuple</code> </p> <code>BoolData</code> <p>Boolean data type for the device.</p> <p> TYPE: <code>NamedTuple</code> </p> <code>FloatData</code> <p>Float data type for the device.</p> <p> TYPE: <code>NamedTuple</code> </p> <code>IntData</code> <p>Integer data type for the device.</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>TriContinentDevice</code> <p>TriContinent pump device class.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice","title":"TriContinentDevice","text":"<pre><code>TriContinentDevice(\n    port: str | None = None,\n    baudrate: int = 9600,\n    timeout: int = 1,\n    *,\n    init_timeout: int = 1,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>SerialDevice</code></p> <p>TriContinent pump device class.</p> ATTRIBUTE DESCRIPTION <code>info</code> <p>Model and version information of the pump.</p> <p> TYPE: <code>str</code> </p> <code>model</code> <p>Model of the pump.</p> <p> TYPE: <code>str</code> </p> <code>version</code> <p>Version of the pump.</p> <p> TYPE: <code>str</code> </p> <code>channel</code> <p>Channel number of the pump.</p> <p> TYPE: <code>int</code> </p> <code>position</code> <p>Current position of the pump.</p> <p> TYPE: <code>int</code> </p> <code>status</code> <p>Status of the pump.</p> <p> TYPE: <code>int</code> </p> <code>start_speed</code> <p>Start speed of the pump.</p> <p> TYPE: <code>int</code> </p> <code>speed</code> <p>Top speed of the pump.</p> <p> TYPE: <code>int</code> </p> <code>acceleration</code> <p>Acceleration of the pump.</p> <p> TYPE: <code>int</code> </p> <code>valve_position</code> <p>Valve position of the pump.</p> <p> TYPE: <code>str</code> </p> <code>init_status</code> <p>Initialization status of the pump.</p> <p> TYPE: <code>bool</code> </p> <code>pump_config</code> <p>Pump configuration.</p> <p> TYPE: <code>str</code> </p> <code>command_buffer</code> <p>Command buffer.</p> <p> TYPE: <code>str</code> </p> <code>output_right</code> <p>Output side of the pump.</p> <p> TYPE: <code>bool</code> </p> <code>max_position</code> <p>Maximum position of the pump.</p> <p> TYPE: <code>int</code> </p> METHOD DESCRIPTION <code>connect</code> <p>Connect to the pump</p> <code>query</code> <p>Query the pump</p> <code>setChannel</code> <p>Set the channel of the pump</p> <code>getStatus</code> <p>Get the status of the pump</p> <code>getPosition</code> <p>Get the current position of the pump</p> <code>getInfo</code> <p>Get the model and version information of the pump</p> <code>getState</code> <p>Get the state of the pump</p> <code>getStartSpeed</code> <p>Get the start speed of the pump</p> <code>getTopSpeed</code> <p>Get the top speed of the pump</p> <code>getValvePosition</code> <p>Get the valve position of the pump</p> <code>getAcceleration</code> <p>Get the acceleration of the pump</p> <code>getInitStatus</code> <p>Get the initialization status of the pump</p> <code>getPumpConfig</code> <p>Get the pump configuration</p> <code>setStartSpeed</code> <p>Set the start speed of the pump</p> <code>setTopSpeed</code> <p>Set the top speed of the pump</p> <code>setValvePosition</code> <p>Set the valve position of the pump</p> <code>setAcceleration</code> <p>Set the acceleration of the pump</p> <code>initialize</code> <p>Initialize the pump</p> <code>reverse</code> <p>Reverse the pump</p> <code>wait</code> <p>Wait for a specified duration</p> <code>repeat</code> <p>Repeat the last command for a specified number of cycles</p> <code>run</code> <p>Run the command buffer</p> <code>stop</code> <p>Stop the pump</p> <code>aspirate</code> <p>Aspirate a specified number of steps</p> <code>dispense</code> <p>Dispense a specified number of steps</p> <code>move</code> <p>Move the plunger by a specified number of steps</p> <code>moveBy</code> <p>Move the plunger by a specified number of steps</p> <code>moveTo</code> <p>Move the plunger to a specified position</p> <p>Initialize the TriContinent pump device.</p> PARAMETER DESCRIPTION <code>port</code> <p>The port to connect to. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> <code>baudrate</code> <p>The baudrate of the connection. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>timeout</code> <p>The timeout for the connection. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>init_timeout</code> <p>The timeout for initialization. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>data_type</code> <p>The data type for the device. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>The read format for the device. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>The write format for the device. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>Whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>Whether to print verbose output. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.max_position","title":"max_position  <code>property</code>","text":"<pre><code>max_position: int\n</code></pre> <p>Maximum position of the pump</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.aspirate","title":"aspirate","text":"<pre><code>aspirate(\n    steps: int,\n    *,\n    blocking: bool = True,\n    immediate: bool = True,\n)\n</code></pre> <p>Aspirate a specified number of steps.</p> PARAMETER DESCRIPTION <code>steps</code> <p>The number of steps to aspirate.</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>Whether to block until the command is executed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.dispense","title":"dispense","text":"<pre><code>dispense(\n    steps: int,\n    *,\n    blocking: bool = True,\n    immediate: bool = True,\n)\n</code></pre> <p>Dispense a specified number of steps.</p> PARAMETER DESCRIPTION <code>steps</code> <p>The number of steps to dispense.</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>Whether to block until the command is executed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getAcceleration","title":"getAcceleration","text":"<pre><code>getAcceleration() -&gt; int\n</code></pre> <p>Get the acceleration of the pump.</p> RETURNS DESCRIPTION <code>int</code> <p>The acceleration of the pump.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getInfo","title":"getInfo","text":"<pre><code>getInfo() -&gt; str\n</code></pre> <p>Get the model and version information of the pump.</p> RETURNS DESCRIPTION <code>str</code> <p>The model and version information of the pump.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getInitStatus","title":"getInitStatus","text":"<pre><code>getInitStatus() -&gt; bool\n</code></pre> <p>Get the initialization status of the pump.</p> RETURNS DESCRIPTION <code>bool</code> <p>The initialization status of the pump.</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getPosition","title":"getPosition","text":"<pre><code>getPosition() -&gt; int\n</code></pre> <p>Get the current position of the pump.</p> RETURNS DESCRIPTION <code>int</code> <p>The current position of the pump.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getStartSpeed","title":"getStartSpeed","text":"<pre><code>getStartSpeed() -&gt; int\n</code></pre> <p>Get the start speed of the pump.</p> RETURNS DESCRIPTION <code>int</code> <p>The start speed of the pump.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getState","title":"getState","text":"<pre><code>getState() -&gt; dict[str, int | bool]\n</code></pre> <p>Get the state of the pump.</p> RETURNS DESCRIPTION <code>dict[str, int | bool]</code> <p>dict[str, int|bool]: A dictionary containing the state of the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getStatus","title":"getStatus","text":"<pre><code>getStatus() -&gt; tuple[bool, str]\n</code></pre> <p>Get the status of the pump.</p> RETURNS DESCRIPTION <code>tuple[bool, str]</code> <p>tuple[bool,str]: A tuple containing the busy status and the error code.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getTopSpeed","title":"getTopSpeed","text":"<pre><code>getTopSpeed() -&gt; int\n</code></pre> <p>Get the top speed of the pump.</p> RETURNS DESCRIPTION <code>int</code> <p>The top speed of the pump.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.getValvePosition","title":"getValvePosition","text":"<pre><code>getValvePosition() -&gt; str\n</code></pre> <p>Get the valve position of the pump.</p> RETURNS DESCRIPTION <code>str</code> <p>The valve position of the pump.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.initialize","title":"initialize","text":"<pre><code>initialize(\n    output_right: bool | None = None,\n    *,\n    immediate: bool = True,\n)\n</code></pre> <p>Initialize the pump.</p> PARAMETER DESCRIPTION <code>output_right</code> <p>Whether the output is on the right side.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>None</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.move","title":"move","text":"<pre><code>move(\n    steps: int,\n    *,\n    blocking: bool = True,\n    immediate: bool = True,\n)\n</code></pre> <p>Move the plunger by a specified number of steps.</p> PARAMETER DESCRIPTION <code>steps</code> <p>The number of steps to move.</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>Whether to block until the command is executed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.moveBy","title":"moveBy","text":"<pre><code>moveBy(\n    steps: int,\n    *,\n    blocking: bool = True,\n    immediate: bool = True,\n)\n</code></pre> <p>Move the plunger by a specified number of steps.</p> PARAMETER DESCRIPTION <code>steps</code> <p>The number of steps to move.</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>Whether to block until the command is executed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.moveTo","title":"moveTo","text":"<pre><code>moveTo(\n    position: int,\n    *,\n    blocking: bool = True,\n    immediate: bool = True,\n)\n</code></pre> <p>Move the plunger to a specified position.</p> PARAMETER DESCRIPTION <code>position</code> <p>The position to move to.</p> <p> TYPE: <code>int</code> </p> <code>blocking</code> <p>Whether to block until the command is executed. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.repeat","title":"repeat","text":"<pre><code>repeat(cycles: int)\n</code></pre> <p>Repeat the last command for a specified number of cycles.</p> PARAMETER DESCRIPTION <code>cycles</code> <p>The number of cycles to repeat the last command.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.reverse","title":"reverse","text":"<pre><code>reverse(*, immediate: bool = True)\n</code></pre> <p>Reverse the pump.</p> PARAMETER DESCRIPTION <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.run","title":"run","text":"<pre><code>run(command: str | None = None)\n</code></pre> <p>Run the command buffer.</p> PARAMETER DESCRIPTION <code>command</code> <p>The command to run. Defaults to None.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.setAcceleration","title":"setAcceleration","text":"<pre><code>setAcceleration(\n    acceleration: int, *, immediate: bool = True\n)\n</code></pre> <p>Set the acceleration of the pump.</p> PARAMETER DESCRIPTION <code>acceleration</code> <p>The acceleration of the pump.</p> <p> TYPE: <code>int</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.setChannel","title":"setChannel","text":"<pre><code>setChannel(channel: int)\n</code></pre> <p>Set the channel of the pump.</p> PARAMETER DESCRIPTION <code>channel</code> <p>The channel number of the pump.</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.setStartSpeed","title":"setStartSpeed","text":"<pre><code>setStartSpeed(speed: int, *, immediate: bool = True)\n</code></pre> <p>Set the start speed of the pump.</p> PARAMETER DESCRIPTION <code>speed</code> <p>The start speed of the pump.</p> <p> TYPE: <code>int</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.setTopSpeed","title":"setTopSpeed","text":"<pre><code>setTopSpeed(speed: int, *, immediate: bool = True)\n</code></pre> <p>Set the top speed of the pump.</p> PARAMETER DESCRIPTION <code>speed</code> <p>The top speed of the pump.</p> <p> TYPE: <code>int</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.setValvePosition","title":"setValvePosition","text":"<pre><code>setValvePosition(valve: str, *, immediate: bool = True)\n</code></pre> <p>Set the valve position of the pump.</p> PARAMETER DESCRIPTION <code>valve</code> <p>The valve position of the pump.</p> <p> TYPE: <code>str</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the pump.</p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_api.html#controllably.Transfer.Liquid.Pump.TriContinent.tricontinent_api.tricontinent_api.TriContinentDevice.wait","title":"wait","text":"<pre><code>wait(duration: int | float, *, immediate: bool = True)\n</code></pre> <p>Wait for a specified duration.</p> PARAMETER DESCRIPTION <code>duration</code> <p>The duration to wait.</p> <p> TYPE: <code>int | float</code> </p> <code>immediate</code> <p>Whether to execute the command immediately. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/Transfer/Liquid/Pump/TriContinent/tricontinent_api/tricontinent_lib.html","title":"Tricontinent Lib","text":"<p>This module holds the references for syringe pumps from TriContinent.</p> CLASS DESCRIPTION <code>ErrorCode</code> <p>Enum for error codes returned by the pump</p> <code>StatusCode</code> <p>Enum for status codes returned by the pump</p>"},{"location":"site/api/Transfer/Substrate/gripper_mixin.html","title":"Gripper Mixin","text":"<p>This module contains the GripperMixin class.</p> ATTRIBUTE DESCRIPTION <code>GRIPPER_ON_DELAY</code> <p>delay for gripper on</p> <p> TYPE: <code>int</code> </p> <code>GRIPPER_OFF_DELAY</code> <p>delay for gripper off</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>GripperMixin</code> <p>Mixin class for gripper control</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/Transfer/Substrate/gripper_mixin.html#controllably.Transfer.Substrate.gripper_mixin.GripperMixin","title":"GripperMixin","text":"<pre><code>GripperMixin(*args, **kwargs)\n</code></pre> <p>Mixin class for vacuum control</p> METHOD DESCRIPTION <code>drop</code> <p>Drop to release object</p> <code>grab</code> <p>Grab to secure object</p> <code>toggleGrip</code> <p>Toggle grip</p>"},{"location":"site/api/Transfer/Substrate/gripper_mixin.html#controllably.Transfer.Substrate.gripper_mixin.GripperMixin.drop","title":"drop","text":"<pre><code>drop(wait: float | None = None)\n</code></pre> <p>Drop to release object</p> PARAMETER DESCRIPTION <code>wait</code> <p>Time to wait after dropping. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Transfer/Substrate/gripper_mixin.html#controllably.Transfer.Substrate.gripper_mixin.GripperMixin.grab","title":"grab","text":"<pre><code>grab(wait: float | None = None)\n</code></pre> <p>Grab to secure object</p> PARAMETER DESCRIPTION <code>wait</code> <p>Time to wait after grabbing. Defaults to None</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/Transfer/Substrate/gripper_mixin.html#controllably.Transfer.Substrate.gripper_mixin.GripperMixin.toggleGrip","title":"toggleGrip","text":"<pre><code>toggleGrip(on: bool)\n</code></pre> <p>Toggle grip</p> PARAMETER DESCRIPTION <code>on</code> <p>True to turn on, False to turn off</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html","title":"Camera","text":"<p>This module provides a Camera class for handling camera feed</p> CLASS DESCRIPTION <code>Camera</code> <p>Camera class for handling camera feed</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera","title":"Camera","text":"<pre><code>Camera(\n    *,\n    connection_details: dict | None = None,\n    init_timeout: int = 1,\n    buffer_size: int = 2000,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>Camera class for handling camera feed</p> ATTRIBUTE DESCRIPTION <code>placeholder</code> <p>Placeholder image</p> <p> TYPE: <code>ndarray</code> </p> <code>transforms</code> <p>List of transformations</p> <p> TYPE: <code>list[tuple[Callable[[ndarray, Any], ndarray], Iterable | None, Mapping | None]]</code> </p> <code>callbacks</code> <p>List of callbacks</p> <p> TYPE: <code>list[tuple[Callable[[ndarray, Any], ndarray], Iterable | None, Mapping | None]]</code> </p> <code>connection</code> <p>Connection to the device</p> <p> TYPE: <code>Any | None</code> </p> <code>connection_details</code> <p>Connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>flags</code> <p>Flags for the device</p> <p> TYPE: <code>SimpleNamespace</code> </p> <code>init_timeout</code> <p>Timeout for initialization</p> <p> TYPE: <code>int</code> </p> <code>buffer</code> <p>Buffer for storing frames</p> <p> TYPE: <code>deque</code> </p> <code>data_queue</code> <p>Queue for storing data</p> <p> TYPE: <code>Queue</code> </p> <code>show_event</code> <p>Event for showing the stream</p> <p> TYPE: <code>Event</code> </p> <code>stream_event</code> <p>Event for streaming</p> <p> TYPE: <code>Event</code> </p> <code>threads</code> <p>Threads for streaming and processing data</p> <p> TYPE: <code>dict</code> </p> <code>verbose</code> <p>Verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>feed</code> <p>Video feed</p> <p> TYPE: <code>VideoCapture</code> </p> <code>is_connected</code> <p>Whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>Verbosity of class</p> <p> TYPE: <code>bool</code> </p> <code>frame_rate</code> <p>Frame rate of camera feed</p> <p> TYPE: <code>int | float</code> </p> <code>frame_size</code> <p>Frame size of camera feed</p> <p> TYPE: <code>tuple[int, int]</code> </p> METHOD DESCRIPTION <code>checkDeviceConnection</code> <p>Check the connection to the device</p> <code>connect</code> <p>Connect to the device</p> <code>connectFeed</code> <p>Connect to the camera feed</p> <code>disconnect</code> <p>Disconnect from the device</p> <code>disconnectFeed</code> <p>Disconnect from the camera feed</p> <code>setFrameRate</code> <p>Set the frame rate of camera feed</p> <code>setFrameSize</code> <p>Set the resolution of camera feed</p> <code>decodeBytesToFrame</code> <p>Decode byte array of image</p> <code>encodeFrameToBytes</code> <p>Encode image into byte array</p> <code>loadImageFile</code> <p>Load an image from file</p> <code>saveFrame</code> <p>Save image to file</p> <code>saveFramesToVideo</code> <p>Save frames to video file</p> <code>transformFrame</code> <p>Transform the frame</p> <code>processFrame</code> <p>Process the frame</p> <code>getFrame</code> <p>Get image from camera feed</p> <code>show</code> <p>Show image in window</p> <code>checkDeviceBuffer</code> <p>Check the connection buffer</p> <code>clear</code> <p>Clear the input and output buffers</p> <code>read</code> <p>Read data from the device</p> <code>showStream</code> <p>Show the stream</p> <code>startStream</code> <p>Start the stream</p> <code>stopStream</code> <p>Stop the stream</p> <code>stream</code> <p>Toggle the stream</p> <p>Initialize the camera object</p> PARAMETER DESCRIPTION <code>connection_details</code> <p>connection details for the device. Defaults to None.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>init_timeout</code> <p>timeout for initialization. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>buffer_size</code> <p>size of the buffer. Defaults to 2000.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2000</code> </p> <code>simulation</code> <p>whether to simulate the camera feed. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbosity of the class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.feed","title":"feed  <code>property</code> <code>writable</code>","text":"<pre><code>feed: VideoCapture\n</code></pre> <p>Video feed</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.frame_rate","title":"frame_rate  <code>property</code>","text":"<pre><code>frame_rate: int | float\n</code></pre> <p>Frame rate of camera feed</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.frame_size","title":"frame_size  <code>property</code>","text":"<pre><code>frame_size: tuple[int, int]\n</code></pre> <p>Frame size of camera feed</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.checkDeviceBuffer","title":"checkDeviceBuffer","text":"<pre><code>checkDeviceBuffer() -&gt; bool\n</code></pre> <p>Check the connection buffer</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the device buffer is available</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.checkDeviceConnection","title":"checkDeviceConnection","text":"<pre><code>checkDeviceConnection() -&gt; bool\n</code></pre> <p>Check the connection to the device</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.connectFeed","title":"connectFeed","text":"<pre><code>connectFeed()\n</code></pre> <p>Connect to the camera feed</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.decodeBytesToFrame","title":"decodeBytesToFrame  <code>staticmethod</code>","text":"<pre><code>decodeBytesToFrame(bytearray: bytes) -&gt; ndarray\n</code></pre> <p>Decode byte array of image</p> PARAMETER DESCRIPTION <code>bytearray</code> <p>byte array of image</p> <p> TYPE: <code>bytes</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: image array of decoded byte array</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.disconnectFeed","title":"disconnectFeed","text":"<pre><code>disconnectFeed()\n</code></pre> <p>Disconnect from the camera feed</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.encodeFrameToBytes","title":"encodeFrameToBytes  <code>staticmethod</code>","text":"<pre><code>encodeFrameToBytes(\n    frame: ndarray, extension: str = \".png\"\n) -&gt; bytes\n</code></pre> <p>Encode image into byte array</p> PARAMETER DESCRIPTION <code>frame</code> <p>image array to be encoded</p> <p> TYPE: <code>ndarray</code> </p> <code>extension</code> <p>image format to encode to. Defaults to '.png'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'.png'</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>byte array of image</p> <p> TYPE: <code>bytes</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.getFrame","title":"getFrame","text":"<pre><code>getFrame(latest: bool = False) -&gt; tuple[bool, ndarray]\n</code></pre> <p>Get image from camera feed</p> PARAMETER DESCRIPTION <code>latest</code> <p>whether to get the latest image. Default to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tuple[bool, ndarray]</code> <p>tuple[bool, np.ndarray]: (whether an image is obtained, image array)</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.loadImageFile","title":"loadImageFile  <code>staticmethod</code>","text":"<pre><code>loadImageFile(filename: str) -&gt; ndarray\n</code></pre> <p>Load an image from file</p> PARAMETER DESCRIPTION <code>filename</code> <p>image filename</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: image array from file</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.processFrame","title":"processFrame  <code>staticmethod</code>","text":"<pre><code>processFrame(\n    frame: ndarray,\n    callbacks: Iterable[\n        tuple[\n            Callable[[ndarray, Any], ndarray],\n            Iterable | None,\n            Mapping | None,\n        ]\n    ]\n    | None = None,\n) -&gt; ndarray\n</code></pre> <p>Process the frame</p> PARAMETER DESCRIPTION <code>frame</code> <p>image array to be processed</p> <p> TYPE: <code>ndarray</code> </p> <code>callbacks</code> <p>list of callbacks. Defaults to None.</p> <p> TYPE: <code>list[tuple[Callable[[np.ndarray,Any], np.ndarray], Iterable|None, Mapping|None]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: processed image array</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.read","title":"read","text":"<pre><code>read() -&gt; tuple[bool, ndarray]\n</code></pre> <p>Read data from the device</p> RETURNS DESCRIPTION <code>tuple[bool, ndarray]</code> <p>tuple[bool, np.ndarray]: (whether data is received, data)</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.saveFrame","title":"saveFrame  <code>staticmethod</code>","text":"<pre><code>saveFrame(\n    frame: ndarray, filename: str | None = None\n) -&gt; bool\n</code></pre> <p>Save image to file</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array to be saved</p> <p> TYPE: <code>ndarray</code> </p> <code>filename</code> <p>filename to save to. Defaults to 'image.png'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the image array is successfully saved</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.saveFramesToVideo","title":"saveFramesToVideo  <code>staticmethod</code>","text":"<pre><code>saveFramesToVideo(\n    frames: Iterable[ndarray],\n    fps: int | float,\n    filename: str | None = None,\n) -&gt; bool\n</code></pre> <p>Save frames to video file</p> PARAMETER DESCRIPTION <code>frames</code> <p>list of frames to be saved</p> <p> TYPE: <code>list[ndarray]</code> </p> <code>fps</code> <p>frame rate of video</p> <p> TYPE: <code>int | float</code> </p> <code>filename</code> <p>filename to save to. Defaults to 'video.mp4'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the video is successfully saved</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.setFrameRate","title":"setFrameRate","text":"<pre><code>setFrameRate(fps: int | float = 30.0)\n</code></pre> <p>Set the frame rate of camera feed</p> PARAMETER DESCRIPTION <code>fps</code> <p>frame rate in frames per second. Defaults to 30.0.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>30.0</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.setFrameSize","title":"setFrameSize","text":"<pre><code>setFrameSize(size: Iterable[int] = (10000, 10000))\n</code></pre> <p>Set the resolution of camera feed</p> PARAMETER DESCRIPTION <code>size</code> <p>width and height of feed in pixels. Defaults to (10000,10000).</p> <p> TYPE: <code>tuple[int]</code> DEFAULT: <code>(10000, 10000)</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.show","title":"show","text":"<pre><code>show(\n    transforms: list[Callable[[ndarray], ndarray]]\n    | None = None,\n)\n</code></pre> <p>Show image in window</p> PARAMETER DESCRIPTION <code>transforms</code> <p>list of transformations. Defaults to None.</p> <p> TYPE: <code>list[Callable[[ndarray], ndarray]]</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.showStream","title":"showStream","text":"<pre><code>showStream(on: bool)\n</code></pre> <p>Show the stream</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to show the stream</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.startStream","title":"startStream","text":"<pre><code>startStream(\n    buffer: deque | None = None,\n    *,\n    show: bool = False,\n    sync_start: Barrier | None = None,\n)\n</code></pre> <p>Start the stream</p> PARAMETER DESCRIPTION <code>buffer</code> <p>buffer to store frames. Defaults to None.</p> <p> TYPE: <code>deque</code> DEFAULT: <code>None</code> </p> <code>show</code> <p>whether to show the stream. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sync_start</code> <p>synchronization barrier. Defaults to</p> <p> TYPE: <code>Barrier</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.stopStream","title":"stopStream","text":"<pre><code>stopStream()\n</code></pre> <p>Stop the stream</p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    buffer: deque | None = None,\n    *,\n    sync_start: Barrier | None = None,\n    **kwargs,\n)\n</code></pre> <p>Toggle the stream</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start the stream</p> <p> TYPE: <code>bool</code> </p> <code>buffer</code> <p>buffer to store frames. Defaults to None.</p> <p> TYPE: <code>deque</code> DEFAULT: <code>None</code> </p> <code>sync_start</code> <p>synchronization barrier. Defaults to None.</p> <p> TYPE: <code>Barrier</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/View/camera.html#controllably.View.camera.Camera.transformFrame","title":"transformFrame  <code>staticmethod</code>","text":"<pre><code>transformFrame(\n    frame: ndarray,\n    transforms: Iterable[\n        tuple[\n            Callable[[ndarray, Any], ndarray],\n            Iterable | None,\n            Mapping | None,\n        ]\n    ]\n    | None = None,\n) -&gt; ndarray\n</code></pre> <p>Transform the frame</p> PARAMETER DESCRIPTION <code>frame</code> <p>image array to be transformed</p> <p> TYPE: <code>ndarray</code> </p> <code>transforms</code> <p>list of transformations. Defaults to None.</p> <p> TYPE: <code>list[tuple[Callable[[ndarray, Any], ndarray], Iterable | None, Mapping | None]]</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: transformed image array</p>"},{"location":"site/api/View/image.html","title":"Image","text":"<p>This module holds the base class for image data.</p> FUNCTION DESCRIPTION <code>addText</code> <p>Add text to the image</p> <code>annotate</code> <p>Annotate the image to label identified targets</p> <code>blur</code> <p>Blur the image</p> <code>convolve</code> <p>Perform convolution on image</p> <code>crosshair</code> <p>Add crosshair in the middle of image</p> <code>process</code> <p>Process the image</p> <code>removeNoise</code> <p>Remove noise from image</p> <code>rotate</code> <p>Rotate a 2D array of multiples of 90 degrees, clockwise</p>"},{"location":"site/api/View/image.html#controllably.View.image.addText","title":"addText","text":"<pre><code>addText(\n    frame: ndarray, text: str, position: tuple[int]\n) -&gt; ndarray\n</code></pre> <p>Add text to the image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>text</code> <p>text to be added</p> <p> TYPE: <code>str</code> </p> <code>position</code> <p>x,y position of where to place the text</p> <p> TYPE: <code>tuple[int]</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.annotate","title":"annotate","text":"<pre><code>annotate(\n    frame: ndarray, index: int, dimensions: tuple[int]\n) -&gt; ndarray\n</code></pre> <p>Annotate the image to label identified targets</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>index</code> <p>index of target</p> <p> TYPE: <code>int</code> </p> <code>dimensions</code> <p>list of x,y,w,h</p> <p> TYPE: <code>tuple[int]</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.blur","title":"blur","text":"<pre><code>blur(frame: ndarray, blur_kernel: int = 3) -&gt; ndarray\n</code></pre> <p>Blur the image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>blur_kernel</code> <p>level of blurring, odd numbers only, minimum value of 3. Defaults to 3.</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.convolve","title":"convolve","text":"<pre><code>convolve(frame: ndarray) -&gt; ndarray\n</code></pre> <p>Perform convolution on image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.crosshair","title":"crosshair","text":"<pre><code>crosshair(frame: ndarray) -&gt; ndarray\n</code></pre> <p>Add crosshair in the middle of image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.process","title":"process","text":"<pre><code>process(\n    frame: ndarray,\n    alpha: float,\n    beta: float,\n    blur_kernel: int = 3,\n) -&gt; ndarray\n</code></pre> <p>Process the image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>alpha</code> <p>alpha value</p> <p> TYPE: <code>float</code> </p> <code>beta</code> <p>beta value</p> <p> TYPE: <code>float</code> </p> <code>blur_kernel</code> <p>level of blurring, odd numbers only, minimum value of 3. Defaults to 3.</p> <p> TYPE: <code>int</code> DEFAULT: <code>3</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.removeNoise","title":"removeNoise","text":"<pre><code>removeNoise(\n    frame: ndarray, open_iter: int = 0, close_iter: int = 0\n) -&gt; ndarray\n</code></pre> <p>Remove noise from image</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>open_iter</code> <p>opening iteration. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>close_iter</code> <p>closing iteration. Defaults to 0.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/image.html#controllably.View.image.rotate","title":"rotate","text":"<pre><code>rotate(frame: ndarray, angle: int) -&gt; ndarray\n</code></pre> <p>Rotate a 2D array of multiples of 90 degrees, clockwise</p> PARAMETER DESCRIPTION <code>frame</code> <p>frame array</p> <p> TYPE: <code>ndarray</code> </p> <code>angle</code> <p>90, 180, or 270 degrees</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>ndarray</code> <p>np.ndarray: frame array</p>"},{"location":"site/api/View/placeholder.html","title":"Placeholder","text":""},{"location":"site/api/View/Thermal/Flir/ax8.html","title":"Ax8","text":"<p>This module contains the AX8 camera class</p> ATTRIBUTE DESCRIPTION <code>BYTE_SIZE</code> <p>size of data packet</p> <p> TYPE: <code>int</code> </p> <code>MODBUS_PORT</code> <p>Modbus port</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>AX8</code> <p>AX8 camera class</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8","title":"AX8","text":"<pre><code>AX8(\n    host: str,\n    *,\n    port: int = MODBUS_PORT,\n    encoding: str = \"avc\",\n    overlay: bool = False,\n    connection_details: dict | None = None,\n    init_timeout: int = 1,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Camera</code></p> <p>AX8 camera class</p> ATTRIBUTE DESCRIPTION <code>host</code> <p>camera IP address</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>Modbus port</p> <p> TYPE: <code>int</code> </p> <code>modbus</code> <p>Modbus connection</p> <p> TYPE: <code>ModbusClient</code> </p> <code>connection</code> <p>Modbus connection</p> <p> TYPE: <code>ModbusClient</code> </p> <code>spotmeter_parameters</code> <p>spotmeter parameters</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>checkDeviceConnection</code> <p>check if the camera and feed are connected</p> <code>connect</code> <p>connect to camera and feed</p> <code>connectCamera</code> <p>connect to camera</p> <code>connectFeed</code> <p>connect to feed</p> <code>disconnect</code> <p>disconnect from camera and feed</p> <code>disconnectCamera</code> <p>disconnect from camera</p> <code>disconnectFeed</code> <p>disconnect from feed</p> <code>configureSpotmeter</code> <p>set the temperature calculation parameters when enabling a spotmeter</p> <code>disableSpotmeter</code> <p>disable spotmeters with given instance IDs</p> <code>enableSpotmeter</code> <p>enable spotmeters with given instance IDs</p> <code>getCutline</code> <p>get a 1D array of temperature values along the given cutline</p> <code>getInternalTemperature</code> <p>get the internal temperature of the camera</p> <code>getSpotPositions</code> <p>get the positions for specified spotmeters</p> <code>getSpotTemperatures</code> <p>get temperature readings for specified spotmeters</p> <code>invertPalette</code> <p>invert the palette of the feed</p> <code>decodeModbus</code> <p>parse values from reading modbus holding registers</p> <code>encodeModbus</code> <p>format value to create data packet</p> <p>Initialize the AX8 object</p> PARAMETER DESCRIPTION <code>host</code> <p>camera IP address</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>Modbus port. Defaults to 502.</p> <p> TYPE: <code>int</code> DEFAULT: <code>MODBUS_PORT</code> </p> <code>encoding</code> <p>feed encoding. Defaults to 'avc'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'avc'</code> </p> <code>overlay</code> <p>whether to overlay data. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>connection_details</code> <p>connection details. Defaults to None.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>init_timeout</code> <p>initial timeout. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>simulation</code> <p>whether to simulate the camera. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>whether to print debug messages. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.host","title":"host  <code>property</code> <code>writable</code>","text":"<pre><code>host: str\n</code></pre> <p>Camera IP address</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.modbus","title":"modbus  <code>property</code> <code>writable</code>","text":"<pre><code>modbus: ModbusClient\n</code></pre> <p>Modbus connection</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.port","title":"port  <code>property</code> <code>writable</code>","text":"<pre><code>port: int\n</code></pre> <p>Modbus port</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.configureSpotmeter","title":"configureSpotmeter","text":"<pre><code>configureSpotmeter(\n    reflected_temperature: float | None = None,\n    emissivity: float | None = None,\n    distance: float | None = None,\n)\n</code></pre> <p>Set the temperature calculation parameters when enabling a spotmeter</p> PARAMETER DESCRIPTION <code>reflected_temperature</code> <p>reflected temperature in Kelvin. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>emissivity</code> <p>emissivity between 0.001 and 1. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>distance</code> <p>distance in metres, at least 0.2. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.connectCamera","title":"connectCamera","text":"<pre><code>connectCamera()\n</code></pre> <p>Connect to camera</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.decodeModbus","title":"decodeModbus  <code>staticmethod</code>","text":"<pre><code>decodeModbus(data: Sequence[int], is_int: bool) -&gt; tuple\n</code></pre> <p>Parse values from reading modbus holding registers</p> PARAMETER DESCRIPTION <code>data</code> <p>data packet</p> <p> TYPE: <code>list[int]</code> </p> <code>is_int</code> <p>whether the expected value is an integer (as opposed to a float)</p> <p> TYPE: <code>bool</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>unpacked values</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.disableSpotmeter","title":"disableSpotmeter","text":"<pre><code>disableSpotmeter(instances: list)\n</code></pre> <p>Disable spotmeters with given instance IDs</p> PARAMETER DESCRIPTION <code>instances</code> <p>list of instance IDs</p> <p> TYPE: <code>list</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.disconnectCamera","title":"disconnectCamera","text":"<pre><code>disconnectCamera()\n</code></pre> <p>Disconnect from camera</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.enableSpotmeter","title":"enableSpotmeter","text":"<pre><code>enableSpotmeter(\n    instances: dict[int, tuple[int, int]],\n    use_local_params: bool = True,\n)\n</code></pre> <p>Enable spotmeters with given instance IDs, for up to 5 individual spotmeters Spotmeter position range is from (2,2) to (78,58). The lower left corner is pixel (2,58).</p> PARAMETER DESCRIPTION <code>instances</code> <p>dictionary of instance and position tuples, {instance_id: (spot_x, spot_y)}</p> <p> TYPE: <code>dict[int, tuple[int, int]]</code> </p> <code>use_local_params</code> <p>Each spotmeter can use its own set of local parameters. If set to false, the global parameters will be used by the camera. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.encodeModbus","title":"encodeModbus  <code>staticmethod</code>","text":"<pre><code>encodeModbus(value: bool | float | int) -&gt; list[int]\n</code></pre> <p>Format value to create data packet</p> PARAMETER DESCRIPTION <code>value</code> <p>target value</p> <p> TYPE: <code>Union[bool, float, int]</code> </p> RETURNS DESCRIPTION <code>list[int]</code> <p>list[int]: data packet</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.getCutline","title":"getCutline","text":"<pre><code>getCutline(\n    x: int | None = None,\n    y: int | None = None,\n    unit_celsius: bool = True,\n    reflected_temperature: float | None = None,\n    emissivity: float | None = None,\n    distance: float | None = None,\n) -&gt; ndarray | None\n</code></pre> <p>Get a 1D array of temperature values along the given cutline, either along given X or Y</p> PARAMETER DESCRIPTION <code>x</code> <p>cutline position along X. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>y</code> <p>cutline position along Y. Defaults to None.</p> <p> TYPE: <code>Optional[int]</code> DEFAULT: <code>None</code> </p> <code>unit_celsius</code> <p>whether to return the temperatures in Celsius. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>reflected_temperature</code> <p>reflected temperature in Kelvin. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>emissivity</code> <p>emissivity between 0.001 and 1. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> <code>distance</code> <p>distance in metres, at least 0.2. Defaults to None.</p> <p> TYPE: <code>float | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>ndarray | None</code> <p>np.ndarray|None: array of temperature values along cutline</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.getInternalTemperature","title":"getInternalTemperature","text":"<pre><code>getInternalTemperature() -&gt; float\n</code></pre> <p>Get the internal temperature of the camera</p> RETURNS DESCRIPTION <code>float</code> <p>internal temperature in Kelvin</p> <p> TYPE: <code>float</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.getSpotPositions","title":"getSpotPositions","text":"<pre><code>getSpotPositions(\n    instances: list,\n) -&gt; dict[int, tuple[int, int]]\n</code></pre> <p>Get the positions for specified spotmeters</p> PARAMETER DESCRIPTION <code>instances</code> <p>list of instance IDs</p> <p> TYPE: <code>list</code> </p> RETURNS DESCRIPTION <code>dict[int, tuple[int, int]]</code> <p>dict[int, tuple[int,int]]: dictionary of spotmeter positions, {instance_id: (spot_x, spot_y)}</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.getSpotTemperatures","title":"getSpotTemperatures","text":"<pre><code>getSpotTemperatures(\n    instances: list, unit_celsius: bool = True\n) -&gt; dict[int, float]\n</code></pre> <p>Get temperature readings for specified spotmeters</p> PARAMETER DESCRIPTION <code>instances</code> <p>list of instance IDs</p> <p> TYPE: <code>list</code> </p> <code>unit_celsius</code> <p>whether to return the temperatures in Celsius. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict[int, float]</code> <p>dict[int, float]: dictionary of spotmeter temperatures, {instance_id: temperature}</p>"},{"location":"site/api/View/Thermal/Flir/ax8.html#controllably.View.Thermal.Flir.ax8.AX8.invertPalette","title":"invertPalette","text":"<pre><code>invertPalette(blue_cold: bool = True)\n</code></pre> <p>Invert the palette of the feed</p> PARAMETER DESCRIPTION <code>blue_cold</code> <p>whether to set the palette to blue cold. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/View/Thermal/Flir/ax8_api/ax8_lib.html","title":"Ax8 Lib","text":"<p>This module holds the references for AX8 cameras from FLIR.</p> CLASS DESCRIPTION <code>SpotMeterRegs</code> <p>Contains register addresses for the spot meter functionality.</p> <code>BoxRegs</code> <p>Contains register addresses for the box functionality.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/core/compound.html","title":"Compound","text":"<p>This module contains classes to create compound tools.</p> <p>The distinction between Compound, Ensemble, Combined and Multichannel tools  is presented in the table below:</p> ClassDevice(s)Components CompoundMultiple connectionDifferent parts EnsembleMultiple connectionDuplicate parts CombinedSingle connectionDifferent parts MultichannelSingle connectionDuplicate parts CLASS DESCRIPTION <code>Part</code> <p>Protocol for Part (i.e. component tools)</p> <code>Compound</code> <p>Compound class is an aggregation of multiple part tools</p> <code>Ensemble</code> <p>Ensemble class is an aggregation of duplicate part tools to form multiple channels</p> <code>Combined</code> <p>Combined class is an composition of multiple part tools</p> <code>Multichannel</code> <p>Multichannel class is an composition of duplicate part tools to form multiple channels</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined","title":"Combined","text":"<pre><code>Combined(\n    *args,\n    parts: dict[str, Part],\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>Combined class is an composition of multiple part tools. Do not instantiate this class directly. Subclass this class to create a specific Combined tool.</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined--constructor","title":"Constructor:","text":"<pre><code>parts (dict[str,Part]): dictionary of parts\nverbose (bool, optional): verbosity of class. Defaults to False.\n</code></pre> ATTRIBUTE DESCRIPTION <code>device</code> <p>device object</p> <p> TYPE: <code>Device</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>parts</code> <p>namespace of parts</p> <p> TYPE: <code>SimpleNamespace[str, Part]</code> </p> <code>flags</code> <p>flags of class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether any part is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether all parts are connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>fromConfig</code> <p>factory method to create Combined from configuration dictionary</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown the device</p> <p>Initialise Combined class</p> PARAMETER DESCRIPTION <code>parts</code> <p>dictionary of parts</p> <p> TYPE: <code>dict[str, Part]</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details\n</code></pre> <p>Connection details for the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy\n</code></pre> <p>Whether any part is busy</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether all parts are connected</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.parts","title":"parts  <code>property</code>","text":"<pre><code>parts: SimpleNamespace[str, Part]\n</code></pre> <p>Namespace of parts</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.fromConfig","title":"fromConfig  <code>classmethod</code>","text":"<pre><code>fromConfig(config: dict) -&gt; Type[Combined]\n</code></pre> <p>Factory method to create Combined from configuration dictionary</p> PARAMETER DESCRIPTION <code>config</code> <p>configuration dictionary</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>Type[Combined]</code> <p>Type[Combined]: instance of Combined (or its subclasses)</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Combined.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound","title":"Compound","text":"<pre><code>Compound(\n    *args,\n    parts: dict[str, Part],\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>Compound class is an aggregation of multiple part tools. Do not instantiate this class directly. Subclass this class to create a specific Compound tool.</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound--constructor","title":"Constructor:","text":"<pre><code>parts (dict[str,Part]): dictionary of parts\nverbose (bool, optional): verbosity of class. Defaults to False.\n</code></pre> ATTRIBUTE DESCRIPTION <code>connection_details</code> <p>connection details of each part</p> <p> TYPE: <code>dict</code> </p> <code>parts</code> <p>namespace of parts</p> <p> TYPE: <code>SimpleNamespace[str, Part]</code> </p> <code>flags</code> <p>flags of class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether any part is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether all parts are connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>fromConfig</code> <p>factory method to create Compound from configuration dictionary</p> <code>connect</code> <p>connect to each component Part</p> <code>disconnect</code> <p>disconnect from each component Part</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown each component Part</p> <p>Initialise Compound class</p> PARAMETER DESCRIPTION <code>parts</code> <p>dictionary of parts</p> <p> TYPE: <code>dict[str, Part]</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.connection_details","title":"connection_details  <code>property</code>","text":"<pre><code>connection_details\n</code></pre> <p>Connection details of each part</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.is_busy","title":"is_busy  <code>property</code>","text":"<pre><code>is_busy\n</code></pre> <p>Whether any part is busy</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected\n</code></pre> <p>Whether all parts are connected</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.parts","title":"parts  <code>property</code>","text":"<pre><code>parts: SimpleNamespace[str, Part]\n</code></pre> <p>Namespace of parts</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to each component Part</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from each component Part</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.fromConfig","title":"fromConfig  <code>classmethod</code>","text":"<pre><code>fromConfig(config: dict) -&gt; Compound\n</code></pre> <p>Factory method to create Compound from configuration dictionary</p> PARAMETER DESCRIPTION <code>config</code> <p>configuration dictionary</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>Compound</code> <p>instance of Compound (or its subclasses)</p> <p> TYPE: <code>Compound</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Compound.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown each component Part</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble","title":"Ensemble","text":"<pre><code>Ensemble(\n    channels: Sequence[int] | None = None,\n    details: dict | Sequence[dict] | None = None,\n    *args,\n    parts: dict[str, Part] | None = None,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Compound</code></p> <p>Ensemble class is an aggregation of duplicate part tools to form multiple channels. Do not instantiate this class directly. Use the factory method to generate the desired class first.</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble--constructor","title":"Constructor:","text":"<pre><code>channels (Sequence[int] | None, optional): sequence of channels. Defaults to None.\ndetails (dict | Sequence[dict] | None, optional): dictionary or sequence of dictionaries of part details. Defaults to None.\nparts (dict[str,Part] | None, optional): dictionary of parts. Defaults to None.\nverbose (bool, optional): verbosity of class. Defaults to False.\n</code></pre> ATTRIBUTE DESCRIPTION <code>channels</code> <p>dictionary of channels</p> <p> TYPE: <code>dict[int, Part]</code> </p> <code>connection_details</code> <p>connection details of each part</p> <p> TYPE: <code>dict</code> </p> <code>parts</code> <p>namespace of parts</p> <p> TYPE: <code>SimpleNamespace[str, Part]</code> </p> <code>flags</code> <p>flags of class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether any part is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether all parts are connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>createParts</code> <p>factory method to instantiate Ensemble from channels and part details</p> <code>factory</code> <p>factory method to generate Ensemble class from parent class</p> <code>fromConfig</code> <p>factory method to create Compound from configuration dictionary</p> <code>parallel</code> <p>execute function in parallel on all channels</p> <code>connect</code> <p>connect to each component Part in parallel</p> <code>disconnect</code> <p>disconnect from each component Part</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown each component Part</p> <p>Initialise Ensemble class</p> PARAMETER DESCRIPTION <code>channels</code> <p>sequence of channels</p> <p> TYPE: <code>Sequence[int]</code> DEFAULT: <code>None</code> </p> <code>details</code> <p>dictionary or sequence of dictionaries of part details</p> <p> TYPE: <code>dict | Sequence[dict]</code> DEFAULT: <code>None</code> </p> <code>parts</code> <p>dictionary of parts</p> <p> TYPE: <code>dict[str, Part]</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.channels","title":"channels  <code>property</code>","text":"<pre><code>channels: dict[int, Part]\n</code></pre> <p>Dictionary of channels</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to each component Part in parallel</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.createParts","title":"createParts  <code>classmethod</code>","text":"<pre><code>createParts(\n    channels: Sequence[int],\n    details: dict | Sequence[dict],\n    *args,\n    **kwargs,\n) -&gt; dict[str, Part]\n</code></pre> <p>Factory method to instantiate Ensemble from channels and part details</p> PARAMETER DESCRIPTION <code>channels</code> <p>sequence of channels</p> <p> TYPE: <code>Sequence[int]</code> </p> <code>details</code> <p>dictionary or sequence of dictionaries of part details</p> <p> TYPE: <code>dict | Sequence[dict]</code> </p> RETURNS DESCRIPTION <code>dict[str, Part]</code> <p>dict[str,Part]: dictionary of parts</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.factory","title":"factory  <code>classmethod</code>","text":"<pre><code>factory(parent: type) -&gt; Type[Ensemble]\n</code></pre> <p>Factory method to generate Ensemble class from parent class</p> PARAMETER DESCRIPTION <code>parent</code> <p>parent class</p> <p> TYPE: <code>type</code> </p> RETURNS DESCRIPTION <code>Type[Ensemble]</code> <p>Type[Ensemble]: subclass of Ensemble class</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.fromConfig","title":"fromConfig  <code>classmethod</code>","text":"<pre><code>fromConfig(config: dict) -&gt; Ensemble\n</code></pre> <p>Factory method to create Compound from configuration dictionary</p> PARAMETER DESCRIPTION <code>config</code> <p>configuration dictionary</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>Ensemble</code> <p>instance of Compound (or its subclasses)</p> <p> TYPE: <code>Ensemble</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Ensemble.parallel","title":"parallel","text":"<pre><code>parallel(\n    method_name: str,\n    kwargs_generator: Callable[\n        [int, int, Part], dict[str, Any]\n    ]\n    | None = None,\n    *args,\n    channels: Iterable[int],\n    max_workers: int = 4,\n    timeout: int | float = 120,\n    stagger: int | float = 0.5,\n    **kwargs,\n) -&gt; dict[int, Any]\n</code></pre> <p>Execute function in parallel on all channels</p> PARAMETER DESCRIPTION <code>method_name</code> <p>method name to be executed</p> <p> TYPE: <code>str</code> </p> <code>kwargs_generator</code> <p>function to generate kwargs for each channel. Defaults to None.</p> <p> TYPE: <code>Callable[[int, int, Part], dict[str, Any]] | None</code> DEFAULT: <code>None</code> </p> <code>channels</code> <p>channels to execute on</p> <p> TYPE: <code>Iterable[int]</code> </p> <code>max_workers</code> <p>maximum number of workers. Defaults to 4.</p> <p> TYPE: <code>int</code> DEFAULT: <code>4</code> </p> <code>timeout</code> <p>timeout for each worker. Defaults to 120.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>120</code> </p> <code>stagger</code> <p>time to wait between each worker. Defaults to 0.5.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>0.5</code> </p> RETURNS DESCRIPTION <code>dict[int, Any]</code> <p>dict[int,Any]: dictionary of outputs</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel","title":"Multichannel","text":"<pre><code>Multichannel(\n    channels: Sequence[int] | None = None,\n    details: dict | Sequence[dict] | None = None,\n    *args,\n    parts: dict[str, Part] | None = None,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>Combined</code></p> <p>Multichannel class is an composition of duplicate part tools to form multiple channels.</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel--constructor","title":"Constructor:","text":"<pre><code>channels (Sequence[int] | None, optional): sequence of channels. Defaults to None.\ndetails (dict | Sequence[dict] | None, optional): dictionary or sequence of dictionaries of part details. Defaults to None.\nparts (dict[str,Part] | None, optional): dictionary of parts. Defaults to None.\nverbose (bool, optional): verbosity of class. Defaults to False.\n</code></pre> ATTRIBUTE DESCRIPTION <code>channels</code> <p>dictionary of channels</p> <p> TYPE: <code>dict[int, Part]</code> </p> <code>device</code> <p>device object</p> <p> TYPE: <code>Device</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>parts</code> <p>namespace of parts</p> <p> TYPE: <code>SimpleNamespace[str, Part]</code> </p> <code>flags</code> <p>flags of class</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_busy</code> <p>whether any part is busy</p> <p> TYPE: <code>bool</code> </p> <code>is_connected</code> <p>whether all parts are connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>createParts</code> <p>factory method to instantiate Multichannel from channels and part details</p> <code>factory</code> <p>factory method to generate Multichannel class from parent class</p> <code>fromConfig</code> <p>factory method to create Combined from configuration dictionary</p> <code>setActiveChannel</code> <p>set active channel</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>resetFlags</code> <p>reset all flags to class attribute _default_flags</p> <code>shutdown</code> <p>shutdown the device</p> <p>Initialise Multichannel class</p> PARAMETER DESCRIPTION <code>channels</code> <p>sequence of channels. Defaults to None.</p> <p> TYPE: <code>Sequence[int] | None</code> DEFAULT: <code>None</code> </p> <code>details</code> <p>dictionary or sequence of dictionaries of part details. DEfaults to None.</p> <p> TYPE: <code>dict | Sequence[dict] | None</code> DEFAULT: <code>None</code> </p> <code>parts</code> <p>dictionary of parts. Defaults to None.</p> <p> TYPE: <code>dict[str, Part] | None</code> DEFAULT: <code>None</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.channel","title":"channel  <code>property</code> <code>writable</code>","text":"<pre><code>channel: int\n</code></pre> <p>Active channel</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.channels","title":"channels  <code>property</code>","text":"<pre><code>channels: dict[int, Part]\n</code></pre> <p>Dictionary of channels</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.createParts","title":"createParts  <code>classmethod</code>","text":"<pre><code>createParts(\n    channels: Sequence[int],\n    details: dict | Sequence[dict] | None,\n    *args,\n    **kwargs,\n) -&gt; tuple[dict[str, Part], Device]\n</code></pre> <p>Factory method to instantiate Multichannel from channels and part details</p> PARAMETER DESCRIPTION <code>channels</code> <p>sequence of channels</p> <p> TYPE: <code>Sequence[int]</code> </p> <code>details</code> <p>dictionary or sequence of dictionaries of part details</p> <p> TYPE: <code>dict | Sequence[dict] | None</code> </p> RETURNS DESCRIPTION <code>tuple[dict[str, Part], Device]</code> <p>tuple[dict[str,Part],Device]: dictionary of parts and device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.factory","title":"factory  <code>classmethod</code>","text":"<pre><code>factory(parent: type) -&gt; Type[Multichannel]\n</code></pre> <p>Factory method to generate Multichannel class from parent</p> PARAMETER DESCRIPTION <code>parent</code> <p>parent class</p> <p> TYPE: <code>type</code> </p> RETURNS DESCRIPTION <code>Type[Multichannel]</code> <p>Type[Multichannel]: subclass of Multichannel class</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.fromConfig","title":"fromConfig  <code>classmethod</code>","text":"<pre><code>fromConfig(config: dict) -&gt; Multichannel\n</code></pre> <p>Factory method to create Compound from configuration dictionary</p> PARAMETER DESCRIPTION <code>config</code> <p>configuration dictionary</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>Multichannel</code> <p>instance of Compound (or its subclasses)</p> <p> TYPE: <code>Multichannel</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Multichannel.setActiveChannel","title":"setActiveChannel","text":"<pre><code>setActiveChannel(channel: int | None = None)\n</code></pre> <p>Set active channel</p> PARAMETER DESCRIPTION <code>channel</code> <p>select channel. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Part","title":"Part","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for Part (i.e. component tools)</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Part.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Part.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Part.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/core/compound.html#controllably.core.compound.Part.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown the device</p>"},{"location":"site/api/core/connection.html","title":"Connection","text":"<p>This module provides classes for handling connections to serial and socket devices.</p> FUNCTION DESCRIPTION <code>get_addresses</code> <p>Get the appropriate addresses for current machine</p> <code>get_host</code> <p>Get the host IP address for current machine</p> <code>get_node</code> <p>Get the unique identifier for current machine</p> <code>get_node_linux</code> <p>Get the unique identifier for Linux machine</p> <code>get_node_macos</code> <p>Get the unique identifier for macOS machine</p> <code>get_node_windows</code> <p>Get the unique identifier for Windows machine</p> <code>get_ports</code> <p>Get available serial ports connected to current machine</p> <code>match_current_ip_address</code> <p>Match the current IP address of the machine</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_addresses","title":"get_addresses","text":"<pre><code>get_addresses(\n    registry: dict | None, mac_address: bool = True\n) -&gt; dict | None\n</code></pre> <p>Get the appropriate addresses for current machine</p> PARAMETER DESCRIPTION <code>registry</code> <p>dictionary with serial port addresses and camera ids</p> <p> TYPE: <code>dict | None</code> </p> <code>mac_address</code> <p>whether to use MAC address for node id, defaults to True</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict | None</code> <p>dict|None: dictionary of serial port addresses and camera ids for current machine, if available</p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_host","title":"get_host","text":"<pre><code>get_host() -&gt; str\n</code></pre> <p>Get the host IP address for current machine</p> RETURNS DESCRIPTION <code>str</code> <p>machine host IP address</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_node","title":"get_node","text":"<pre><code>get_node(mac_address: bool = True) -&gt; str\n</code></pre> <p>Get the unique identifier for current machine</p> PARAMETER DESCRIPTION <code>mac_address</code> <p>whether to use MAC address for node id, defaults to True</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>str</code> <p>machine unique identifier</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_node_linux","title":"get_node_linux","text":"<pre><code>get_node_linux() -&gt; str\n</code></pre> <p>Get the unique identifier for Linux machine</p> RETURNS DESCRIPTION <code>str</code> <p>machine unique identifier</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_node_macos","title":"get_node_macos","text":"<pre><code>get_node_macos() -&gt; str\n</code></pre> <p>Get the unique identifier for macOS machine</p> RETURNS DESCRIPTION <code>str</code> <p>machine unique identifier</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_node_windows","title":"get_node_windows","text":"<pre><code>get_node_windows() -&gt; str\n</code></pre> <p>Get the unique identifier for Windows machine</p> RETURNS DESCRIPTION <code>str</code> <p>machine unique identifier</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/connection.html#controllably.core.connection.get_ports","title":"get_ports","text":"<pre><code>get_ports() -&gt; list[str]\n</code></pre> <p>Get available serial ports connected to current machine</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: list of connected serial ports</p>"},{"location":"site/api/core/connection.html#controllably.core.connection.match_current_ip_address","title":"match_current_ip_address","text":"<pre><code>match_current_ip_address(ip_address: str) -&gt; bool\n</code></pre> <p>Match the current IP address of the machine</p> PARAMETER DESCRIPTION <code>ip_address</code> <p>IP address to match against the current machine's IP addresses</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the IP address matches the current machine</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/control.html","title":"Control","text":"<p>This module provides classes for a simple remote procedure call (RPC) framework.</p> ATTRIBUTE DESCRIPTION <code>BYTE_SIZE</code> <p>size of the byte.</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>ClassMethods</code> <p>class to store methods of a class.</p> <code>TwoTierQueue</code> <p>a queue that can handle two types of items: normal and high-priority.</p> <code>Proxy</code> <p>a proxy class to handle remote method calls.</p> <code>Controller</code> <p>a class to control the flow of data and commands between models and views.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/control.html#controllably.core.control.ClassMethods","title":"ClassMethods  <code>dataclass</code>","text":"<pre><code>ClassMethods(name: str, methods: dict[str, dict[str, str]])\n</code></pre> <p>Class to store methods of a class.</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>name of the class.</p> <p> TYPE: <code>str</code> </p> <code>methods</code> <p>dictionary of methods and their parameters.</p> <p> TYPE: <code>dict[str, dict[str, str]]</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller","title":"Controller","text":"<pre><code>Controller(\n    role: str,\n    interpreter: Interpreter,\n    *,\n    relay_delay: int = 1,\n)\n</code></pre> <p>A class to control the flow of data and commands between models and views.</p> ATTRIBUTE DESCRIPTION <code>role</code> <p>the role of the controller</p> <p> TYPE: <code>str</code> </p> <code>interpreter</code> <p>the interpreter to use</p> <p> TYPE: <code>Interpreter</code> </p> <code>address</code> <p>the address of the controller</p> <p> TYPE: <code>str | None</code> </p> <code>relay_delay</code> <p>delay for relaying data</p> <p> TYPE: <code>int</code> </p> <code>relays</code> <p>list of relays</p> <p> TYPE: <code>list</code> </p> <code>callbacks</code> <p>dictionary of callbacks</p> <p> TYPE: <code>dict[str, dict[str, Callable]]</code> </p> <code>events</code> <p>dictionary of events</p> <p> TYPE: <code>dict[str, Event]</code> </p> <code>command_queue</code> <p>command queue</p> <p> TYPE: <code>TwoTierQueue</code> </p> <code>data_buffer</code> <p>data buffer</p> <p> TYPE: <code>dict</code> </p> <code>objects</code> <p>dictionary of objects</p> <p> TYPE: <code>dict</code> </p> <code>object_methods</code> <p>dictionary of object methods</p> <p> TYPE: <code>dict[str, ClassMethods]</code> </p> <code>object_attributes</code> <p>dictionary of object attributes</p> <p> TYPE: <code>dict[str, tuple[str]]</code> </p> <code>execution_event</code> <p>event for execution loop</p> <p> TYPE: <code>Event</code> </p> <code>registry</code> <p>object registry</p> <p> TYPE: <code>dict[str, list[str]]</code> </p> METHOD DESCRIPTION <code>receiveRequest</code> <p>receive a request</p> <code>transmitData</code> <p>transmit data</p> <code>broadcastRegistry</code> <p>broadcast the registry</p> <code>register</code> <p>register an object</p> <code>unregister</code> <p>unregister an object</p> <code>extractMetadata</code> <p>extract metadata from a command</p> <code>extractMethods</code> <p>extract methods from an object</p> <code>exposeAttributes</code> <p>expose attributes of registered objects</p> <code>exposeMethods</code> <p>expose methods of registered objects</p> <code>start</code> <p>start the execution loop</p> <code>stop</code> <p>stop the execution loop</p> <code>executeCommand</code> <p>execute a command</p> <code>transmitRequest</code> <p>transmit a request</p> <code>receiveData</code> <p>receive data</p> <code>retrieveData</code> <p>retrieve data</p> <code>getAttributes</code> <p>get attributes of the controller</p> <code>getMethods</code> <p>get methods of the controller</p> <code>relay</code> <p>relay a request or data</p> <code>relayRequest</code> <p>relay a request</p> <code>relayData</code> <p>relay data</p> <code>subscribe</code> <p>subscribe to a relay</p> <code>unsubscribe</code> <p>unsubscribe from a relay</p> <code>setAddress</code> <p>set the address of the controller</p> <p>Initialize the Controller class.</p> PARAMETER DESCRIPTION <code>role</code> <p>the role of the controller</p> <p> TYPE: <code>str</code> </p> <code>interpreter</code> <p>the interpreter to use</p> <p> TYPE: <code>Interpreter</code> </p> <code>relay_delay</code> <p>delay for relaying data. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.registry","title":"registry  <code>property</code> <code>writable</code>","text":"<pre><code>registry: dict[str, str]\n</code></pre> <p>Object registry</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.broadcastRegistry","title":"broadcastRegistry","text":"<pre><code>broadcastRegistry(target: Iterable[str] | None = None)\n</code></pre> <p>Broadcast the registry</p> PARAMETER DESCRIPTION <code>target</code> <p>the target addresses. Defaults to None.</p> <p> TYPE: <code>Iterable[str] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.executeCommand","title":"executeCommand","text":"<pre><code>executeCommand(\n    command: Mapping[str, Any],\n) -&gt; tuple[Any, dict[str, Any]]\n</code></pre> <p>Execute a command</p> PARAMETER DESCRIPTION <code>command</code> <p>the command to execute</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>tuple[Any, dict[str, Any]]</code> <p>tuple[Any, dict[str, Any]]: the result of the command and the status</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.exposeAttributes","title":"exposeAttributes","text":"<pre><code>exposeAttributes()\n</code></pre> <p>Expose attributes of registered objects</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.exposeMethods","title":"exposeMethods","text":"<pre><code>exposeMethods()\n</code></pre> <p>Expose methods of registered objects</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.extractMetadata","title":"extractMetadata","text":"<pre><code>extractMetadata(\n    command: Mapping[str, Any],\n) -&gt; dict[str, Any]\n</code></pre> <p>Extract metadata from a command</p> PARAMETER DESCRIPTION <code>command</code> <p>the command to extract metadata from</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: the extracted metadata</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.extractMethods","title":"extractMethods  <code>staticmethod</code>","text":"<pre><code>extractMethods(new_object: Callable) -&gt; ClassMethods\n</code></pre> <p>Extract methods from an object</p> PARAMETER DESCRIPTION <code>new_object</code> <p>the object to extract methods from</p> <p> TYPE: <code>Callable</code> </p> RETURNS DESCRIPTION <code>ClassMethods</code> <p>the extracted methods</p> <p> TYPE: <code>ClassMethods</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.getAttributes","title":"getAttributes","text":"<pre><code>getAttributes(\n    target: Iterable[int] | None = None,\n    *,\n    private: bool = True,\n) -&gt; dict\n</code></pre> <p>Get attributes</p> PARAMETER DESCRIPTION <code>target</code> <p>the target addresses. Defaults to None.</p> <p> TYPE: <code>Iterable[int] | None</code> DEFAULT: <code>None</code> </p> <code>private</code> <p>flag to indicate private transmission. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>the attributes</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.getMethods","title":"getMethods","text":"<pre><code>getMethods(\n    target: Iterable[int] | None = None,\n    *,\n    private: bool = True,\n) -&gt; dict\n</code></pre> <p>Get methods</p> PARAMETER DESCRIPTION <code>target</code> <p>the target addresses. Defaults to None.</p> <p> TYPE: <code>Iterable[int] | None</code> DEFAULT: <code>None</code> </p> <code>private</code> <p>flag to indicate private transmission. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>the methods</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.receiveData","title":"receiveData","text":"<pre><code>receiveData(\n    packet: str | bytes | None = None,\n    *,\n    sender: str | None = None,\n    **kwargs,\n)\n</code></pre> <p>Receive data</p> PARAMETER DESCRIPTION <code>packet</code> <p>the packet to receive. Defaults to None.</p> <p> TYPE: <code>str | bytes</code> DEFAULT: <code>None</code> </p> <code>sender</code> <p>the sender of the packet. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.receiveRequest","title":"receiveRequest","text":"<pre><code>receiveRequest(\n    packet: str | bytes | None = None,\n    *,\n    sender: str | None = None,\n    **kwargs,\n)\n</code></pre> <p>Receive a request</p> PARAMETER DESCRIPTION <code>packet</code> <p>the request to receive. Defaults to None.</p> <p> TYPE: <code>str | bytes</code> DEFAULT: <code>None</code> </p> <code>sender</code> <p>the sender of the request. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.register","title":"register","text":"<pre><code>register(\n    new_object: Callable, object_id: str | None = None\n)\n</code></pre> <p>Register an object</p> PARAMETER DESCRIPTION <code>new_object</code> <p>the object to register</p> <p> TYPE: <code>Callable</code> </p> <code>object_id</code> <p>the ID of the object. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.relay","title":"relay","text":"<pre><code>relay(\n    packet: str | bytes | None,\n    callback_type: str,\n    addresses: Iterable[int] | None = None,\n)\n</code></pre> <p>Relay a message</p> PARAMETER DESCRIPTION <code>packet</code> <p>the message to relay</p> <p> TYPE: <code>str | bytes | None</code> </p> <code>callback_type</code> <p>the callback type</p> <p> TYPE: <code>str</code> </p> <code>addresses</code> <p>the target addresses. Defaults to None.</p> <p> TYPE: <code>Iterable[int] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.relayData","title":"relayData","text":"<pre><code>relayData(packet: str | bytes | None = None, **kwargs)\n</code></pre> <p>Relay data</p> PARAMETER DESCRIPTION <code>packet</code> <p>the packet to relay. Defaults to None.</p> <p> TYPE: <code>str | bytes</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.relayRequest","title":"relayRequest","text":"<pre><code>relayRequest(packet: str | bytes | None = None, **kwargs)\n</code></pre> <p>Relay a request</p> PARAMETER DESCRIPTION <code>packet</code> <p>the request to relay. Defaults to None.</p> <p> TYPE: <code>str | bytes</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.retrieveData","title":"retrieveData","text":"<pre><code>retrieveData(\n    request_id: str,\n    timeout: int | float = 5,\n    *,\n    sender: str | None = None,\n    min_count: int | None = 1,\n    max_count: int | None = 1,\n    default: Any | None = None,\n    data_only: bool = True,\n    close_request: bool = True,\n) -&gt; Any | dict[tuple[str, str], Any]\n</code></pre> <p>Retrieve data</p> PARAMETER DESCRIPTION <code>request_id</code> <p>the request ID</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>the timeout. Defaults to 5.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>5</code> </p> <code>min_count</code> <p>the minimum count. Defaults to 1.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>1</code> </p> <code>max_count</code> <p>the maximum count. Defaults to 1.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>1</code> </p> <code>default</code> <p>the default value. Defaults to None.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>data_only</code> <p>flag to indicate data only. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>close_request</code> <p>flag to indicate close request. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Any | dict[tuple[str, str], Any]</code> <p>Any | dict[tuple[str,str], Any]: the retrieved data</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.setAddress","title":"setAddress","text":"<pre><code>setAddress(address: int | str)\n</code></pre> <p>Set the address</p> PARAMETER DESCRIPTION <code>address</code> <p>the address</p> <p> TYPE: <code>int | str</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start the execution loop</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the execution loop</p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.subscribe","title":"subscribe","text":"<pre><code>subscribe(\n    callback: Callable,\n    callback_type: str,\n    address: int | str | None = None,\n    *,\n    relay: bool = False,\n)\n</code></pre> <p>Subscribe to a callback</p> PARAMETER DESCRIPTION <code>callback</code> <p>the callback to subscribe</p> <p> TYPE: <code>Callable</code> </p> <code>callback_type</code> <p>the callback type</p> <p> TYPE: <code>str</code> </p> <code>address</code> <p>the address. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>relay</code> <p>flag to indicate relay. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.transmitData","title":"transmitData","text":"<pre><code>transmitData(\n    data: Any,\n    *,\n    metadata: Mapping[str, Any] | None = None,\n    status: Mapping[str, Any] | None = None,\n)\n</code></pre> <p>Transmit data</p> PARAMETER DESCRIPTION <code>data</code> <p>the data to transmit</p> <p> TYPE: <code>Any</code> </p> <code>metadata</code> <p>the metadata to include. Defaults to None.</p> <p> TYPE: <code>Mapping[str, Any] | None</code> DEFAULT: <code>None</code> </p> <code>status</code> <p>the status to include. Defaults to None.</p> <p> TYPE: <code>Mapping[str, Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.transmitRequest","title":"transmitRequest","text":"<pre><code>transmitRequest(\n    command: Mapping[str, Any],\n    target: Iterable[int | str] | None = None,\n    *,\n    private: bool = True,\n    priority: bool = False,\n    rank: int | None = None,\n) -&gt; str\n</code></pre> <p>Transmit a request</p> PARAMETER DESCRIPTION <code>command</code> <p>the command to transmit</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> <code>target</code> <p>the target addresses. Defaults to None.</p> <p> TYPE: <code>Iterable[int | str] | None</code> DEFAULT: <code>None</code> </p> <code>private</code> <p>flag to indicate private transmission. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>priority</code> <p>flag to indicate high-priority transmission. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rank</code> <p>rank of the high-priority transmission. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>the request ID</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.unregister","title":"unregister","text":"<pre><code>unregister(\n    object_id: str | None = None,\n    old_object: Callable | None = None,\n) -&gt; bool\n</code></pre> <p>Unregister an object</p> PARAMETER DESCRIPTION <code>object_id</code> <p>the ID of the object. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>old_object</code> <p>the object to unregister. Defaults to None.</p> <p> TYPE: <code>Callable | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>flag indicating success</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Controller.unsubscribe","title":"unsubscribe","text":"<pre><code>unsubscribe(\n    callback_type: str, address: int | str\n) -&gt; Callable | None\n</code></pre> <p>Unsubscribe from a callback</p> PARAMETER DESCRIPTION <code>callback_type</code> <p>the callback type</p> <p> TYPE: <code>str</code> </p> <code>address</code> <p>the address</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Callable | None</code> <p>Callable|None: the unsubscribed callback</p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy","title":"Proxy","text":"<pre><code>Proxy(prime: Callable, object_id: str | None = None)\n</code></pre> <p>A proxy class to handle remote method calls.</p> ATTRIBUTE DESCRIPTION <code>prime</code> <p>the object to create a proxy for</p> <p> TYPE: <code>Callable</code> </p> <code>object_id</code> <p>the ID of the object</p> <p> TYPE: <code>str</code> </p> <code>controller</code> <p>the controller bound to the proxy</p> <p> TYPE: <code>Controller</code> </p> <code>remote</code> <p>flag to indicate remote method calls</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>factory</code> <p>factory method to create a new class with methods of the prime object</p> <code>createMethodEmitter</code> <p>create a method emitter for the proxy class</p> <code>createPropertyEmitter</code> <p>create a property emitter for the proxy class</p> <code>bindController</code> <p>bind a controller to the proxy</p> <code>releaseController</code> <p>release the controller from the proxy</p> <p>Initialize the Proxy class.</p> PARAMETER DESCRIPTION <code>prime</code> <p>the object to create a proxy for</p> <p> TYPE: <code>Callable</code> </p> <code>object_id</code> <p>the ID of the object. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy.bindController","title":"bindController","text":"<pre><code>bindController(controller: Controller)\n</code></pre> <p>Bind a controller to the proxy.</p> PARAMETER DESCRIPTION <code>controller</code> <p>the controller to bind to the proxy</p> <p> TYPE: <code>Controller</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy.createMethodEmitter","title":"createMethodEmitter  <code>staticmethod</code>","text":"<pre><code>createMethodEmitter(method: Callable) -&gt; Callable\n</code></pre> <p>Create a method emitter for the proxy class.</p> PARAMETER DESCRIPTION <code>method</code> <p>the method to create an emitter for</p> <p> TYPE: <code>Callable</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>the method emitter</p> <p> TYPE: <code>Callable</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy.createPropertyEmitter","title":"createPropertyEmitter  <code>staticmethod</code>","text":"<pre><code>createPropertyEmitter(attr_name: str) -&gt; property\n</code></pre> <p>Create a property emitter for the proxy class.</p> PARAMETER DESCRIPTION <code>attr_name</code> <p>the name of the property to create an emitter for</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>property</code> <p>the property emitter</p> <p> TYPE: <code>property</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy.factory","title":"factory  <code>classmethod</code>","text":"<pre><code>factory(\n    prime: Callable, object_id: str | None = None\n) -&gt; Type[Proxy]\n</code></pre> <p>Factory method to create a new class with methods and properties of the prime object.</p> PARAMETER DESCRIPTION <code>prime</code> <p>the object to create a proxy for</p> <p> TYPE: <code>Callable</code> </p> <code>object_id</code> <p>the ID of the object. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Type[Proxy]</code> <p>Type[Proxy]: the new class with methods and properties of the prime object</p>"},{"location":"site/api/core/control.html#controllably.core.control.Proxy.releaseController","title":"releaseController","text":"<pre><code>releaseController() -&gt; Controller\n</code></pre> <p>Release the controller from the proxy.</p> RETURNS DESCRIPTION <code>Controller</code> <p>the controller that was bound to the proxy</p> <p> TYPE: <code>Controller</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue","title":"TwoTierQueue","text":"<pre><code>TwoTierQueue()\n</code></pre> <p>A queue that can handle two types of items: normal and high-priority.</p> ATTRIBUTE DESCRIPTION <code>normal_queue</code> <p>queue for normal items.</p> <p> TYPE: <code>Queue</code> </p> <code>high_priority_queue</code> <p>queue for high-priority items.</p> <p> TYPE: <code>PriorityQueue</code> </p> <code>last_used_queue_normal</code> <p>flag to indicate the last used queue.</p> <p> TYPE: <code>bool</code> </p> <code>priority_counter</code> <p>counter for high-priority items.</p> <p> TYPE: <code>int</code> </p> METHOD DESCRIPTION <code>qsize</code> <p>return the size of the queue</p> <code>empty</code> <p>check if the queue is empty</p> <code>full</code> <p>check if the queue is full</p> <code>put</code> <p>put an item in the queue</p> <code>put_nowait</code> <p>put an item in the queue without waiting</p> <code>get</code> <p>get an item from the queue</p> <code>get_nowait</code> <p>get an item from the queue without waiting</p> <code>task_done</code> <p>mark a task as done</p> <code>join</code> <p>wait for all tasks to be done</p> <code>put_first</code> <p>put an item at the front of the priority queue</p> <code>put_priority</code> <p>put a high-priority item in the queue</p> <code>put_queue</code> <p>put an item in the queue</p> <code>reset</code> <p>reset the queue</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.empty","title":"empty","text":"<pre><code>empty()\n</code></pre> <p>Check if the queue is empty.</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.full","title":"full","text":"<pre><code>full()\n</code></pre> <p>Check if the queue is full.</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.get","title":"get","text":"<pre><code>get(\n    block: bool = True, timeout: float | None = None\n) -&gt; Any\n</code></pre> <p>Get an item from the queue.</p> PARAMETER DESCRIPTION <code>block</code> <p>flag to block the queue. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>time to wait for the queue. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>item from the queue.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.get_nowait","title":"get_nowait","text":"<pre><code>get_nowait() -&gt; Any\n</code></pre> <p>Get an item from the queue without waiting.</p> RETURNS DESCRIPTION <code>Any</code> <p>item from the queue.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.join","title":"join","text":"<pre><code>join()\n</code></pre> <p>Wait for all tasks to be done.</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.put","title":"put","text":"<pre><code>put(\n    item: Any,\n    block: bool = True,\n    timeout: float | None = None,\n    *,\n    priority: bool = False,\n    rank: int | None = None,\n)\n</code></pre> <p>Put an item in the queue.</p> PARAMETER DESCRIPTION <code>item</code> <p>item to put in the queue.</p> <p> TYPE: <code>Any</code> </p> <code>block</code> <p>flag to block the queue. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>time to wait for the queue. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p> <code>priority</code> <p>flag to indicate high-priority item. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rank</code> <p>rank of the high-priority item. Defaults to None.</p> <p> TYPE: <code>int</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.put_first","title":"put_first","text":"<pre><code>put_first(item: Any)\n</code></pre> <p>Put an item at the front of the priority queue.</p> PARAMETER DESCRIPTION <code>item</code> <p>item to put in the queue.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.put_nowait","title":"put_nowait","text":"<pre><code>put_nowait(\n    item: Any,\n    *,\n    priority: bool = False,\n    rank: int | None = None,\n)\n</code></pre> <p>Put an item in the queue without waiting.</p> PARAMETER DESCRIPTION <code>item</code> <p>item to put in the queue.</p> <p> TYPE: <code>Any</code> </p> <code>priority</code> <p>flag to indicate high-priority item. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>rank</code> <p>rank of the high-priority item. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.put_priority","title":"put_priority","text":"<pre><code>put_priority(\n    item: Any,\n    rank: int,\n    block: bool = True,\n    timeout: float | None = None,\n)\n</code></pre> <p>Put a high-priority item in the queue.</p> PARAMETER DESCRIPTION <code>item</code> <p>item to put in the queue.</p> <p> TYPE: <code>Any</code> </p> <code>rank</code> <p>rank of the high-priority item</p> <p> TYPE: <code>int</code> </p> <code>block</code> <p>flag to block the queue. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>time to wait for the queue. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.put_queue","title":"put_queue","text":"<pre><code>put_queue(\n    item: Any,\n    block: bool = True,\n    timeout: float | None = None,\n)\n</code></pre> <p>Put an item in the queue.</p> PARAMETER DESCRIPTION <code>item</code> <p>item to put in the queue.</p> <p> TYPE: <code>Any</code> </p> <code>block</code> <p>flag to block the queue. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>time to wait for the queue. Defaults to None.</p> <p> TYPE: <code>float</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.qsize","title":"qsize","text":"<pre><code>qsize()\n</code></pre> <p>Return the size of the queue.</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset the queue.</p>"},{"location":"site/api/core/control.html#controllably.core.control.TwoTierQueue.task_done","title":"task_done","text":"<pre><code>task_done()\n</code></pre> <p>Mark a task as done.</p>"},{"location":"site/api/core/datalogger.html","title":"Datalogger","text":"<p>This module provides functions to record and stream data from a streaming device.</p> FUNCTION DESCRIPTION <code>get_dataframe</code> <p>Convert a list of tuples to a pandas DataFrame</p> <code>record</code> <p>Record data from a streaming device</p> <code>stream</code> <p>Stream data from a streaming device</p> <code>monitor_plot</code> <p>Monitor a data stream in real-time</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/datalogger.html#controllably.core.datalogger.get_dataframe","title":"get_dataframe","text":"<pre><code>get_dataframe(\n    data_store: Iterable[tuple[NamedTuple, datetime]],\n    fields: Iterable[str],\n) -&gt; DataFrame\n</code></pre> <p>Convert a list of tuples to a pandas DataFrame. The first element of each tuple is a NamedTuple, the second element is a datetime object.</p> PARAMETER DESCRIPTION <code>data_store</code> <p>list of tuples</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]]</code> </p> <code>fields</code> <p>list of field names</p> <p> TYPE: <code>Iterable[str]</code> </p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: DataFrame object</p>"},{"location":"site/api/core/datalogger.html#controllably.core.datalogger.monitor_plot","title":"monitor_plot","text":"<pre><code>monitor_plot(\n    data_store: Iterable[tuple[NamedTuple, datetime]]\n    | DataFrame,\n    y: str,\n    x: str = \"timestamp\",\n    *,\n    kind: str = \"line\",\n    lapsed_counts: int = 100,\n    stop_trigger: Event | None = None,\n    dataframe_maker: Callable | None = None,\n) -&gt; Event\n</code></pre> <p>Monitor a data stream in real-time.</p> PARAMETER DESCRIPTION <code>data_store</code> <p>list of tuples or dataframe containing the data to plot</p> <p> TYPE: <code>Iterable[tuple[NamedTuple, datetime]] | DataFrame</code> </p> <code>y</code> <p>y-axis field name</p> <p> TYPE: <code>str</code> </p> <code>x</code> <p>x-axis field name. Defaults to 'timestamp'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'timestamp'</code> </p> <code>kind</code> <p>plot type. Defaults to 'line'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'line'</code> </p> <code>lapsed_counts</code> <p>number of counts to wait before stopping. Defaults to 100.</p> <p> TYPE: <code>int</code> DEFAULT: <code>100</code> </p> <code>stop_trigger</code> <p>event to stop the monitoring. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> <code>dataframe_maker</code> <p>function to convert data_store to a DataFrame. Defaults to None.</p> <p> TYPE: <code>Callable | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Event</code> <p>threading.Event: event to stop the monitoring</p>"},{"location":"site/api/core/datalogger.html#controllably.core.datalogger.record","title":"record","text":"<pre><code>record(\n    on: bool,\n    show: bool = False,\n    clear_cache: bool = False,\n    *,\n    device: StreamingDevice,\n    data_store: deque,\n    split_stream: bool = True,\n    callback: Callable[[str], Any] | None = None,\n    query: Any | None = None,\n    event: Event | None = None,\n)\n</code></pre> <p>Record data from a streaming device.</p> PARAMETER DESCRIPTION <code>on</code> <p>start or stop recording</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>display the data as it is recorded. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>clear_cache</code> <p>clear the data cache before starting. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>device</code> <p>streaming device object</p> <p> TYPE: <code>StreamingDevice</code> </p> <code>data_store</code> <p>data cache</p> <p> TYPE: <code>deque</code> </p> <code>split_stream</code> <p>whether to split the stream and data processing threads. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>query</code> <p>query to pass to the streaming device. Defaults to None.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>event</code> <p>event to set or clear. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/datalogger.html#controllably.core.datalogger.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    show: bool = False,\n    *,\n    device: StreamingDevice,\n    data_store: deque,\n    split_stream: bool = True,\n    callback: Callable[[str], Any] | None = None,\n    query: Any | None = None,\n    event: Event | None = None,\n)\n</code></pre> <p>Stream data from a streaming device.</p> PARAMETER DESCRIPTION <code>on</code> <p>start or stop streaming</p> <p> TYPE: <code>bool</code> </p> <code>show</code> <p>display the data as it is streamed. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>device</code> <p>streaming device object</p> <p> TYPE: <code>StreamingDevice</code> </p> <code>data_store</code> <p>data cache</p> <p> TYPE: <code>deque</code> </p> <code>split_stream</code> <p>whether to split the stream and data processing threads. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>query</code> <p>query to pass to the streaming device. Defaults to None.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>event</code> <p>event to set or clear. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/device.html","title":"Device","text":"<p>This module provides base classes for device connections.</p> ATTRIBUTE DESCRIPTION <code>READ_FORMAT</code> <p>default read format for device connections</p> <p> TYPE: <code>str</code> </p> <code>WRITE_FORMAT</code> <p>default write format for device connections</p> <p> TYPE: <code>str</code> </p> <code>Data</code> <p>default data type for device connections</p> <p> TYPE: <code>NamedTuple</code> </p> CLASS DESCRIPTION <code>Device</code> <p>Protocol for device connection classes</p> <code>StreamingDevice</code> <p>Protocol for streaming device connection classes</p> <code>TimedDeviceMixin</code> <p>Mixin class for timed device operations</p> <code>BaseDevice</code> <p>Base class for device connections</p> <code>SerialDevice</code> <p>Class for serial device connections</p> <code>SocketDevice</code> <p>Class for socket device connections</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice","title":"BaseDevice","text":"<pre><code>BaseDevice(\n    *,\n    connection_details: dict | None = None,\n    init_timeout: int = 1,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>BaseDevice provides an interface for handling device connections</p> ATTRIBUTE DESCRIPTION <code>connection</code> <p>connection object for the device</p> <p> TYPE: <code>Any | None</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>flags</code> <p>flags for the device</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>init_timeout</code> <p>timeout for initialization</p> <p> TYPE: <code>int</code> </p> <code>data_type</code> <p>data type for the device</p> <p> TYPE: <code>NamedTuple</code> </p> <code>read_format</code> <p>read format for the device</p> <p> TYPE: <code>str</code> </p> <code>write_format</code> <p>write format for the device</p> <p> TYPE: <code>str</code> </p> <code>eol</code> <p>end of line character for the read format</p> <p> TYPE: <code>str</code> </p> <code>buffer</code> <p>buffer for storing streamed data</p> <p> TYPE: <code>deque</code> </p> <code>data_queue</code> <p>queue for storing processed data</p> <p> TYPE: <code>Queue</code> </p> <code>show_event</code> <p>event for showing streamed data</p> <p> TYPE: <code>Event</code> </p> <code>stream_event</code> <p>event for controlling streaming</p> <p> TYPE: <code>Event</code> </p> <code>threads</code> <p>dictionary of threads used in streaming</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>clear</code> <p>clear the input and output buffers, and reset the data queue and buffer</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>checkDeviceConnection</code> <p>check the connection to the device</p> <code>checkDeviceBuffer</code> <p>check the connection buffer</p> <code>clearDeviceBuffer</code> <p>clear the device input and output buffers</p> <code>read</code> <p>read data from the device</p> <code>readAll</code> <p>read all data from the device</p> <code>write</code> <p>write data to the device</p> <code>poll</code> <p>poll the device (i.e. write and read data)</p> <code>processInput</code> <p>process the input data</p> <code>processOutput</code> <p>process the output data</p> <code>query</code> <p>query the device (i.e. write and read data)</p> <code>startStream</code> <p>start the stream</p> <code>stopStream</code> <p>stop the stream</p> <code>stream</code> <p>toggle the stream</p> <code>showStream</code> <p>show the stream</p> <p>Initialize BaseDevice class</p> PARAMETER DESCRIPTION <code>connection_details</code> <p>connection details for the device. Defaults to None.</p> <p> TYPE: <code>dict | None</code> DEFAULT: <code>None</code> </p> <code>init_timeout</code> <p>timeout for initialization. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>data_type</code> <p>data type for the device. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>read format for the device. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>write format for the device. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.is_connected","title":"is_connected  <code>property</code>","text":"<pre><code>is_connected: bool\n</code></pre> <p>Whether the device is connected</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.verbose","title":"verbose  <code>property</code> <code>writable</code>","text":"<pre><code>verbose: bool\n</code></pre> <p>Verbosity of class</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.__enter__","title":"__enter__","text":"<pre><code>__enter__()\n</code></pre> <p>Context manager enter method</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.__exit__","title":"__exit__","text":"<pre><code>__exit__(exc_type, exc_value, traceback)\n</code></pre> <p>Context manager exit method</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.checkDeviceBuffer","title":"checkDeviceBuffer","text":"<pre><code>checkDeviceBuffer() -&gt; bool\n</code></pre> <p>Check the connection buffer</p> RETURNS DESCRIPTION <code>bool</code> <p>whether there is data in the connection buffer</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.checkDeviceConnection","title":"checkDeviceConnection","text":"<pre><code>checkDeviceConnection() -&gt; bool\n</code></pre> <p>Check the connection to the device</p> RETURNS DESCRIPTION <code>bool</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers, and reset the data queue and buffer</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.clearDeviceBuffer","title":"clearDeviceBuffer","text":"<pre><code>clearDeviceBuffer()\n</code></pre> <p>Clear the device input and output buffers</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.poll","title":"poll","text":"<pre><code>poll(data: str | None = None) -&gt; str\n</code></pre> <p>Poll the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to write to the device. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str</code> <p>str|None: data read from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.processInput","title":"processInput","text":"<pre><code>processInput(\n    data: Any = None, format_in: str | None = None, **kwargs\n) -&gt; str | None\n</code></pre> <p>Process the input</p> PARAMETER DESCRIPTION <code>data</code> <p>data to process. Defaults to None.</p> <p> TYPE: <code>Any</code> DEFAULT: <code>None</code> </p> <code>format_in</code> <p>format for the data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>str | None</code> <p>str|None: processed input data</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.processOutput","title":"processOutput","text":"<pre><code>processOutput(\n    data: str,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    timestamp: datetime | None = None,\n) -&gt; tuple[Any, datetime | None]\n</code></pre> <p>Process the output</p> PARAMETER DESCRIPTION <code>data</code> <p>data to process</p> <p> TYPE: <code>str</code> </p> <code>format_out</code> <p>format for the data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>data_type</code> <p>data type for the data. Defaults to None.</p> <p> TYPE: <code>NamedTuple | None</code> DEFAULT: <code>None</code> </p> <code>timestamp</code> <p>timestamp for the data. Defaults to None.</p> <p> TYPE: <code>datetime | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[Any, datetime | None]</code> <p>tuple[Any, datetime|None]: processed output data and timestamp</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.query","title":"query","text":"<pre><code>query(\n    data: Any,\n    multi_out: bool = True,\n    *,\n    timeout: int | float = 1,\n    format_in: str | None = None,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    timestamp: bool = False,\n    **kwargs,\n) -&gt; Any | None\n</code></pre> <p>Query the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to query</p> <p> TYPE: <code>Any</code> </p> <code>multi_out</code> <p>whether to return multiple outputs. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>timeout</code> <p>timeout for the query. Defaults to 1.</p> <p> TYPE: <code>int | float</code> DEFAULT: <code>1</code> </p> <code>format_in</code> <p>format for the input data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>format_out</code> <p>format for the output data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>data_type</code> <p>data type for the data. Defaults to None.</p> <p> TYPE: <code>NamedTuple | None</code> DEFAULT: <code>None</code> </p> <code>timestamp</code> <p>whether to return the timestamp. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Any | None</code> <p>Any|None: queried data</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.read","title":"read","text":"<pre><code>read() -&gt; str\n</code></pre> <p>Read data from the device</p> RETURNS DESCRIPTION <code>str</code> <p>str|None: data read from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.readAll","title":"readAll","text":"<pre><code>readAll() -&gt; list[str]\n</code></pre> <p>Read all data from the device</p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]|None: data read from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.showStream","title":"showStream","text":"<pre><code>showStream(on: bool)\n</code></pre> <p>Show the stream</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to show the stream</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.startStream","title":"startStream","text":"<pre><code>startStream(\n    data: str | None = None,\n    buffer: deque | None = None,\n    *,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    show: bool = False,\n    sync_start: Barrier | None = None,\n    split_stream: bool = True,\n    callback: Callable[[str], Any] | None = None,\n)\n</code></pre> <p>Start the stream</p> PARAMETER DESCRIPTION <code>data</code> <p>data to stream. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>buffer</code> <p>buffer to store the streamed data. Defaults to None.</p> <p> TYPE: <code>deque | None</code> DEFAULT: <code>None</code> </p> <code>format_out</code> <p>format for the data. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>data_type</code> <p>data type for the data. Defaults to None.</p> <p> TYPE: <code>NamedTuple | None</code> DEFAULT: <code>None</code> </p> <code>show</code> <p>whether to show the stream. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>sync_start</code> <p>synchronization barrier. Defaults to None.</p> <p> TYPE: <code>Barrier | None</code> DEFAULT: <code>None</code> </p> <code>split_stream</code> <p>whether to split the stream and data processing threads. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>callback</code> <p>callback function to call with the streamed data. Defaults to None.</p> <p> TYPE: <code>Callable[[str], Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.stopStream","title":"stopStream","text":"<pre><code>stopStream()\n</code></pre> <p>Stop the stream</p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    data: str | None = None,\n    buffer: deque | None = None,\n    *,\n    sync_start: Barrier | None = None,\n    split_stream: bool = True,\n    callback: Callable[[str], Any] | None = None,\n    **kwargs,\n)\n</code></pre> <p>Toggle the stream</p> PARAMETER DESCRIPTION <code>on</code> <p>whether to start or stop the stream</p> <p> TYPE: <code>bool</code> </p> <code>data</code> <p>data to stream. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>buffer</code> <p>buffer to store the streamed data. Defaults to None.</p> <p> TYPE: <code>deque | None</code> DEFAULT: <code>None</code> </p> <code>sync_start</code> <p>synchronization barrier. Defaults to None.</p> <p> TYPE: <code>Barrier | None</code> DEFAULT: <code>None</code> </p> <code>split_stream</code> <p>whether to split the stream and data processing threads. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>callback</code> <p>callback function to call with the streamed data. Defaults to None.</p> <p> TYPE: <code>Callable[[str], Any] | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.BaseDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p> PARAMETER DESCRIPTION <code>data</code> <p>data to write to the device</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the data was written successfully</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.Device","title":"Device","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for device connection classes</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.processInput","title":"processInput","text":"<pre><code>processInput(\n    data: Any, format_in: str, **kwargs\n) -&gt; str | None\n</code></pre> <p>Process the input</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.processOutput","title":"processOutput","text":"<pre><code>processOutput(\n    data: str,\n    format_out: str,\n    data_type: NamedTuple,\n    timestamp: datetime | None,\n    **kwargs,\n) -&gt; tuple[Any, datetime]\n</code></pre> <p>Process the output</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.query","title":"query","text":"<pre><code>query(\n    data: Any, multi_out: bool = True, **kwargs\n) -&gt; Any | None\n</code></pre> <p>Query the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.read","title":"read","text":"<pre><code>read() -&gt; str | None\n</code></pre> <p>Read data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.Device.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice","title":"SerialDevice","text":"<pre><code>SerialDevice(\n    port: str | None = None,\n    baudrate: int = 9600,\n    timeout: int = 1,\n    *,\n    init_timeout: int = 1,\n    data_type: NamedTuple = Data,\n    read_format: str = READ_FORMAT,\n    write_format: str = WRITE_FORMAT,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseDevice</code></p> <p>SerialDevice provides an interface for handling serial devices</p> ATTRIBUTE DESCRIPTION <code>port</code> <p>device serial port</p> <p> TYPE: <code>str</code> </p> <code>baudrate</code> <p>device baudrate</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>device timeout</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>serial</code> <p>serial object for the device</p> <p> TYPE: <code>Serial</code> </p> <code>init_timeout</code> <p>timeout for initialization</p> <p> TYPE: <code>int</code> </p> <code>message_end</code> <p>message end character</p> <p> TYPE: <code>str</code> </p> <code>flags</code> <p>flags for the device</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>clear</code> <p>clear the input and output buffers, and reset the data queue and buffer</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>checkDeviceConnection</code> <p>check the connection to the device</p> <code>checkDeviceBuffer</code> <p>check the connection buffer</p> <code>clearDeviceBuffer</code> <p>clear the device input and output buffers</p> <code>read</code> <p>read data from the device</p> <code>readAll</code> <p>read all data from the device</p> <code>write</code> <p>write data to the device</p> <code>poll</code> <p>poll the device (i.e. write and read data)</p> <code>processInput</code> <p>process the input data</p> <code>processOutput</code> <p>process the output data</p> <code>query</code> <p>query the device (i.e. write and read data)</p> <code>startStream</code> <p>start the stream</p> <code>stopStream</code> <p>stop the stream</p> <code>stream</code> <p>toggle the stream</p> <code>showStream</code> <p>show the stream</p> <p>Initialize SerialDevice class</p> PARAMETER DESCRIPTION <code>port</code> <p>serial port for the device. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>baudrate</code> <p>baudrate for the device. Defaults to 9600.</p> <p> TYPE: <code>int</code> DEFAULT: <code>9600</code> </p> <code>timeout</code> <p>timeout for the device. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>init_timeout</code> <p>timeout for initialization. Defaults to 2.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1</code> </p> <code>data_type</code> <p>data type for the device. Defaults to Data.</p> <p> TYPE: <code>NamedTuple</code> DEFAULT: <code>Data</code> </p> <code>read_format</code> <p>read format for the device. Defaults to READ_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>READ_FORMAT</code> </p> <code>write_format</code> <p>write format for the device. Defaults to WRITE_FORMAT.</p> <p> TYPE: <code>str</code> DEFAULT: <code>WRITE_FORMAT</code> </p> <code>simulation</code> <p>whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.baudrate","title":"baudrate  <code>property</code> <code>writable</code>","text":"<pre><code>baudrate: int\n</code></pre> <p>Device baudrate</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.port","title":"port  <code>property</code> <code>writable</code>","text":"<pre><code>port: str\n</code></pre> <p>Device serial port</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.serial","title":"serial  <code>property</code> <code>writable</code>","text":"<pre><code>serial: Serial\n</code></pre> <p>Serial object for the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout: int\n</code></pre> <p>Device timeout</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.checkDeviceBuffer","title":"checkDeviceBuffer","text":"<pre><code>checkDeviceBuffer() -&gt; bool\n</code></pre> <p>Check the connection buffer</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.checkDeviceConnection","title":"checkDeviceConnection","text":"<pre><code>checkDeviceConnection()\n</code></pre> <p>Check the connection to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.clearDeviceBuffer","title":"clearDeviceBuffer","text":"<pre><code>clearDeviceBuffer()\n</code></pre> <p>Clear the device input and output buffers</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.read","title":"read","text":"<pre><code>read() -&gt; str\n</code></pre> <p>Read data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.readAll","title":"readAll","text":"<pre><code>readAll() -&gt; list[str]\n</code></pre> <p>Read all data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SerialDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice","title":"SocketDevice","text":"<pre><code>SocketDevice(\n    host: str,\n    port: int,\n    timeout: int = 0,\n    *,\n    byte_size: int = 1024,\n    simulation: bool = False,\n    verbose: bool = False,\n    **kwargs,\n)\n</code></pre> <p>               Bases: <code>BaseDevice</code></p> <p>SocketDevice provides an interface for handling socket devices</p> ATTRIBUTE DESCRIPTION <code>host</code> <p>device host</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>device port</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>device timeout</p> <p> TYPE: <code>int</code> </p> <code>byte_size</code> <p>size of the byte buffer</p> <p> TYPE: <code>int</code> </p> <code>connection_details</code> <p>connection details for the device</p> <p> TYPE: <code>dict</code> </p> <code>socket</code> <p>socket object for the device</p> <p> TYPE: <code>socket</code> </p> <code>flags</code> <p>flags for the device</p> <p> TYPE: <code>SimpleNamespace[str, bool]</code> </p> <code>is_connected</code> <p>whether the device is connected</p> <p> TYPE: <code>bool</code> </p> <code>verbose</code> <p>verbosity of class</p> <p> TYPE: <code>bool</code> </p> METHOD DESCRIPTION <code>clear</code> <p>clear the input and output buffers, and reset the data queue and buffer</p> <code>connect</code> <p>connect to the device</p> <code>disconnect</code> <p>disconnect from the device</p> <code>checkDeviceConnection</code> <p>check the connection to the device</p> <code>checkDeviceBuffer</code> <p>check the connection buffer</p> <code>clearDeviceBuffer</code> <p>clear the device input and output buffers</p> <code>read</code> <p>read data from the device</p> <code>readAll</code> <p>read all data from the device</p> <code>write</code> <p>write data to the device</p> <code>poll</code> <p>poll the device (i.e. write and read data)</p> <code>processInput</code> <p>process the input data</p> <code>processOutput</code> <p>process the output data</p> <code>query</code> <p>query the device (i.e. write and read data)</p> <code>startStream</code> <p>start the stream</p> <code>stopStream</code> <p>stop the stream</p> <code>stream</code> <p>toggle the stream</p> <code>showStream</code> <p>show the stream</p> <p>Initialize SocketDevice class</p> PARAMETER DESCRIPTION <code>host</code> <p>host for the device</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>port for the device</p> <p> TYPE: <code>int</code> </p> <code>timeout</code> <p>timeout for the device. Defaults to 1.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>byte_size</code> <p>size of the byte buffer. Defaults to 1024.</p> <p> TYPE: <code>int</code> DEFAULT: <code>1024</code> </p> <code>simulation</code> <p>whether to simulate the device. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>verbose</code> <p>verbosity of class. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.address","title":"address  <code>property</code>","text":"<pre><code>address: tuple[str, int]\n</code></pre> <p>Device address</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.host","title":"host  <code>property</code> <code>writable</code>","text":"<pre><code>host: str\n</code></pre> <p>Device socket host</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.port","title":"port  <code>property</code> <code>writable</code>","text":"<pre><code>port: str\n</code></pre> <p>Device socket port</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.socket","title":"socket  <code>property</code> <code>writable</code>","text":"<pre><code>socket: socket\n</code></pre> <p>Socket object for the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.timeout","title":"timeout  <code>property</code> <code>writable</code>","text":"<pre><code>timeout: int\n</code></pre> <p>Device timeout</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.checkDeviceBuffer","title":"checkDeviceBuffer","text":"<pre><code>checkDeviceBuffer() -&gt; bool\n</code></pre> <p>Check the connection buffer</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.checkDeviceConnection","title":"checkDeviceConnection","text":"<pre><code>checkDeviceConnection()\n</code></pre> <p>Check the connection to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.clearDeviceBuffer","title":"clearDeviceBuffer","text":"<pre><code>clearDeviceBuffer()\n</code></pre> <p>Clear the device input and output buffers</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.read","title":"read","text":"<pre><code>read() -&gt; str\n</code></pre> <p>Read data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.readAll","title":"readAll","text":"<pre><code>readAll() -&gt; list[str]\n</code></pre> <p>Read all data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.SocketDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice","title":"StreamingDevice","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for device connection classes</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clear the input and output buffers, and reset the data queue and buffer</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.clearDeviceBuffer","title":"clearDeviceBuffer","text":"<pre><code>clearDeviceBuffer()\n</code></pre> <p>Clear the device input and output buffers</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.processInput","title":"processInput","text":"<pre><code>processInput(\n    data: Any, format_in: str | None = None, **kwargs\n) -&gt; str | None\n</code></pre> <p>Process the input</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.processOutput","title":"processOutput","text":"<pre><code>processOutput(\n    data: str,\n    format_out: str | None = None,\n    data_type: NamedTuple | None = None,\n    timestamp: datetime | None = None,\n    **kwargs,\n) -&gt; tuple[Any, datetime]\n</code></pre> <p>Process the output</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.query","title":"query","text":"<pre><code>query(\n    data: Any, multi_out: bool = True, **kwargs\n) -&gt; Any | None\n</code></pre> <p>Query the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.read","title":"read","text":"<pre><code>read() -&gt; str | None\n</code></pre> <p>Read data from the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.showStream","title":"showStream","text":"<pre><code>showStream(on: bool)\n</code></pre> <p>Show the stream</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.startStream","title":"startStream","text":"<pre><code>startStream(\n    data: str | None = None,\n    buffer: deque | None = None,\n    **kwargs,\n)\n</code></pre> <p>Start the stream</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.stopStream","title":"stopStream","text":"<pre><code>stopStream()\n</code></pre> <p>Stop the stream</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.stream","title":"stream","text":"<pre><code>stream(\n    on: bool,\n    data: str | None = None,\n    buffer: deque | None = None,\n    **kwargs,\n)\n</code></pre> <p>Toggle the stream</p>"},{"location":"site/api/core/device.html#controllably.core.device.StreamingDevice.write","title":"write","text":"<pre><code>write(data: str) -&gt; bool\n</code></pre> <p>Write data to the device</p>"},{"location":"site/api/core/device.html#controllably.core.device.TimedDeviceMixin","title":"TimedDeviceMixin","text":"<pre><code>TimedDeviceMixin(*args, **kwargs)\n</code></pre> <p>Mixin class for timed device operations</p> METHOD DESCRIPTION <code>stopTimer</code> <p>stop a timer</p> <code>setValue</code> <p>set a value</p> <code>setValueDelayed</code> <p>set a value after a delay</p>"},{"location":"site/api/core/device.html#controllably.core.device.TimedDeviceMixin.setValue","title":"setValue","text":"<pre><code>setValue(\n    value: Any, event: Event | None = None, **kwargs\n) -&gt; bool\n</code></pre> <p>Set a value</p> PARAMETER DESCRIPTION <code>value</code> <p>value to set</p> <p> TYPE: <code>Any</code> </p> <code>event</code> <p>event to set or clear. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether the value was set</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/device.html#controllably.core.device.TimedDeviceMixin.setValueDelayed","title":"setValueDelayed","text":"<pre><code>setValueDelayed(\n    duration: int | float,\n    initial: Any | None = None,\n    final: Any | None = None,\n    blocking: bool = True,\n    *,\n    event: Event | None = None,\n    **kwargs,\n) -&gt; Timer | None\n</code></pre> <p>Set a value after a delay</p> PARAMETER DESCRIPTION <code>duration</code> <p>duration of the delay</p> <p> TYPE: <code>int | float</code> </p> <code>initial</code> <p>initial value. Defaults to None.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>final</code> <p>final value. Defaults to None.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> <code>blocking</code> <p>whether to block the main thread. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> <code>event</code> <p>event to set or clear. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Timer | None</code> <p>threading.Timer|None: timer object if blocking is False</p>"},{"location":"site/api/core/device.html#controllably.core.device.TimedDeviceMixin.stopTimer","title":"stopTimer","text":"<pre><code>stopTimer(\n    timer: Timer | None = None, event: Event | None = None\n)\n</code></pre> <p>Stop a timer</p> PARAMETER DESCRIPTION <code>timer</code> <p>timer to stop. Defaults to None.</p> <p> TYPE: <code>Timer | None</code> DEFAULT: <code>None</code> </p> <code>event</code> <p>event to clear. Defaults to None</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/factory.html","title":"Factory","text":"<p>This module contains functions to create and manage objects.</p> FUNCTION DESCRIPTION <code>create</code> <p>Create object of class with arguments and keyword arguments</p> <code>create_from_config</code> <p>Create object of class with dictionary</p> <code>dict_to_named_tuple</code> <p>Creating named tuple from dictionary</p> <code>dict_to_simple_namespace</code> <p>Convert dictionary to SimpleNamespace</p> <code>get_class</code> <p>Retrieve the relevant class from the sub-package</p> <code>get_imported_modules</code> <p>Get all imported modules</p> <code>get_method_names</code> <p>Get the names of the methods in Callable object (Class/Instance)</p> <code>get_plans</code> <p>Get available configurations</p> <code>get_setup</code> <p>Load setup from files and return as NamedTuple or Platform</p> <code>load_parts</code> <p>Load all parts of compound tools from configuration</p> <code>load_setup_from_files</code> <p>Load and initialise setup</p> <code>parse_configs</code> <p>Decode dictionary of configuration details to get tuples and numpy.ndarray</p> <code>zip_kwargs_to_dict</code> <p>Checks and zips multiple keyword arguments of lists into dictionary</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.Part","title":"Part","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for Part (i.e. component tools)</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.Part.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the device</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.Part.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the device</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.Part.resetFlags","title":"resetFlags","text":"<pre><code>resetFlags()\n</code></pre> <p>Reset all flags to class attribute <code>_default_flags</code></p>"},{"location":"site/api/core/factory.html#controllably.core.factory.Part.shutdown","title":"shutdown","text":"<pre><code>shutdown()\n</code></pre> <p>Shutdown the device</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.create","title":"create","text":"<pre><code>create(obj: Callable, *args, **kwargs) -&gt; object\n</code></pre> <p>Create object of class with arguments and keyword arguments</p> PARAMETER DESCRIPTION <code>obj</code> <p>target class</p> <p> TYPE: <code>Callable</code> </p> <code>args</code> <p>arguments for class. Defaults to tuple().</p> <p> TYPE: <code>Iterable[Any]</code> DEFAULT: <code>()</code> </p> <code>kwargs</code> <p>keyword arguments for class. Defaults to dict().</p> <p> TYPE: <code>Mapping[str, Any]</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>object</code> <p>object of target class</p> <p> TYPE: <code>object</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.create_from_config","title":"create_from_config","text":"<pre><code>create_from_config(config: dict) -&gt; object\n</code></pre> <p>Create object of class with dictionary</p> PARAMETER DESCRIPTION <code>config</code> <p>dictionary of arguments</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>object</code> <p>object of target class</p> <p> TYPE: <code>object</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.dict_to_named_tuple","title":"dict_to_named_tuple","text":"<pre><code>dict_to_named_tuple(\n    d: dict, tuple_name: str = \"Setup\"\n) -&gt; tuple\n</code></pre> <p>Creating named tuple from dictionary</p> PARAMETER DESCRIPTION <code>d</code> <p>dictionary to be transformed</p> <p> TYPE: <code>dict</code> </p> <code>tuple_name</code> <p>name of new namedtuple type. Defaults to 'Setup'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Setup'</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>named tuple from dictionary</p> <p> TYPE: <code>tuple</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.dict_to_simple_namespace","title":"dict_to_simple_namespace","text":"<pre><code>dict_to_simple_namespace(d: dict) -&gt; SimpleNamespace\n</code></pre> <p>Convert dictionary to SimpleNamespace</p> PARAMETER DESCRIPTION <code>d</code> <p>dictionary to be transformed</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>SimpleNamespace</code> <p>SimpleNamespace object</p> <p> TYPE: <code>SimpleNamespace</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.get_class","title":"get_class","text":"<pre><code>get_class(\n    module_name: str, class_name: str\n) -&gt; Type[object]\n</code></pre> <p>Retrieve the relevant class from the sub-package</p> PARAMETER DESCRIPTION <code>module_name</code> <p>name of the module using dot notation</p> <p> TYPE: <code>str</code> </p> <code>class_name</code> <p>name of the class</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Type</code> <p>target Class</p> <p> TYPE: <code>Type[object]</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.get_imported_modules","title":"get_imported_modules","text":"<pre><code>get_imported_modules(\n    interested_modules: str | Sequence[str] | None = None,\n) -&gt; dict\n</code></pre> <p>Get all imported modules</p> PARAMETER DESCRIPTION <code>interested_modules</code> <p>interested module(s). Defaults to None.</p> <p> TYPE: <code>str | Sequence[str] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of imported modules</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.get_method_names","title":"get_method_names","text":"<pre><code>get_method_names(obj: Callable) -&gt; list[str]\n</code></pre> <p>Get the names of the methods in Callable object (Class/Instance)</p> PARAMETER DESCRIPTION <code>obj</code> <p>object of interest</p> <p> TYPE: <code>Callable</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: list of method names</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.get_plans","title":"get_plans","text":"<pre><code>get_plans(\n    configs: dict, registry: dict | None = None\n) -&gt; dict\n</code></pre> <p>Get available configurations</p> PARAMETER DESCRIPTION <code>configs</code> <p>dictionary of configurations</p> <p> TYPE: <code>dict</code> </p> <code>registry</code> <p>dictionary of addresses. Defaults to None.</p> <p> TYPE: <code>dict | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of available configurations</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.get_setup","title":"get_setup","text":"<pre><code>get_setup(\n    config_file: Path | str,\n    registry_file: Path | str | None = None,\n    platform_type: Type | None = None,\n    silent_fail: bool = False,\n) -&gt; tuple | Any\n</code></pre> <p>Load setup from files and return as NamedTuple or Platform</p> PARAMETER DESCRIPTION <code>config_file</code> <p>config filename</p> <p> TYPE: <code>Path | str</code> </p> <code>registry_file</code> <p>registry filename. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>platform_type</code> <p>target platform type. Defaults to None.</p> <p> TYPE: <code>Type | None</code> DEFAULT: <code>None</code> </p> <code>silent_fail</code> <p>whether to let setup errors through without raising an exception. Defualts to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tuple | Any</code> <p>tuple|Any: named tuple or Platform object</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.load_parts","title":"load_parts","text":"<pre><code>load_parts(configs: dict, **kwargs) -&gt; dict\n</code></pre> <p>Load all parts of compound tools from configuration</p> PARAMETER DESCRIPTION <code>configs</code> <p>dictionary of configuration parameters</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of part tools</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.load_setup_from_files","title":"load_setup_from_files","text":"<pre><code>load_setup_from_files(\n    config_file: Path | str,\n    registry_file: Path | str | None = None,\n    create_tuple: bool = True,\n) -&gt; dict | tuple\n</code></pre> <p>Load and initialise setup</p> PARAMETER DESCRIPTION <code>config_file</code> <p>config filename</p> <p> TYPE: <code>Path | str</code> </p> <code>registry_file</code> <p>registry filename. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>create_tuple</code> <p>whether to return a named tuple, if not returns dictionary. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>dict | tuple</code> <p>dict|tuple: dictionary or named tuple of setup objects</p>"},{"location":"site/api/core/factory.html#controllably.core.factory.parse_configs","title":"parse_configs","text":"<pre><code>parse_configs(\n    configs: dict, addresses: dict | None = None\n) -&gt; dict\n</code></pre> <p>Decode dictionary of configuration details to get tuples and <code>numpy.ndarray</code></p> PARAMETER DESCRIPTION <code>configs</code> <p>dictionary of configuration details</p> <p> TYPE: <code>dict</code> </p> <code>addresses</code> <p>dictionary of registered addresses. Defaults to None.</p> <p> TYPE: <code>dict | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of configuration details</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/factory.html#controllably.core.factory.zip_kwargs_to_dict","title":"zip_kwargs_to_dict","text":"<pre><code>zip_kwargs_to_dict(primary_key: str, kwargs: dict) -&gt; dict\n</code></pre> <p>Checks and zips multiple keyword arguments of lists into dictionary</p> PARAMETER DESCRIPTION <code>primary_key</code> <p>primary keyword to be used as key</p> <p> TYPE: <code>str</code> </p> <code>kwargs</code> <p>{keyword, list of values} pairs</p> <p> TYPE: <code>dict</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>dictionary of (primary keyword, kwargs)</p> <p> TYPE: <code>dict</code> </p> RAISES DESCRIPTION <code>AssertionError</code> <p>Ensure the lengths of inputs are the same</p>"},{"location":"site/api/core/file_handler.html","title":"File Handler","text":"<p>This module contains functions to handle files and folders.</p> ATTRIBUTE DESCRIPTION <code>TEMP_ZIP</code> <p>temporary zip file path</p> <p> TYPE: <code>Path</code> </p> FUNCTION DESCRIPTION <code>create_folder</code> <p>Check and create folder if it does not exist</p> <code>init</code> <p>Add repository to sys.path, and get machine id and connected ports</p> <code>read_config_file</code> <p>Read configuration file and return as dictionary</p> <code>readable_duration</code> <p>Display time duration (s) as HH:MM:SS text</p> <code>resolve_repo_filepath</code> <p>Resolve relative path to absolute path</p> <code>start_project_here</code> <p>Create new project in destination directory</p> <code>zip_files</code> <p>Zip files and return zip file path</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.create_folder","title":"create_folder","text":"<pre><code>create_folder(\n    base: Path | str = \"\", sub: Path | str = \"\"\n) -&gt; Path\n</code></pre> <p>Check and create folder if it does not exist</p> PARAMETER DESCRIPTION <code>base</code> <p>parent folder directory. Defaults to ''.</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>''</code> </p> <code>sub</code> <p>child folder directory. Defaults to ''.</p> <p> TYPE: <code>Path | str</code> DEFAULT: <code>''</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>name of main folder</p> <p> TYPE: <code>Path</code> </p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.init","title":"init","text":"<pre><code>init(repository: str | Path) -&gt; str\n</code></pre> <p>Add repository to <code>sys.path</code>, and getting machine id and connected ports</p> PARAMETER DESCRIPTION <code>repository</code> <p>name of current repository, or path to repository folder</p> <p> TYPE: <code>str | Path</code> </p> RETURNS DESCRIPTION <code>str</code> <p>target directory path</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.read_config_file","title":"read_config_file","text":"<pre><code>read_config_file(filepath: Path | str) -&gt; dict\n</code></pre> <p>Read configuration file and return as dictionary</p> PARAMETER DESCRIPTION <code>filepath</code> <p>path to configuration file</p> <p> TYPE: <code>Path | str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>configuration file as dictionary</p> <p> TYPE: <code>dict</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>Unsupported file type</p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.readable_duration","title":"readable_duration","text":"<pre><code>readable_duration(total_time: float) -&gt; str\n</code></pre> <p>Display time duration (s) as HH:MM:SS text</p> PARAMETER DESCRIPTION <code>total_time</code> <p>duration in seconds</p> <p> TYPE: <code>float</code> </p> RETURNS DESCRIPTION <code>str</code> <p>formatted time string</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.resolve_repo_filepath","title":"resolve_repo_filepath","text":"<pre><code>resolve_repo_filepath(filepath: Path | str) -&gt; Path\n</code></pre> <p>Resolve relative path to absolute path</p> PARAMETER DESCRIPTION <code>filepath</code> <p>relative path to file</p> <p> TYPE: <code>Path | str</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>absolute path to file</p> <p> TYPE: <code>Path</code> </p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.start_project_here","title":"start_project_here","text":"<pre><code>start_project_here(dst: Path | str | None = None)\n</code></pre> <p>Create new project in destination directory.  If destination is not provided, create in current directory</p> PARAMETER DESCRIPTION <code>dst</code> <p>destination folder. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/file_handler.html#controllably.core.file_handler.zip_files","title":"zip_files","text":"<pre><code>zip_files(\n    filepaths: Iterable[Path],\n    zip_filepath: str | Path | None = None,\n) -&gt; Path\n</code></pre> <p>Zip files and return zip file path</p> PARAMETER DESCRIPTION <code>filepaths</code> <p>list of file paths</p> <p> TYPE: <code>Iterable[Path]</code> </p> <code>zip_filepath</code> <p>zip file path. Defaults to None.</p> <p> TYPE: <code>str | Path | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path</code> <p>zip file path</p> <p> TYPE: <code>Path</code> </p>"},{"location":"site/api/core/interpreter.html","title":"Interpreter","text":"<p>This module contains the Interpreter abstract class and its implementation JSONInterpreter.</p> CLASS DESCRIPTION <code>Interpreter</code> <p>Abstract class for encoding and decoding messages.</p> <code>JSONInterpreter</code> <p>Class for encoding and decoding messages in JSON format.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.Interpreter","title":"Interpreter","text":"<pre><code>Interpreter()\n</code></pre> <p>Abstract class for encoding and decoding messages.</p> METHOD DESCRIPTION <code>decodeRequest</code> <p>Decode a request message into a command dictionary.</p> <code>encodeData</code> <p>Encode data into a message.</p> <code>encodeRequest</code> <p>Encode a command dictionary into a request message.</p> <code>decodeData</code> <p>Decode a message into data.</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.Interpreter.decodeData","title":"decodeData  <code>staticmethod</code>","text":"<pre><code>decodeData(packet: str | bytes) -&gt; dict[str, Any]\n</code></pre> <p>Decode a message into data.</p> PARAMETER DESCRIPTION <code>packet</code> <p>message to be decoded</p> <p> TYPE: <code>str | bytes</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: decoded data</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.Interpreter.decodeRequest","title":"decodeRequest  <code>staticmethod</code>","text":"<pre><code>decodeRequest(packet: str | bytes) -&gt; dict[str, Any]\n</code></pre> <p>Decode a request message into a command dictionary.</p> PARAMETER DESCRIPTION <code>packet</code> <p>request message to be decoded</p> <p> TYPE: <code>str | bytes</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: command dictionary</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.Interpreter.encodeData","title":"encodeData  <code>staticmethod</code>","text":"<pre><code>encodeData(data: Any) -&gt; bytes\n</code></pre> <p>Encode data into a message.</p> PARAMETER DESCRIPTION <code>data</code> <p>data to be encoded</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>encoded message in bytes</p> <p> TYPE: <code>bytes</code> </p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.Interpreter.encodeRequest","title":"encodeRequest  <code>staticmethod</code>","text":"<pre><code>encodeRequest(command: Mapping[str, Any]) -&gt; bytes\n</code></pre> <p>Encode a command dictionary into a request message.</p> PARAMETER DESCRIPTION <code>command</code> <p>command dictionary</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>request message in bytes</p> <p> TYPE: <code>bytes</code> </p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.JSONInterpreter","title":"JSONInterpreter","text":"<pre><code>JSONInterpreter()\n</code></pre> <p>               Bases: <code>Interpreter</code></p> <p>Class for encoding and decoding messages in JSON format.</p> METHOD DESCRIPTION <code>decodeRequest</code> <p>Decode a request message into a command dictionary.</p> <code>encodeData</code> <p>Encode data into a message.</p> <code>encodeRequest</code> <p>Encode a command dictionary into a request message.</p> <code>decodeData</code> <p>Decode a message into data</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.JSONInterpreter.decodeData","title":"decodeData  <code>staticmethod</code>","text":"<pre><code>decodeData(packet: str | bytes) -&gt; dict[str, Any]\n</code></pre> <p>Decode a message into data.</p> PARAMETER DESCRIPTION <code>packet</code> <p>message to be decoded</p> <p> TYPE: <code>str | bytes</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: decoded data</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.JSONInterpreter.decodeRequest","title":"decodeRequest  <code>staticmethod</code>","text":"<pre><code>decodeRequest(packet: str | bytes) -&gt; dict[str, Any]\n</code></pre> <p>Decode a request message into a command dictionary.</p> PARAMETER DESCRIPTION <code>packet</code> <p>request message</p> <p> TYPE: <code>str | bytes</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: command dictionary</p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.JSONInterpreter.encodeData","title":"encodeData  <code>staticmethod</code>","text":"<pre><code>encodeData(data: Mapping[str, Any]) -&gt; bytes\n</code></pre> <p>Encode data into a message.</p> PARAMETER DESCRIPTION <code>data</code> <p>data to be encoded</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>encoded message</p> <p> TYPE: <code>bytes</code> </p>"},{"location":"site/api/core/interpreter.html#controllably.core.interpreter.JSONInterpreter.encodeRequest","title":"encodeRequest  <code>staticmethod</code>","text":"<pre><code>encodeRequest(command: Mapping[str, Any]) -&gt; bytes\n</code></pre> <p>Encode a command dictionary into a request message.</p> PARAMETER DESCRIPTION <code>command</code> <p>command dictionary</p> <p> TYPE: <code>Mapping[str, Any]</code> </p> RETURNS DESCRIPTION <code>bytes</code> <p>request message</p> <p> TYPE: <code>bytes</code> </p>"},{"location":"site/api/core/log_filters.html","title":"Log Filters","text":"<p>This module contains custom logging filters for controlling log levels and filtering logs based on module names or application roots.</p> CLASS DESCRIPTION <code>CustomLevelFilter</code> <p>A filter that allows setting different minimum logging levels for different modules on a specific handler.</p> <code>AppFilter</code> <p>A filter that allows/blocks logs based on whether their logger name starts with a specified application root name.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/log_filters.html#controllably.core.log_filters.AppFilter","title":"AppFilter","text":"<pre><code>AppFilter(app_root_name: str, invert: bool = False)\n</code></pre> <p>               Bases: <code>Filter</code></p> <p>A filter that allows/blocks logs based on whether their logger name starts with a specified application root name.</p>"},{"location":"site/api/core/log_filters.html#controllably.core.log_filters.CustomLevelFilter","title":"CustomLevelFilter","text":"<pre><code>CustomLevelFilter(default_level_name: str = 'WARNING')\n</code></pre> <p>               Bases: <code>Filter</code></p> <p>A filter that allows setting different minimum logging levels for different modules on a specific handler.</p>"},{"location":"site/api/core/log_filters.html#controllably.core.log_filters.CustomLevelFilter.clear","title":"clear","text":"<pre><code>clear()\n</code></pre> <p>Clears all custom module levels, reverting to default.</p>"},{"location":"site/api/core/log_filters.html#controllably.core.log_filters.CustomLevelFilter.getModuleLevel","title":"getModuleLevel","text":"<pre><code>getModuleLevel(module_name: str) -&gt; int\n</code></pre> <p>Gets the currently set level for a module or its parent, or default</p> PARAMETER DESCRIPTION <code>module_name</code> <p>Name of the module for which to get the level</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>int</code> <p>The logging level for the module, or the default level if not set</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/core/log_filters.html#controllably.core.log_filters.CustomLevelFilter.setModuleLevel","title":"setModuleLevel","text":"<pre><code>setModuleLevel(module_name: str, level: int)\n</code></pre> <p>Sets the minimum level for a given module on this handler</p> PARAMETER DESCRIPTION <code>module_name</code> <p>Name of the module for which to set the level</p> <p> TYPE: <code>str</code> </p> <code>level</code> <p>The logging level to set for this module</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/core/logging.html","title":"Logging","text":"<p>This module contains functions to handle logging in the application.</p> FUNCTION DESCRIPTION <code>get_git_info</code> <p>Get current git branch name, short commit hash, and commit datetime in UTC</p> <code>get_package_info</code> <p>Get package information (local, editable, source path)</p> <code>log_version_info</code> <p>Log version information of the package</p> <code>start_logging</code> <p>Start logging to file</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/logging.html#controllably.core.logging.get_git_info","title":"get_git_info","text":"<pre><code>get_git_info(\n    directory: str = \".\",\n) -&gt; tuple[str | None, str | None, datetime | None]\n</code></pre> <p>Get current git branch name, short commit hash, and commit datetime in UTC.</p> PARAMETER DESCRIPTION <code>directory</code> <p>path to git repository. Defaults to '.'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'.'</code> </p> RETURNS DESCRIPTION <code>tuple[str | None, str | None, datetime | None]</code> <p>tuple[str|None, str|None]: branch name, short commit hash, commit datetime in UTC</p>"},{"location":"site/api/core/logging.html#controllably.core.logging.get_package_info","title":"get_package_info","text":"<pre><code>get_package_info(\n    package_name: str,\n) -&gt; tuple[bool, bool, Path | None]\n</code></pre> <p>Get package information (local, editable, source path)</p> PARAMETER DESCRIPTION <code>package_name</code> <p>name of the package</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>tuple[bool, bool, Path | None]</code> <p>tuple[bool, bool, Path|None]: is_local, is_editable, source_path</p>"},{"location":"site/api/core/logging.html#controllably.core.logging.log_version_info","title":"log_version_info","text":"<pre><code>log_version_info()\n</code></pre> <p>Log version information of the package</p>"},{"location":"site/api/core/logging.html#controllably.core.logging.start_logging","title":"start_logging","text":"<pre><code>start_logging(\n    log_dir: Path | str | None = None,\n    log_file: Path | str | None = None,\n    log_config_file: Path | str | None = None,\n    logging_config: dict | None = None,\n) -&gt; Path | None\n</code></pre> <p>Start logging to file. Default logging behavior is to log to file in current working directory.</p> PARAMETER DESCRIPTION <code>log_dir</code> <p>log directory path. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>log_file</code> <p>log file path. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>log_config_file</code> <p>path to logging configuration file. Defaults to None.</p> <p> TYPE: <code>Path | str | None</code> DEFAULT: <code>None</code> </p> <code>logging_config</code> <p>logging configuration. Defaults to None.</p> <p> TYPE: <code>dict | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Path | None</code> <p>Path|None: path to log file; None if logging_config is provided</p>"},{"location":"site/api/core/notification.html","title":"Notification","text":"<p>This module contains classes for sending notifications.</p> ATTRIBUTE DESCRIPTION <code>FILENAME_TIME_FORMAT</code> <p>time format for filenames</p> <p> TYPE: <code>str</code> </p> CLASS DESCRIPTION <code>Notifier</code> <p>class for sending notifications</p> <code>EmailNotifier</code> <p>class for sending email notifications</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/notification.html#controllably.core.notification.EmailNotifier","title":"EmailNotifier","text":"<pre><code>EmailNotifier(configs: dict)\n</code></pre> <p>               Bases: <code>Notifier</code></p> <p>EmailNotifier class for sending email notifications. Use the EmailNotifier class as context manager to handle app passwords securely.</p> ATTRIBUTE DESCRIPTION <code>configs</code> <p>configuration details for the notifier</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>fromFile</code> <p>create a Notifier object from a configuration file</p> <code>writeMessage</code> <p>write a message</p> <code>writeEmail</code> <p>write an email message</p> <code>notify</code> <p>write and send a message through chosen service</p> <code>sendMessage</code> <p>send a message through chosen service</p> <code>sendEmail</code> <p>send an email message through chosen server</p>"},{"location":"site/api/core/notification.html#controllably.core.notification.EmailNotifier.sendEmail","title":"sendEmail","text":"<pre><code>sendEmail(\n    service_config: dict,\n    username: str,\n    message: EmailMessage,\n)\n</code></pre> <p>Send an email message through chosen server</p> PARAMETER DESCRIPTION <code>service_config</code> <p>configuration details for the service</p> <p> TYPE: <code>dict</code> </p> <code>username</code> <p>username for the service</p> <p> TYPE: <code>str</code> </p> <code>message</code> <p>email message to be sent</p> <p> TYPE: <code>EmailMessage</code> </p>"},{"location":"site/api/core/notification.html#controllably.core.notification.EmailNotifier.writeEmail","title":"writeEmail  <code>classmethod</code>","text":"<pre><code>writeEmail(\n    message_config: dict,\n    placeholders: dict | None = None,\n    *args,\n    attachments: Iterable[Path] | None = None,\n    save_zip: bool = False,\n    time_format: str = \"%Y-%m-%d %H:%M:%S\",\n    **kwargs,\n) -&gt; EmailMessage\n</code></pre> <p>Write an email message</p> PARAMETER DESCRIPTION <code>message_config</code> <p>configuration details for the message</p> <p> TYPE: <code>dict</code> </p> <code>placeholders</code> <p>placeholders for the message</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> <code>attachments</code> <p>filepaths of attachments to be sent</p> <p> TYPE: <code>Iterable[Path]</code> DEFAULT: <code>None</code> </p> <code>save_zip</code> <p>whether to save the attachments as a zip file</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>time_format</code> <p>time format for the message</p> <p> TYPE: <code>str</code> DEFAULT: <code>'%Y-%m-%d %H:%M:%S'</code> </p> RETURNS DESCRIPTION <code>EmailMessage</code> <p><code>EmailMessage</code>: email message to be sent</p>"},{"location":"site/api/core/notification.html#controllably.core.notification.Notifier","title":"Notifier","text":"<pre><code>Notifier(configs: dict)\n</code></pre> <p>Notifier class for sending notifications. Use the Notifier class as context manager to handle app passwords securely.</p> ATTRIBUTE DESCRIPTION <code>configs</code> <p>configuration details for the notifier</p> <p> TYPE: <code>dict</code> </p> METHOD DESCRIPTION <code>fromFile</code> <p>create a Notifier object from a configuration file</p> <code>writeMessage</code> <p>write a message</p> <code>notify</code> <p>write and send a message through chosen service</p> <code>sendMessage</code> <p>send a message through chosen service</p> <p>Initialize <code>Notifier</code> class</p> PARAMETER DESCRIPTION <code>configs</code> <p>configuration details for the notifier</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/notification.html#controllably.core.notification.Notifier.fromFile","title":"fromFile  <code>classmethod</code>","text":"<pre><code>fromFile(config_file: str | Path) -&gt; Notifier\n</code></pre> <p>Create a <code>Notifier</code> object from a configuration file</p> PARAMETER DESCRIPTION <code>config_file</code> <p>Path to the configuration file</p> <p> TYPE: <code>str | Path</code> </p> RETURNS DESCRIPTION <code>Notifier</code> <p>Notifier object created from the configuration file</p> <p> TYPE: <code>Notifier</code> </p>"},{"location":"site/api/core/notification.html#controllably.core.notification.Notifier.notify","title":"notify","text":"<pre><code>notify(placeholders: dict | None = None, **kwargs)\n</code></pre> <p>Write and send a message through chosen service</p> PARAMETER DESCRIPTION <code>placeholders</code> <p>placeholders for the message</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/core/notification.html#controllably.core.notification.Notifier.sendMessage","title":"sendMessage","text":"<pre><code>sendMessage(\n    service_config: dict, username: str, message: Any\n)\n</code></pre> <p>Send a message through chosen service</p> PARAMETER DESCRIPTION <code>service_config</code> <p>configuration details for the service</p> <p> TYPE: <code>dict</code> </p> <code>username</code> <p>username for the service</p> <p> TYPE: <code>str</code> </p> <code>message</code> <p>message to be sent</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/core/notification.html#controllably.core.notification.Notifier.writeMessage","title":"writeMessage  <code>classmethod</code>","text":"<pre><code>writeMessage(\n    message_config: dict,\n    placeholders: dict | None = None,\n    *args,\n    **kwargs,\n) -&gt; Any\n</code></pre> <p>Write a message</p> PARAMETER DESCRIPTION <code>message_config</code> <p>configuration details for the message</p> <p> TYPE: <code>dict</code> </p> <code>placeholders</code> <p>placeholders for the message</p> <p> TYPE: <code>dict</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>message to be sent</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/core/position.html","title":"Position","text":"<p>This module contains classes and functions for dealing with positioning in a robotic set up.</p> ATTRIBUTE DESCRIPTION <code>MTP_DIMENSIONS</code> <p>Microtiter plate dimensions in mm</p> <p> TYPE: <code>tuple[float]</code> </p> <code>OBB_DIMENSIONS</code> <p>Optical Breadboard dimensions in mm</p> <p> TYPE: <code>tuple[float]</code> </p> CLASS DESCRIPTION <code>Position</code> <p>represents a 3D position with orientation</p> <code>Well</code> <p>represents a single well in a Labware object</p> <code>Labware</code> <p>represents a single Labware object</p> <code>Slot</code> <p>represents a single Slot object on a Deck object or another Labware object (for stackable Labware)</p> <code>Deck</code> <p>represents a Deck object</p> <code>BoundingVolume</code> <p>represents a 3D bounding volume</p> <code>BoundingBox</code> <p>represents a 3D bounding box</p> FUNCTION DESCRIPTION <code>convert_to_position</code> <p>Convert a value to a Position object</p> <code>get_transform</code> <p>Get transformation matrix from initial to final points, with the first point in each set being the center of rotation</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/position.html#controllably.core.position.MTP_DIMENSIONS","title":"MTP_DIMENSIONS  <code>module-attribute</code>","text":"<pre><code>MTP_DIMENSIONS = (127.76, 85.48, 0)\n</code></pre> <p>Microtiter plate dimensions in mm</p>"},{"location":"site/api/core/position.html#controllably.core.position.OBB_DIMENSIONS","title":"OBB_DIMENSIONS  <code>module-attribute</code>","text":"<pre><code>OBB_DIMENSIONS = (300, 300, 0)\n</code></pre> <p>Optical Breadboard dimensions in mm</p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingBox","title":"BoundingBox  <code>dataclass</code>","text":"<pre><code>BoundingBox(\n    *,\n    parametric_function: dict[\n        str, Callable[[Sequence[float], Any], bool]\n    ],\n    reference: Position = Position(),\n    dimensions: Sequence[float] | ndarray = (0, 0, 0),\n    buffer: Sequence[Sequence[float]] | ndarray = (\n        (0, 0, 0),\n        (0, 0, 0),\n    ),\n)\n</code></pre> <p>               Bases: <code>BoundingVolume</code></p> <p>BoundingBox represents a single BoundingBox object</p> ATTRIBUTE DESCRIPTION <code>reference</code> <p>reference point</p> <p> TYPE: <code>Position</code> </p> <code>dimensions</code> <p>x,y,z dimensions</p> <p> TYPE: <code>ndarray</code> </p> <code>buffer</code> <p>lower and upper buffer</p> <p> TYPE: <code>ndarray</code> </p> <code>bounds</code> <p>lower and upper bounds</p> <p> TYPE: <code>ndarray</code> </p> METHOD DESCRIPTION <code>contains</code> <p>check if point is within BoundingBox</p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingBox.bounds","title":"bounds  <code>property</code>","text":"<pre><code>bounds\n</code></pre> <p>Lower and upper bounds</p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingBox.__add__","title":"__add__","text":"<pre><code>__add__(\n    other: BoundingVolume | BoundingBox | None,\n) -&gt; BoundingVolume | BoundingBox\n</code></pre> <p>Add two BoundingVolumes together</p> PARAMETER DESCRIPTION <code>other</code> <p>another <code>BoundingVolume</code> or <code>BoundingBox</code> object</p> <p> TYPE: <code>BoundingVolume | BoundingBox | None</code> </p> RETURNS DESCRIPTION <code>BoundingVolume | BoundingBox</code> <p>BoundingVolume|BoundingBox: new <code>BoundingVolume</code> or <code>BoundingBox</code> object</p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingVolume","title":"BoundingVolume  <code>dataclass</code>","text":"<pre><code>BoundingVolume(\n    *,\n    parametric_function: dict[\n        str, Callable[[Sequence[float], Any], bool]\n    ],\n)\n</code></pre> <p>BoundingVolume represents a single BoundingVolume object</p> ATTRIBUTE DESCRIPTION <code>parametric_function</code> <p>name, parametric function</p> <p> TYPE: <code>dict[str, Callable[[Sequence[float],Any], bool]</code> </p> METHOD DESCRIPTION <code>contains</code> <p>check if point is within BoundingVolume</p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingVolume.__add__","title":"__add__","text":"<pre><code>__add__(other: BoundingVolume | None) -&gt; BoundingVolume\n</code></pre> <p>Add two BoundingVolumes together</p> PARAMETER DESCRIPTION <code>other</code> <p>another <code>BoundingVolume</code> object</p> <p> TYPE: <code>BoundingVolume | None</code> </p> RETURNS DESCRIPTION <code>BoundingVolume</code> <p>new <code>BoundingVolume</code> object</p> <p> TYPE: <code>BoundingVolume</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.BoundingVolume.contains","title":"contains","text":"<pre><code>contains(point: Sequence[float] | ndarray) -&gt; bool\n</code></pre> <p>Check if point is within BoundingVolume</p> PARAMETER DESCRIPTION <code>point</code> <p>x,y,z coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether point is within BoundingVolume</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck","title":"Deck  <code>dataclass</code>","text":"<pre><code>Deck(\n    name: str,\n    _details: dict[str, Any],\n    parent: Deck | None = None,\n    _nesting_lineage: tuple[Path] = (None,),\n)\n</code></pre> <p>Deck represents a single Deck object</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>name of Deck</p> <p> TYPE: <code>str</code> </p> <code>native</code> <p>native Deck object (i.e. without parent)</p> <p> TYPE: <code>Deck</code> </p> <code>details</code> <p>dictionary read from Deck file</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>parent</code> <p>parent Deck object</p> <p> TYPE: <code>Deck | None</code> </p> <code>reference</code> <p>reference point of Deck</p> <p> TYPE: <code>Position</code> </p> <code>x</code> <p>x offset</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>y offset</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>z offset</p> <p> TYPE: <code>float</code> </p> <code>offset</code> <p>Deck offset from parent Deck reference point</p> <p> TYPE: <code>ndarray</code> </p> <code>center</code> <p>center of Deck</p> <p> TYPE: <code>ndarray</code> </p> <code>bottom_left_corner</code> <p>bottom left corner of Deck</p> <p> TYPE: <code>Position</code> </p> <code>dimensions</code> <p>size of Deck</p> <p> TYPE: <code>ndarray</code> </p> <code>exclusion_zone</code> <p>exclusion zones to avoid</p> <p> TYPE: <code>dict[str, BoundingBox]</code> </p> <code>slots</code> <p>contained Slot objects</p> <p> TYPE: <code>dict[str, Slot]</code> </p> <code>zones</code> <p>nested Deck objects</p> <p> TYPE: <code>dict[str, Deck]</code> </p> <code>entry_waypoints</code> <p>entry waypoints for Deck</p> <p> TYPE: <code>list[Position]</code> </p> <code>at</code> <p>namespace of all Slots</p> <p> TYPE: <code>SimpleNamespace</code> </p> <code>on</code> <p>namespace of all nested Decks</p> <p> TYPE: <code>SimpleNamespace</code> </p> METHOD DESCRIPTION <code>fromConfigs</code> <p>factory method to load Deck details from dictionary</p> <code>fromFile</code> <p>factory method to load Deck from file</p> <code>getAllPositions</code> <p>get all positions in Deck</p> <code>getSlot</code> <p>get Slot using its name or index</p> <code>isExcluded</code> <p>checks and returns whether the coordinates are in an excluded region</p> <code>loadNestedDeck</code> <p>load nested Deck object from dictionary</p> <code>loadLabware</code> <p>load Labware into Slot</p> <code>removeLabware</code> <p>remove Labware from Slot using its name or index</p> <code>transferLabware</code> <p>transfer Labware between Slots</p> <code>show</code> <p>show Deck on matplotlib axis</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.at","title":"at  <code>property</code>","text":"<pre><code>at: SimpleNamespace\n</code></pre> <p>Namespace of all Slots</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.center","title":"center  <code>property</code>","text":"<pre><code>center: ndarray\n</code></pre> <p>Center of Deck</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.dimensions","title":"dimensions  <code>property</code>","text":"<pre><code>dimensions: ndarray\n</code></pre> <p>Size of Deck</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.exclusion_zone","title":"exclusion_zone  <code>property</code>","text":"<pre><code>exclusion_zone: dict[str, BoundingBox]\n</code></pre> <p>Exclusion zones to avoid</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.native","title":"native  <code>property</code>","text":"<pre><code>native: Deck\n</code></pre> <p>Native Deck object (i.e. without parent)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: ndarray\n</code></pre> <p>Deck offset from parent <code>Deck</code> reference point</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.on","title":"on  <code>property</code>","text":"<pre><code>on: SimpleNamespace\n</code></pre> <p>Namespace of all nested Decks</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.reference","title":"reference  <code>property</code>","text":"<pre><code>reference: Position\n</code></pre> <p>Reference point of <code>Deck</code></p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.slots","title":"slots  <code>property</code>","text":"<pre><code>slots: dict[str, Slot]\n</code></pre> <p>Contained <code>Slot</code> objects</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.zones","title":"zones  <code>property</code>","text":"<pre><code>zones: dict[str, Deck]\n</code></pre> <p>Nested <code>Deck</code> objects</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.fromConfigs","title":"fromConfigs  <code>classmethod</code>","text":"<pre><code>fromConfigs(\n    details: dict[str, Any],\n    parent: Deck | None = None,\n    _nesting_lineage: Sequence[Path | None] = (None,),\n) -&gt; Deck\n</code></pre> <p>Factory method to load Deck details from dictionary</p> PARAMETER DESCRIPTION <code>details</code> <p>dictionary read from Deck file</p> <p> TYPE: <code>dict</code> </p> <code>parent</code> <p>parent <code>Deck</code> object. Defaults to None.</p> <p> TYPE: <code>Deck | None</code> DEFAULT: <code>None</code> </p> <code>_nesting_lineage</code> <p>lineage of nested decks. Defaults to (None,).</p> <p> TYPE: <code>Sequence[Path | None]</code> DEFAULT: <code>(None,)</code> </p> RETURNS DESCRIPTION <code>Deck</code> <p><code>Deck</code> object</p> <p> TYPE: <code>Deck</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.fromFile","title":"fromFile  <code>classmethod</code>","text":"<pre><code>fromFile(\n    deck_file: str,\n    parent: Deck | None = None,\n    from_repo: bool = True,\n) -&gt; Deck\n</code></pre> <p>Factory method to load Deck from file</p> PARAMETER DESCRIPTION <code>deck_file</code> <p>filepath of Deck file</p> <p> TYPE: <code>str</code> </p> <code>parent</code> <p>parent <code>Deck</code> object. Defaults to None.</p> <p> TYPE: <code>Deck | None</code> DEFAULT: <code>None</code> </p> <code>from_repo</code> <p>whether to load from repo. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Deck</code> <p><code>Deck</code> object</p> <p> TYPE: <code>Deck</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.getAllPositions","title":"getAllPositions","text":"<pre><code>getAllPositions() -&gt; dict[str, tuple[float] | dict]\n</code></pre> <p>Get all positions in Deck</p> RETURNS DESCRIPTION <code>dict[str, tuple[float] | dict]</code> <p>dict[str, tuple[float]]: dictionary of all positions</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.getSlot","title":"getSlot","text":"<pre><code>getSlot(value: int | str) -&gt; Slot | None\n</code></pre> <p>Get Labware in slot using slot id or name</p> PARAMETER DESCRIPTION <code>value</code> <p>slot id or name</p> <p> TYPE: <code>int | str</code> </p> RETURNS DESCRIPTION <code>Slot</code> <p><code>Slot</code> object</p> <p> TYPE: <code>Slot | None</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.isExcluded","title":"isExcluded","text":"<pre><code>isExcluded(coordinates: Sequence[float] | ndarray) -&gt; bool\n</code></pre> <p>Checks and returns whether the coordinates are in an excluded region</p> PARAMETER DESCRIPTION <code>coordinates</code> <p>x,y,z coordinates</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>whether coordinates are in an excluded region</p> <p> TYPE: <code>bool</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.loadLabware","title":"loadLabware","text":"<pre><code>loadLabware(dst_slot: Slot, labware: Labware)\n</code></pre> <p>Load <code>Labware</code> into <code>Slot</code></p> PARAMETER DESCRIPTION <code>dst_slot</code> <p>destination <code>Slot</code> object</p> <p> TYPE: <code>Slot</code> </p> <code>labware</code> <p><code>Labware</code> object</p> <p> TYPE: <code>Labware</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.loadNestedDeck","title":"loadNestedDeck","text":"<pre><code>loadNestedDeck(name: str, details: dict[str, Any])\n</code></pre> <p>Load nested <code>Deck</code> object from dictionary</p> PARAMETER DESCRIPTION <code>name</code> <p>name of nested <code>Deck</code></p> <p> TYPE: <code>str</code> </p> <code>details</code> <p>dictionary read from Deck file</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.removeLabware","title":"removeLabware","text":"<pre><code>removeLabware(src_slot: Slot) -&gt; Labware\n</code></pre> <p>Remove Labware from <code>Slot</code> using its name or index</p> PARAMETER DESCRIPTION <code>src_slot</code> <p>source <code>Slot</code> object</p> <p> TYPE: <code>Slot</code> </p> RETURNS DESCRIPTION <code>Labware</code> <p><code>Labware</code> object</p> <p> TYPE: <code>Labware</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.show","title":"show","text":"<pre><code>show(zoom_out: bool = False) -&gt; tuple[Figure, Axes]\n</code></pre> <p>Show Deck on matplotlib axis</p> PARAMETER DESCRIPTION <code>zoom_out</code> <p>whether to use zoomed out view. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tuple[Figure, Axes]</code> <p>tuple[matplotlib.pyplot.Figure, matplotlib.pyplot.Axes]: matplotlib figure, axes</p>"},{"location":"site/api/core/position.html#controllably.core.position.Deck.transferLabware","title":"transferLabware","text":"<pre><code>transferLabware(src_slot: Slot, dst_slot: Slot)\n</code></pre> <p>Transfer Labware between Slots</p> PARAMETER DESCRIPTION <code>src_slot</code> <p>source <code>Slot</code> object</p> <p> TYPE: <code>Slot</code> </p> <code>dst_slot</code> <p>destination <code>Slot</code> object</p> <p> TYPE: <code>Slot</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware","title":"Labware  <code>dataclass</code>","text":"<pre><code>Labware(\n    name: str,\n    _details: dict[str, Any],\n    parent: Slot | None = None,\n)\n</code></pre> <p>Labware represents a single Labware object</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>name of Labware</p> <p> TYPE: <code>str</code> </p> <code>native</code> <p>native Labware object (i.e. without parent)</p> <p> TYPE: <code>Labware</code> </p> <code>details</code> <p>dictionary read from Labware file</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>parent</code> <p>parent Slot object</p> <p> TYPE: <code>Slot | None</code> </p> <code>reference</code> <p>reference point of Slot</p> <p> TYPE: <code>Position</code> </p> <code>x</code> <p>x offset</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>y offset</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>z offset</p> <p> TYPE: <code>float</code> </p> <code>offset</code> <p>Labware offset from Slot reference point</p> <p> TYPE: <code>ndarray</code> </p> <code>center</code> <p>center of Labware</p> <p> TYPE: <code>ndarray</code> </p> <code>top</code> <p>top of Labware</p> <p> TYPE: <code>ndarray</code> </p> <code>bottom_left_corner</code> <p>bottom left corner of Labware</p> <p> TYPE: <code>Position</code> </p> <code>dimensions</code> <p>size of Labware</p> <p> TYPE: <code>ndarray</code> </p> <code>exclusion_zone</code> <p>exclusion zone to avoid</p> <p> TYPE: <code>BoundingBox</code> </p> <code>wells</code> <p>wells by columns (alias for wells_columns)</p> <p> TYPE: <code>dict[str, Well]</code> </p> <code>wells_columns</code> <p>wells by columns</p> <p> TYPE: <code>dict[str, Well]</code> </p> <code>wells_rows</code> <p>wells by rows</p> <p> TYPE: <code>dict[str, Well]</code> </p> <code>columns</code> <p>columns and wells in columns</p> <p> TYPE: <code>dict[int, list[str]]</code> </p> <code>rows</code> <p>rows and wells in rows</p> <p> TYPE: <code>dict[str, list[str]]</code> </p> <code>at</code> <p>namespace of all Wells</p> <p> TYPE: <code>SimpleNamespace</code> </p> <code>is_stackable</code> <p>whether Labware is stackable</p> <p> TYPE: <code>bool</code> </p> <code>is_tiprack</code> <p>whether Labware is a tiprack</p> <p> TYPE: <code>bool</code> </p> <code>slot_above</code> <p>Slot above (for stackable Labware)</p> <p> TYPE: <code>Slot | None</code> </p> METHOD DESCRIPTION <code>fromConfigs</code> <p>factory method to load Labware details from dictionary</p> <code>fromFile</code> <p>factory method to load Labware from file</p> <code>fromTop</code> <p>offset from top of Labware</p> <code>getAllPositions</code> <p>get all positions in Labware</p> <code>getWell</code> <p>get Well using its name</p> <code>listColumns</code> <p>list wells by columns</p> <code>listRows</code> <p>list  wells by rows</p> <code>listWells</code> <p>list wells, by columns or rows</p> <code>show</code> <p>show Labware on matplotlib axis</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.at","title":"at  <code>property</code>","text":"<pre><code>at: SimpleNamespace\n</code></pre> <p>Namespace of all wells</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.bottom_left_corner","title":"bottom_left_corner  <code>property</code>","text":"<pre><code>bottom_left_corner: Position\n</code></pre> <p>Bottom left corner of Labware</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.center","title":"center  <code>property</code>","text":"<pre><code>center: ndarray\n</code></pre> <p>Center of Labware</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.columns","title":"columns  <code>property</code>","text":"<pre><code>columns: dict[int, list[str]]\n</code></pre> <p>Columns and wells in columns</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.details","title":"details  <code>property</code>","text":"<pre><code>details: dict[str, str | float | tuple[float]]\n</code></pre> <p>Dictionary read from Labware file</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.dimensions","title":"dimensions  <code>property</code>","text":"<pre><code>dimensions: ndarray\n</code></pre> <p>Size of Labware</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.is_stackable","title":"is_stackable  <code>property</code> <code>writable</code>","text":"<pre><code>is_stackable: bool\n</code></pre> <p>Whether Labware is stackable</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.native","title":"native  <code>property</code>","text":"<pre><code>native: Labware\n</code></pre> <p>Native Labware object (i.e. without parent)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: ndarray\n</code></pre> <p>Labware offset from Slot reference point</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.reference","title":"reference  <code>property</code>","text":"<pre><code>reference: Position\n</code></pre> <p>Reference point of <code>Slot</code></p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.rows","title":"rows  <code>property</code>","text":"<pre><code>rows: dict[str, list[str]]\n</code></pre> <p>Rows and wells in rows</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.top","title":"top  <code>property</code>","text":"<pre><code>top: ndarray\n</code></pre> <p>Top of Labware</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.wells","title":"wells  <code>property</code>","text":"<pre><code>wells: dict[str, Well]\n</code></pre> <p>Wells by columns (alias for <code>wells_columns</code>)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.wells_columns","title":"wells_columns  <code>property</code>","text":"<pre><code>wells_columns: dict[str, Well]\n</code></pre> <p>Wells by columns</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.wells_rows","title":"wells_rows  <code>property</code>","text":"<pre><code>wells_rows: dict[str, Well]\n</code></pre> <p>Wells by rows</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.fromConfigs","title":"fromConfigs  <code>classmethod</code>","text":"<pre><code>fromConfigs(\n    details: dict[str, Any], parent: Slot | None = None\n) -&gt; Labware\n</code></pre> <p>Factory method to load Labware details from dictionary</p> PARAMETER DESCRIPTION <code>details</code> <p>dictionary read from Labware file</p> <p> TYPE: <code>dict</code> </p> <code>parent</code> <p>parent <code>Slot</code> object. Defaults to None.</p> <p> TYPE: <code>Slot | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Labware</code> <p><code>Labware</code> object</p> <p> TYPE: <code>Labware</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.fromFile","title":"fromFile  <code>classmethod</code>","text":"<pre><code>fromFile(\n    labware_file: str | Path,\n    parent: Slot | None = None,\n    from_repo: bool = True,\n)\n</code></pre> <p>Factory method to load Labware from file</p> PARAMETER DESCRIPTION <code>labware_file</code> <p>filepath of Labware file</p> <p> TYPE: <code>str | Path</code> </p> <code>parent</code> <p>parent <code>Slot</code> object. Defaults to None.</p> <p> TYPE: <code>Slot | None</code> DEFAULT: <code>None</code> </p> <code>from_repo</code> <p>whether to load from repo. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.fromTop","title":"fromTop","text":"<pre><code>fromTop(offset: Sequence[float] | ndarray) -&gt; ndarray\n</code></pre> <p>Offset from top of Labware</p> PARAMETER DESCRIPTION <code>offset</code> <p>x,y,z offset</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>top of Labware with offset</p> <p> TYPE: <code>ndarray</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.getAllPositions","title":"getAllPositions","text":"<pre><code>getAllPositions() -&gt; dict[\n    str, tuple[float] | dict[str, tuple[float] | float]\n]\n</code></pre> <p>Get all positions in Labware</p> RETURNS DESCRIPTION <code>dict[str, tuple[float] | dict[str, tuple[float] | float]]</code> <p>dict[str, tuple[float]: dictionary of all positions</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.getWell","title":"getWell","text":"<pre><code>getWell(name: str) -&gt; Well\n</code></pre> <p>Get <code>Well</code> using its name</p> PARAMETER DESCRIPTION <code>name</code> <p>name of well</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Well</code> <p><code>Well</code> object</p> <p> TYPE: <code>Well</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.listColumns","title":"listColumns","text":"<pre><code>listColumns() -&gt; list[list[str]]\n</code></pre> <p>List wells by columns</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.listRows","title":"listRows","text":"<pre><code>listRows() -&gt; list[list[str]]\n</code></pre> <p>List wells by rows</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.listWells","title":"listWells","text":"<pre><code>listWells(by: str = 'col') -&gt; list[Well]\n</code></pre> <p>List wells, by columns or rows</p> PARAMETER DESCRIPTION <code>by</code> <p>'columns' or 'rows'. Defaults to 'col'.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'col'</code> </p> RETURNS DESCRIPTION <code>list[Well]</code> <p>list[Well]: list of <code>Well</code> objects</p>"},{"location":"site/api/core/position.html#controllably.core.position.Labware.show","title":"show","text":"<pre><code>show(zoom_out: bool = False) -&gt; tuple[Figure, Axes]\n</code></pre> <p>Show Labware on matplotlib axis</p> PARAMETER DESCRIPTION <code>zoom_out</code> <p>whether to use zoomed out view. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>tuple[Figure, Axes]</code> <p>tuple[matplotlib.pyplot.Figure, matplotlib.pyplot.Axes]: matplotlib figure, axes</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position","title":"Position  <code>dataclass</code>","text":"<pre><code>Position(\n    _coordinates: Sequence[float] | ndarray = (0, 0, 0),\n    Rotation: Rotation = from_euler(\n        \"zyx\", (0, 0, 0), degrees=True\n    ),\n    rotation_type: str = \"euler\",\n    degrees: bool = True,\n)\n</code></pre> <p>Position represents a 3D position with orientation</p> ATTRIBUTE DESCRIPTION <code>coordinates</code> <p>X,Y,Z coordinates</p> <p> TYPE: <code>ndarray</code> </p> <code>degrees</code> <p>whether to use degrees for euler angles</p> <p> TYPE: <code>bool</code> </p> <code>Rotation</code> <p>scipy.spatial.transform.Rotation object</p> <p> TYPE: <code>Rotation</code> </p> <code>rotation</code> <p>rotation in preferred representation</p> <p> TYPE: <code>ndarray</code> </p> <code>rotation_type</code> <p>preferred representation of rotation</p> <p> TYPE: <code>str</code> </p> <code>rot_matrix</code> <p>rotation matrix</p> <p> TYPE: <code>ndarray</code> </p> <code>x</code> <p>X coordinate</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>Y coordinate</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>Z coordinate</p> <p> TYPE: <code>float</code> </p> <code>a</code> <p>euler angle a (rotation about x-axis)</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>euler angle b (rotation about y-axis)</p> <p> TYPE: <code>float</code> </p> <code>c</code> <p>euler angle c (rotation about z-axis)</p> <p> TYPE: <code>float</code> </p> METHOD DESCRIPTION <code>fromJSON</code> <p>create a Position object from string</p> <code>toJSON</code> <p>convert Position to string</p> <code>apply</code> <p>apply Position to another Position</p> <code>invert</code> <p>invert vector and rotation</p> <code>orientate</code> <p>orientate self by a rotation</p> <code>translate</code> <p>translate self by a vector</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.a","title":"a  <code>property</code>","text":"<pre><code>a: float\n</code></pre> <p>Euler angle a (rotation about x-axis)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.b","title":"b  <code>property</code>","text":"<pre><code>b: float\n</code></pre> <p>Euler angle b (rotation about y-axis)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.c","title":"c  <code>property</code>","text":"<pre><code>c: float\n</code></pre> <p>Euler angle c (rotation about z-axis)</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.coordinates","title":"coordinates  <code>property</code> <code>writable</code>","text":"<pre><code>coordinates: ndarray[float]\n</code></pre> <p>X,Y,Z coordinates</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.rot_matrix","title":"rot_matrix  <code>property</code>","text":"<pre><code>rot_matrix: ndarray\n</code></pre> <p>Rotation matrix</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.rotation","title":"rotation  <code>property</code> <code>writable</code>","text":"<pre><code>rotation: ndarray\n</code></pre> <p>Rotation in preferred representation</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.x","title":"x  <code>property</code>","text":"<pre><code>x: float\n</code></pre> <p>X coordinate</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.y","title":"y  <code>property</code>","text":"<pre><code>y: float\n</code></pre> <p>Y coordinate</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.z","title":"z  <code>property</code>","text":"<pre><code>z: float\n</code></pre> <p>Z coordinate</p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.apply","title":"apply","text":"<pre><code>apply(other: Position) -&gt; Position\n</code></pre> <p>Apply self to other <code>Position</code>, first translating and then orientating</p> PARAMETER DESCRIPTION <code>other</code> <p>other <code>Position</code></p> <p> TYPE: <code>Position</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>other <code>Position</code> transformed by self</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.fromJSON","title":"fromJSON  <code>staticmethod</code>","text":"<pre><code>fromJSON(value: str) -&gt; Position\n</code></pre> <p>Create a <code>Position</code> object from string</p> PARAMETER DESCRIPTION <code>value</code> <p>string representation of <code>Position</code></p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Position</code> <p><code>Position</code> object</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.invert","title":"invert","text":"<pre><code>invert() -&gt; Position\n</code></pre> <p>Invert vector and rotation</p> RETURNS DESCRIPTION <code>Position</code> <p>inverted <code>Position</code></p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.orientate","title":"orientate","text":"<pre><code>orientate(by: Rotation, inplace: bool = True) -&gt; Position\n</code></pre> <p>Orientate self by a rotation</p> PARAMETER DESCRIPTION <code>by</code> <p>rotation to orientate by</p> <p> TYPE: <code>Rotation</code> </p> <code>inplace</code> <p>whether to update self in place. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>updated <code>Position</code>, self if <code>inplace=True</code></p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Position.translate","title":"translate","text":"<pre><code>translate(\n    by: Sequence[float], inplace: bool = True\n) -&gt; Position\n</code></pre> <p>Translate self by a vector</p> PARAMETER DESCRIPTION <code>by</code> <p>translation vector</p> <p> TYPE: <code>Sequence[float]</code> </p> <code>inplace</code> <p>whether to update self in place. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>updated <code>Position</code>, self if <code>inplace=True</code></p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot","title":"Slot  <code>dataclass</code>","text":"<pre><code>Slot(\n    name: str,\n    _details: dict[str, Any],\n    parent: Deck | Labware,\n)\n</code></pre> <p>Slot represents a single Slot object on a Deck object or another Labware object (for stackable Labware)</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>name of Slot</p> <p> TYPE: <code>str</code> </p> <code>details</code> <p>dictionary read from Slot file</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>parent</code> <p>parent Deck or Labware object</p> <p> TYPE: <code>Deck | Labware</code> </p> <code>reference</code> <p>reference point of parent Deck or Labware</p> <p> TYPE: <code>Position</code> </p> <code>x</code> <p>x offset</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>y offset</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>z offset</p> <p> TYPE: <code>float</code> </p> <code>offset</code> <p>Slot offset from parent reference point</p> <p> TYPE: <code>ndarray</code> </p> <code>center</code> <p>center of Slot</p> <p> TYPE: <code>ndarray</code> </p> <code>bottom_left_corner</code> <p>bottom left corner of Slot</p> <p> TYPE: <code>Position</code> </p> <code>dimensions</code> <p>size of Slot</p> <p> TYPE: <code>ndarray</code> </p> <code>exclusion_zone</code> <p>exclusion zone of loaded Labware to avoid</p> <p> TYPE: <code>BoundingBox</code> </p> <code>loaded_labware</code> <p>Labware loaded in Slot</p> <p> TYPE: <code>Labware | None</code> </p> <code>slot_above</code> <p>Slot above</p> <p> TYPE: <code>Slot | None</code> </p> <code>slot_below</code> <p>Slot below</p> <p> TYPE: <code>Slot | None</code> </p> METHOD DESCRIPTION <code>fromCenter</code> <p>offset from center of Slot</p> <code>getAllPositions</code> <p>get all positions in Slot</p> <code>loadLabware</code> <p>load Labware in Slot</p> <code>loadLabwareFromConfigs</code> <p>load Labware from dictionary</p> <code>loadLabwareFromFile</code> <p>load Labware from file</p> <code>removeLabware</code> <p>remove Labware from Slot</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.center","title":"center  <code>property</code>","text":"<pre><code>center: ndarray\n</code></pre> <p>Center of Slot</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.details","title":"details  <code>property</code>","text":"<pre><code>details: dict[str, str | float | tuple[float]]\n</code></pre> <p>Dictionary read from Deck file</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.dimensions","title":"dimensions  <code>property</code>","text":"<pre><code>dimensions: ndarray\n</code></pre> <p>Size of Slot</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.exclusion_zone","title":"exclusion_zone  <code>property</code>","text":"<pre><code>exclusion_zone: BoundingBox | None\n</code></pre> <p>Exclusion zone of loaded Labware to avoid</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: ndarray\n</code></pre> <p>Slot offset from parent reference point</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.reference","title":"reference  <code>property</code>","text":"<pre><code>reference: Position\n</code></pre> <p>Reference point of parent <code>Deck</code> or <code>Labware</code></p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.stack","title":"stack  <code>property</code>","text":"<pre><code>stack: dict[str, Slot]\n</code></pre> <p>Stack of Labware in Slot, including Slot above</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.fromCenter","title":"fromCenter","text":"<pre><code>fromCenter(offset: Sequence[float] | ndarray) -&gt; ndarray\n</code></pre> <p>Offset from center of Slot</p> PARAMETER DESCRIPTION <code>offset</code> <p>x,y,z offset</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>center of Slot with offset</p> <p> TYPE: <code>ndarray</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.getAllPositions","title":"getAllPositions","text":"<pre><code>getAllPositions() -&gt; dict[str, tuple[float] | dict]\n</code></pre> <p>Get all positions in Slot</p> RETURNS DESCRIPTION <code>dict[str, tuple[float] | dict]</code> <p>dict[str, tuple[float]]: dictionary of all positions</p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.loadLabware","title":"loadLabware","text":"<pre><code>loadLabware(labware: Labware)\n</code></pre> <p>Load Labware in Slot</p> PARAMETER DESCRIPTION <code>labware</code> <p><code>Labware</code> object</p> <p> TYPE: <code>Labware</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.loadLabwareFromConfigs","title":"loadLabwareFromConfigs","text":"<pre><code>loadLabwareFromConfigs(details: dict[str, Any])\n</code></pre> <p>Load Labware from dictionary</p> PARAMETER DESCRIPTION <code>details</code> <p>dictionary read from Labware file</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.loadLabwareFromFile","title":"loadLabwareFromFile","text":"<pre><code>loadLabwareFromFile(\n    labware_file: str, from_repo: bool = True\n)\n</code></pre> <p>Load Labware from file</p> PARAMETER DESCRIPTION <code>labware_file</code> <p>filepath of Labware file</p> <p> TYPE: <code>str</code> </p> <code>from_repo</code> <p>whether to load from repo. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Slot.removeLabware","title":"removeLabware","text":"<pre><code>removeLabware() -&gt; Labware\n</code></pre> <p>Remove Labware from Slot</p> RETURNS DESCRIPTION <code>Labware</code> <p><code>Labware</code> object</p> <p> TYPE: <code>Labware</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Well","title":"Well  <code>dataclass</code>","text":"<pre><code>Well(\n    name: str,\n    _details: dict[str, str | float | tuple[float]],\n    parent: Labware,\n)\n</code></pre> <p>Well represents a single well in a Labware object</p> ATTRIBUTE DESCRIPTION <code>name</code> <p>name of well</p> <p> TYPE: <code>str</code> </p> <code>details</code> <p>dictionary read from Labware file</p> <p> TYPE: <code>dict[str, str | float | tuple[float]]</code> </p> <code>parent</code> <p>parent Labware object</p> <p> TYPE: <code>Labware</code> </p> <code>reference</code> <p>reference point of Labware</p> <p> TYPE: <code>Position</code> </p> <code>x</code> <p>x offset</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>y offset</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>z offset</p> <p> TYPE: <code>float</code> </p> <code>offset</code> <p>well offset from Labware reference point</p> <p> TYPE: <code>ndarray</code> </p> <code>center</code> <p>center of well base</p> <p> TYPE: <code>ndarray</code> </p> <code>bottom</code> <p>bottom of well</p> <p> TYPE: <code>ndarray</code> </p> <code>middle</code> <p>middle of well</p> <p> TYPE: <code>ndarray</code> </p> <code>top</code> <p>top of well</p> <p> TYPE: <code>ndarray</code> </p> <code>shape</code> <p>shape of well</p> <p> TYPE: <code>str</code> </p> <code>depth</code> <p>well depth</p> <p> TYPE: <code>float</code> </p> <code>volume</code> <p>volume of contents in well</p> <p> TYPE: <code>float</code> </p> <code>capacity</code> <p>total liquid capacity</p> <p> TYPE: <code>float</code> </p> <code>dimensions</code> <p>dimensions of base in mm</p> <p> TYPE: <code>tuple[float]</code> </p> <code>base_area</code> <p>base area of well in mm^2</p> <p> TYPE: <code>float</code> </p> <code>level</code> <p>height level of contents in well</p> <p> TYPE: <code>float</code> </p> METHOD DESCRIPTION <code>fromBottom</code> <p>offset from bottom of well</p> <code>fromMiddle</code> <p>offset from middle of well</p> <code>fromTop</code> <p>offset from top of well</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.base_area","title":"base_area  <code>property</code>","text":"<pre><code>base_area: float\n</code></pre> <p>Base area in mm^2</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.bottom","title":"bottom  <code>property</code>","text":"<pre><code>bottom: ndarray\n</code></pre> <p>Bottom of well</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.center","title":"center  <code>property</code>","text":"<pre><code>center: ndarray\n</code></pre> <p>Center of well base</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.details","title":"details  <code>property</code>","text":"<pre><code>details: dict[str, str | float | tuple[float]]\n</code></pre> <p>Dictionary read from Labware file</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.level","title":"level  <code>property</code>","text":"<pre><code>level: float\n</code></pre> <p>Height level of contents in well</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.middle","title":"middle  <code>property</code>","text":"<pre><code>middle: ndarray\n</code></pre> <p>Middle of well</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.offset","title":"offset  <code>property</code>","text":"<pre><code>offset: ndarray\n</code></pre> <p>Well offset from Labware reference point</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.reference","title":"reference  <code>property</code>","text":"<pre><code>reference: Position\n</code></pre> <p>Reference point of Labware</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.top","title":"top  <code>property</code>","text":"<pre><code>top: ndarray\n</code></pre> <p>Top of well</p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.fromBottom","title":"fromBottom","text":"<pre><code>fromBottom(offset: Sequence[float] | ndarray) -&gt; ndarray\n</code></pre> <p>Offset from bottom of well</p> PARAMETER DESCRIPTION <code>offset</code> <p>x,y,z offset</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>bottom of well with offset</p> <p> TYPE: <code>ndarray</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.fromMiddle","title":"fromMiddle","text":"<pre><code>fromMiddle(offset: Sequence[float] | ndarray) -&gt; ndarray\n</code></pre> <p>Offset from middle of well</p> PARAMETER DESCRIPTION <code>offset</code> <p>x,y,z offset</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>middle of well with offset</p> <p> TYPE: <code>ndarray</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.Well.fromTop","title":"fromTop","text":"<pre><code>fromTop(offset: Sequence[float] | ndarray) -&gt; ndarray\n</code></pre> <p>Offset from top of well</p> PARAMETER DESCRIPTION <code>offset</code> <p>x,y,z offset</p> <p> TYPE: <code>Sequence[float] | ndarray</code> </p> RETURNS DESCRIPTION <code>tuple</code> <p>top of well with offset</p> <p> TYPE: <code>ndarray</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.convert_to_position","title":"convert_to_position","text":"<pre><code>convert_to_position(value: Sequence | ndarray) -&gt; Position\n</code></pre> <p>Convert a value to a <code>Position</code> object</p> PARAMETER DESCRIPTION <code>value</code> <p>value to convert</p> <p> TYPE: <code>Sequence[float] | ndarray | Position</code> </p> RETURNS DESCRIPTION <code>Position</code> <p>converted <code>Position</code> object</p> <p> TYPE: <code>Position</code> </p>"},{"location":"site/api/core/position.html#controllably.core.position.get_transform","title":"get_transform","text":"<pre><code>get_transform(\n    initial_points: ndarray, final_points: ndarray\n) -&gt; tuple[Position, float]\n</code></pre> <p>Get transformation matrix from initial to final points, with the first point in each set being the center of rotation.</p> PARAMETER DESCRIPTION <code>initial_points</code> <p>initial points</p> <p> TYPE: <code>ndarray</code> </p> <code>final_points</code> <p>final points</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <code>tuple[Position, float]</code> <p>tuple[Position,float]: transformation Position (i.e. vector and rotation) and scale factor</p>"},{"location":"site/api/core/safety.html","title":"Safety","text":"<p>This module contains the functions and decorator for implementing safety measures in the robot. The decorator function is used to create guardrails for functions and functions, especially involving movement. The module also contains functions to set and reset the safety level for the safety measures.</p> ATTRIBUTE DESCRIPTION <code>DEBUG</code> <p>Safety mode that logs the function call</p> <p> TYPE: <code>int</code> </p> <code>DELAY</code> <p>Safety mode that waits for a few seconds before executing. Defaults to 3.</p> <p> TYPE: <code>int</code> </p> <code>SUPERVISED</code> <p>Safety mode that requires user input before executing</p> <p> TYPE: <code>int</code> </p> <code>safety_mode</code> <p>Safety mode for the safety measures</p> <p> TYPE: <code>int</code> </p> FUNCTION DESCRIPTION <code>guard </code> <p>Decorator for creating guardrails for functions and functions, especially involving movement</p> <code>set_level</code> <p>Set the safety level for the safety measures</p> <code>reset_level</code> <p>Reset the safety level to None</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.DEBUG","title":"DEBUG  <code>module-attribute</code>","text":"<pre><code>DEBUG = 0\n</code></pre> <p>Safety mode that logs the function call</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.DELAY","title":"DELAY  <code>module-attribute</code>","text":"<pre><code>DELAY = 3\n</code></pre> <p>Safety mode that waits for a few seconds before executing. Defaults to 3.</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.SUPERVISED","title":"SUPERVISED  <code>module-attribute</code>","text":"<pre><code>SUPERVISED = -10\n</code></pre> <p>Safety mode that requires user input before executing</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.safety_mode","title":"safety_mode  <code>module-attribute</code>","text":"<pre><code>safety_mode = None\n</code></pre> <p>Safety mode for the safety measures</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.guard","title":"guard","text":"<pre><code>guard(mode: int = DEBUG) -&gt; Callable\n</code></pre> <p>Decorator for creating guardrails for functions and functions, especially involving movement</p> PARAMETER DESCRIPTION <code>mode</code> <p>mode for implementing safety measure. Defaults to DEBUG. - DEBUG (0): logs the function call - DELAY (&gt;=1): waits for a few seconds before executing. Defaults to 3. - SUPERVISED (-10): requires user input before executing</p> <p> TYPE: <code>int</code> DEFAULT: <code>DEBUG</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>wrapped function</p> <p> TYPE: <code>Callable</code> </p>"},{"location":"site/api/core/safety.html#controllably.core.safety.reset_level","title":"reset_level","text":"<pre><code>reset_level()\n</code></pre> <p>Reset the safety level to None</p>"},{"location":"site/api/core/safety.html#controllably.core.safety.set_level","title":"set_level","text":"<pre><code>set_level(mode: int)\n</code></pre> <p>Set the safety level for the safety measures</p> PARAMETER DESCRIPTION <code>mode</code> <p>safety mode - DEBUG (0): logs the function call - DELAY (&gt;=1): waits for a few seconds before executing. Defaults to 3. - SUPERVISED (-10): requires user input before executing</p> <p> TYPE: <code>int</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html","title":"Server","text":"<p>This module provides a FastAPI server for managing commands and replies in a distributed system.</p> ATTRIBUTE DESCRIPTION <code>PORT</code> <p>The port number for the FastAPI server.</p> <p> TYPE: <code>int</code> </p> <code>HOST</code> <p>The host address for the FastAPI server.</p> <p> TYPE: <code>str</code> </p> FUNCTION DESCRIPTION <code>place_command</code> <p>Place a command in the outbound queue.</p> <code>place_reply</code> <p>Place a reply in the outbound queue.</p> <code>start_server</code> <p>Start the FastAPI server if it is not already running.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.Command","title":"Command","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for the FastAPI server.</p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.Reply","title":"Reply","text":"<p>               Bases: <code>BaseModel</code></p> <p>Reply model for the FastAPI server.</p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.clear_commands","title":"clear_commands","text":"<pre><code>clear_commands() -&gt; dict\n</code></pre> <p>Clear the commands in the outbound queue.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary indicating the status of the clear operation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.clear_commands_target","title":"clear_commands_target","text":"<pre><code>clear_commands_target(target: str) -&gt; dict\n</code></pre> <p>Clear the commands in the outbound queue for a specific target.</p> PARAMETER DESCRIPTION <code>target</code> <p>The target worker to clear the commands for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary indicating the status of the clear operation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.clear_replies","title":"clear_replies","text":"<pre><code>clear_replies() -&gt; dict\n</code></pre> <p>Clear the replies in the outbound queue.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary indicating the status of the clear operation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.clear_replies_target","title":"clear_replies_target","text":"<pre><code>clear_replies_target(request_id: str) -&gt; dict\n</code></pre> <p>Clear the replies in the outbound queue for a specific request_id.</p> PARAMETER DESCRIPTION <code>request_id</code> <p>The request ID to clear the reply for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary indicating the status of the clear operation.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.commands","title":"commands","text":"<pre><code>commands() -&gt; dict\n</code></pre> <p>Get the commands in the outbound queue.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the outbound commands.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.get_command","title":"get_command","text":"<pre><code>get_command(target: str) -&gt; Command\n</code></pre> <p>Get a command from the hub.</p> PARAMETER DESCRIPTION <code>target</code> <p>The target worker to get the command for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Command</code> <p>The command for the specified target worker.</p> <p> TYPE: <code>Command</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.get_reply","title":"get_reply","text":"<pre><code>get_reply(request_id: str) -&gt; Reply\n</code></pre> <p>Get a command from the hub.</p> PARAMETER DESCRIPTION <code>request_id</code> <p>The request ID to get the reply for.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Reply</code> <p>The reply for the specified request ID.</p> <p> TYPE: <code>Reply</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.place_command","title":"place_command","text":"<pre><code>place_command(command: Command) -&gt; str\n</code></pre> <p>Place a command in the outbound queue.</p> PARAMETER DESCRIPTION <code>command</code> <p>The command to place in the outbound queue.</p> <p> TYPE: <code>Command</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The request ID of the command.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.place_reply","title":"place_reply","text":"<pre><code>place_reply(reply: Reply) -&gt; str\n</code></pre> <p>Place a reply in the outbound queue.</p> PARAMETER DESCRIPTION <code>reply</code> <p>The reply to place in the outbound queue.</p> <p> TYPE: <code>Reply</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The reply ID of the reply.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.read_root","title":"read_root","text":"<pre><code>read_root() -&gt; dict\n</code></pre> <p>Root endpoint for the FastAPI server.</p> RETURNS DESCRIPTION <code>dict</code> <p>A simple greeting message.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.register_model","title":"register_model","text":"<pre><code>register_model(target: str) -&gt; dict\n</code></pre> <p>Register the model with the hub.</p> PARAMETER DESCRIPTION <code>target</code> <p>The target worker to register.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the list of registered workers.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.registry","title":"registry","text":"<pre><code>registry() -&gt; dict\n</code></pre> <p>See the registry of workers.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the worker registry.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.replies","title":"replies","text":"<pre><code>replies() -&gt; dict\n</code></pre> <p>Get the replies in the outbound queue.</p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the outbound replies.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.send_command","title":"send_command","text":"<pre><code>send_command(command: Command) -&gt; dict\n</code></pre> <p>Send a command to the hub.</p> PARAMETER DESCRIPTION <code>command</code> <p>The command to send.</p> <p> TYPE: <code>Command</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the request ID of the command.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.send_reply","title":"send_reply","text":"<pre><code>send_reply(reply: Reply) -&gt; dict\n</code></pre> <p>Send a command to the hub.</p> PARAMETER DESCRIPTION <code>reply</code> <p>The reply to send.</p> <p> TYPE: <code>Reply</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>A dictionary containing the reply ID of the reply.</p> <p> TYPE: <code>dict</code> </p>"},{"location":"site/api/examples/control/fastapi/server.html#controllably.examples.control.fastapi.server.start_server","title":"start_server","text":"<pre><code>start_server(host: str = HOST, port: int = PORT)\n</code></pre> <p>Start the FastAPI server if it is not already running.</p> PARAMETER DESCRIPTION <code>host</code> <p>The host address for the server.</p> <p> TYPE: <code>str</code> DEFAULT: <code>HOST</code> </p> <code>port</code> <p>The port number for the server.</p> <p> TYPE: <code>int</code> DEFAULT: <code>PORT</code> </p>"},{"location":"site/api/examples/control/fastapi/utils.html","title":"Utils","text":"<p>This module provides a FastAPI server for managing commands and replies in a distributed system.</p> ATTRIBUTE DESCRIPTION <code>CONNECTION_ERRORS</code> <p>Tuple of exceptions that indicate connection errors.</p> <p> TYPE: <code>tuple</code> </p> CLASS DESCRIPTION <code>FastAPIWorkerClient</code> <p>Client for managing worker connections to the FastAPI server.</p> <code>FastAPIUserClient</code> <p>Client for managing user connections to the FastAPI server.</p> FUNCTION DESCRIPTION <code>create_fastapi_user</code> <p>Create a FastAPI client instance for user interaction.</p> <code>create_fastapi_worker</code> <p>Create a FastAPI client instance for worker interaction.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIUserClient","title":"FastAPIUserClient","text":"<pre><code>FastAPIUserClient(host: str, port: int = 8000)\n</code></pre> <p>FastAPIUserClient is a singleton class that manages user connections to a FastAPI server. It allows users to join a hub, send commands, and receive replies from the hub. It maintains a registry of users and their associated request IDs, allowing for communication between users and the hub.</p> ATTRIBUTE DESCRIPTION <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>users</code> <p>A dictionary mapping user addresses to user controllers.</p> <p> TYPE: <code>dict[str, Controller]</code> </p> <code>request_ids</code> <p>A dictionary mapping request IDs to user controllers.</p> <p> TYPE: <code>dict[str, Controller]</code> </p> METHOD DESCRIPTION <code>join_hub</code> <p>Join a hub with the user controller.</p> <code>send_command</code> <p>Send a command to the hub.</p> <code>get_reply</code> <p>Get a reply from the hub based on a request ID.</p> <p>Initialize the FastAPIUserClient with the host and port.</p> PARAMETER DESCRIPTION <code>host</code> <p>The host address for the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port number for the FastAPI server, defaults to 8000.</p> <p> TYPE: <code>int</code> DEFAULT: <code>8000</code> </p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIUserClient.get_reply","title":"get_reply  <code>staticmethod</code>","text":"<pre><code>get_reply(\n    request_id: str,\n    url: str,\n    terminate: Event | None = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Get a reply from the hub.</p> PARAMETER DESCRIPTION <code>request_id</code> <p>The ID of the request to get the reply for.</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>terminate</code> <p>An event to signal termination, defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The reply from the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIUserClient.join_hub","title":"join_hub","text":"<pre><code>join_hub(user: Controller) -&gt; dict[str, Any]\n</code></pre> <p>Join a hub.</p> PARAMETER DESCRIPTION <code>user</code> <p>The user controller to join the hub.</p> <p> TYPE: <code>Controller</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The registry of the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIUserClient.send_command","title":"send_command  <code>staticmethod</code>","text":"<pre><code>send_command(\n    command: str | bytes,\n    url: str,\n    request_ids: dict[str, Controller],\n    users: dict[str, Controller],\n) -&gt; dict[str, Any]\n</code></pre> <p>Send a command to the hub.</p> PARAMETER DESCRIPTION <code>command</code> <p>The command to send.</p> <p> TYPE: <code>str | bytes</code> </p> <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>request_ids</code> <p>A dictionary mapping request IDs to users.</p> <p> TYPE: <code>dict[str, Controller]</code> </p> <code>users</code> <p>A dictionary mapping user addresses to user controllers.</p> <p> TYPE: <code>dict[str, Controller]</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The request ID returned by the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIWorkerClient","title":"FastAPIWorkerClient","text":"<pre><code>FastAPIWorkerClient(host: str, port: int = 8000)\n</code></pre> <p>FastAPIWorkerClient is a singleton class that manages worker connections to a FastAPI server. It allows workers to register with the hub, send commands, and receive replies from the hub. It maintains a registry of workers and their associated terminate and pause events, allowing for communication between workers and the hub.</p> ATTRIBUTE DESCRIPTION <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>workers</code> <p>A dictionary mapping worker addresses to worker controllers.</p> <p> TYPE: <code>dict[str, Controller]</code> </p> <code>terminate_events</code> <p>A dictionary mapping worker addresses to terminate events.</p> <p> TYPE: <code>dict[str, Event]</code> </p> <code>pause_events</code> <p>A dictionary mapping worker addresses to pause events.</p> <p> TYPE: <code>dict[str, Event]</code> </p> METHOD DESCRIPTION <code>update_registry</code> <p>Register a worker with the hub.</p> <code>get_command</code> <p>Get a command from the hub for a specific worker.</p> <code>send_reply</code> <p>Send a reply to the hub.</p> <code>create_listen_loop</code> <p>Create a loop for the worker to listen for commands from the hub.</p> <p>Initialize the FastAPIWorkerClient with the host and port.</p> PARAMETER DESCRIPTION <code>host</code> <p>The host address for the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port number for the FastAPI server, defaults to 8000.</p> <p> TYPE: <code>int</code> DEFAULT: <code>8000</code> </p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIWorkerClient.create_listen_loop","title":"create_listen_loop  <code>staticmethod</code>","text":"<pre><code>create_listen_loop(\n    worker: Controller,\n    sender: str | None = None,\n    terminate: Event | None = None,\n    pause: Event | None = None,\n) -&gt; Callable\n</code></pre> <p>Create a loop for the worker to listen for commands from the hub.</p> PARAMETER DESCRIPTION <code>worker</code> <p>The worker controller to listen for commands.</p> <p> TYPE: <code>Controller</code> </p> <code>sender</code> <p>The address of the sender, defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>terminate</code> <p>An event to signal termination, defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> <code>pause</code> <p>An event to signal pause, defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Callable</code> <p>A function that runs the loop for the worker.</p> <p> TYPE: <code>Callable</code> </p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIWorkerClient.get_command","title":"get_command  <code>staticmethod</code>","text":"<pre><code>get_command(\n    target: str, url: str, terminate: Event | None = None\n) -&gt; dict[str, Any]\n</code></pre> <p>Get a reply from the hub.</p> PARAMETER DESCRIPTION <code>target</code> <p>The address of the target worker.</p> <p> TYPE: <code>str</code> </p> <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>terminate</code> <p>An event to signal termination, defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The command from the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIWorkerClient.send_reply","title":"send_reply  <code>staticmethod</code>","text":"<pre><code>send_reply(reply: str | bytes, url: str) -&gt; dict[str, Any]\n</code></pre> <p>Send a reply to the hub.</p> PARAMETER DESCRIPTION <code>reply</code> <p>The reply to send.</p> <p> TYPE: <code>str | bytes</code> </p> <code>url</code> <p>The URL of the FastAPI server.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The reply ID returned by the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.FastAPIWorkerClient.update_registry","title":"update_registry","text":"<pre><code>update_registry(\n    worker: Controller, terminate: Event | None = None\n) -&gt; dict[str, Any]\n</code></pre> <p>Register a worker with the hub.</p> PARAMETER DESCRIPTION <code>worker</code> <p>The worker controller to register.</p> <p> TYPE: <code>Controller</code> </p> <code>terminate</code> <p>An event to signal termination, defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str, Any]: The registry of the hub.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.create_fastapi_user","title":"create_fastapi_user","text":"<pre><code>create_fastapi_user(\n    host: str, port: int, address: str | None = None\n) -&gt; tuple[Controller, dict[str, Any]]\n</code></pre> <p>Create a FastAPI client instance.</p> PARAMETER DESCRIPTION <code>host</code> <p>The host address for the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port number for the FastAPI server.</p> <p> TYPE: <code>int</code> </p> <code>address</code> <p>The address of the user, defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[Controller, dict[str, Any]]</code> <p>tuple[Controller, dict[str, Any]]: A tuple containing the Controller instance and a dictionary with the client.</p>"},{"location":"site/api/examples/control/fastapi/utils.html#controllably.examples.control.fastapi.utils.create_fastapi_worker","title":"create_fastapi_worker","text":"<pre><code>create_fastapi_worker(\n    host: str, port: int, address: str | None = None\n) -&gt; tuple[Controller, dict[str, Any]]\n</code></pre> <p>Create a FastAPI client instance.</p> PARAMETER DESCRIPTION <code>host</code> <p>The host address for the FastAPI server.</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>The port number for the FastAPI server.</p> <p> TYPE: <code>int</code> </p> <code>address</code> <p>The address of the worker, defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[Controller, dict[str, Any]]</code> <p>tuple[Controller, dict[str, Any]]: A tuple containing the Controller instance and a dictionary with the client.</p>"},{"location":"site/api/examples/control/socket/server.html","title":"Server","text":"<p>This module provides a socket hub server for managing connections in a distributed system.</p> ATTRIBUTE DESCRIPTION <code>PORT</code> <p>The port number for the socket hub server.</p> <p> TYPE: <code>int</code> </p> <code>HOST</code> <p>The host address for the socket hub server.</p> <p> TYPE: <code>str</code> </p> FUNCTION DESCRIPTION <code>start_server</code> <p>Starts the socket hub server.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/examples/control/socket/server.html#controllably.examples.control.socket.server.start_server","title":"start_server","text":"<pre><code>start_server()\n</code></pre> <p>Start the socket hub server.</p>"},{"location":"site/api/examples/control/socket/utils.html","title":"Utils","text":"<p>This module provides a socket server and client for managing connections in a distributed system.</p> ATTRIBUTE DESCRIPTION <code>BYTE_SIZE</code> <p>size of the byte.</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>SocketServer</code> <p>Class for handling socket server operations.</p> <code>SocketClient</code> <p>Class for handling socket client operations.</p> FUNCTION DESCRIPTION <code>create_listen_socket_callback</code> <p>Create a callback function for listening to socket data.</p> <code>create_socket_user</code> <p>Create a Socket client instance.</p> <code>create_socket_worker</code> <p>Create a Socket worker instance.</p> <code>create_socket_hub</code> <p>Create a Socket hub instance.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.SocketClient","title":"SocketClient","text":""},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.SocketClient.start_client","title":"start_client  <code>staticmethod</code>","text":"<pre><code>start_client(\n    host: str,\n    port: int,\n    controller: Controller,\n    relay: bool = False,\n    *,\n    terminate: Event | None = None,\n)\n</code></pre> <p>Starts the client</p> PARAMETER DESCRIPTION <code>host</code> <p>the host</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>the port</p> <p> TYPE: <code>int</code> </p> <code>controller</code> <p>the controller</p> <p> TYPE: <code>Controller</code> </p> <code>relay</code> <p>flag to indicate relay. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>terminate</code> <p>the termination event. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.SocketServer","title":"SocketServer","text":""},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.SocketServer.handle_client","title":"handle_client  <code>staticmethod</code>","text":"<pre><code>handle_client(\n    client_socket: socket,\n    client_addr: str,\n    controller: Controller,\n    client_role: str | None = None,\n    *,\n    terminate: Event | None = None,\n)\n</code></pre> <p>Handles communication with a single client</p> PARAMETER DESCRIPTION <code>client_socket</code> <p>the client socket</p> <p> TYPE: <code>socket</code> </p> <code>client_addr</code> <p>the client address</p> <p> TYPE: <code>str</code> </p> <code>controller</code> <p>the controller</p> <p> TYPE: <code>Controller</code> </p> <code>client_role</code> <p>the client role. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>terminate</code> <p>the termination event. Defaults to None.</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.SocketServer.start_server","title":"start_server  <code>staticmethod</code>","text":"<pre><code>start_server(\n    host: str,\n    port: int,\n    controller: Controller,\n    *,\n    n_connections: int = 5,\n    terminate: Event | None = None,\n)\n</code></pre> <p>Starts the server</p> PARAMETER DESCRIPTION <code>host</code> <p>the host</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>the port</p> <p> TYPE: <code>int</code> </p> <code>controller</code> <p>the controller</p> <p> TYPE: <code>Controller</code> </p> <code>n_connections</code> <p>the number of connections. Defaults to 5.</p> <p> TYPE: <code>int</code> DEFAULT: <code>5</code> </p> <code>terminate</code> <p>the termination event. Defaults to None</p> <p> TYPE: <code>Event | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.create_listen_socket_callback","title":"create_listen_socket_callback","text":"<pre><code>create_listen_socket_callback(\n    client_socket: socket, relay: bool\n) -&gt; Callable[[Any], str]\n</code></pre> <p>Create a callback function for listening to socket data.</p> PARAMETER DESCRIPTION <code>client_socket</code> <p>the client socket</p> <p> TYPE: <code>socket</code> </p> <code>relay</code> <p>flag to indicate if the socket is a relay</p> <p> TYPE: <code>bool</code> </p> RETURNS DESCRIPTION <code>Callable[[Any], str]</code> <p>Callable[[Any], str]: a function that listens for incoming data on the socket</p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.create_socket_hub","title":"create_socket_hub","text":"<pre><code>create_socket_hub(\n    host: str,\n    port: int,\n    address: str | None = None,\n    relay: bool = True,\n) -&gt; tuple[Controller, dict[str, Any]]\n</code></pre> <p>Create a Socket client instance.</p> PARAMETER DESCRIPTION <code>host</code> <p>the host address</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>the port number</p> <p> TYPE: <code>int</code> </p> <code>address</code> <p>the address to set for the controller. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>relay</code> <p>whether to relay messages. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>tuple[Controller, dict[str, Any]]</code> <p>tuple[Controller, dict[str,Any]]: a tuple containing the controller and a dictionary with termination event and thread information.</p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.create_socket_user","title":"create_socket_user","text":"<pre><code>create_socket_user(\n    host: str,\n    port: int,\n    address: str | None = None,\n    relay: bool = True,\n) -&gt; tuple[Controller, dict[str, Any]]\n</code></pre> <p>Create a Socket client instance.</p> PARAMETER DESCRIPTION <code>host</code> <p>the host address</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>the port number</p> <p> TYPE: <code>int</code> </p> <code>address</code> <p>the address to set for the controller. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>relay</code> <p>whether to relay messages. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>tuple[Controller, dict[str, Any]]</code> <p>tuple[Controller, dict[str,Any]]: a tuple containing the controller and a dictionary with termination event and thread information.</p>"},{"location":"site/api/examples/control/socket/utils.html#controllably.examples.control.socket.utils.create_socket_worker","title":"create_socket_worker","text":"<pre><code>create_socket_worker(\n    host: str,\n    port: int,\n    address: str | None = None,\n    relay: bool = True,\n) -&gt; tuple[Controller, dict[str, Any]]\n</code></pre> <p>Create a Socket client instance.</p> PARAMETER DESCRIPTION <code>host</code> <p>the host address</p> <p> TYPE: <code>str</code> </p> <code>port</code> <p>the port number</p> <p> TYPE: <code>int</code> </p> <code>address</code> <p>the address to set for the controller. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>relay</code> <p>whether to relay messages. Defaults to True.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>True</code> </p> RETURNS DESCRIPTION <code>tuple[Controller, dict[str, Any]]</code> <p>tuple[Controller, dict[str,Any]]: a tuple containing the controller and a dictionary with termination event and thread information.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html","title":"Gui","text":"<p>This module contains the Panel class for creating GUI panels.</p> CLASS DESCRIPTION <code>Panel</code> <p>Panel class for creating GUI panels.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel","title":"Panel","text":"<pre><code>Panel(principal: Proxy | Any | None = None)\n</code></pre> <p>Panel class for creating GUI panels.</p> ATTRIBUTE DESCRIPTION <code>principal</code> <p>The principal object bound to the Panel.</p> <p> TYPE: <code>Proxy | Any | None</code> </p> <code>object_id</code> <p>The ID of the principal object.</p> <p> TYPE: <code>str</code> </p> <code>title</code> <p>The title of the Panel.</p> <p> TYPE: <code>str</code> </p> <code>drawn</code> <p>A flag indicating if the Panel is drawn.</p> <p> TYPE: <code>bool</code> </p> <code>top_level</code> <p>A flag indicating if the Panel is a top-level window.</p> <p> TYPE: <code>bool</code> </p> <code>widget</code> <p>The tkinter.Tk object bound to the Panel.</p> <p> TYPE: <code>Tk</code> </p> <code>sub_panels</code> <p>A dictionary of sub-panels.</p> <p> TYPE: <code>dict[str, list[tuple[Panel, dict]]]</code> </p> <code>stream_update_callbacks</code> <p>A list of stream update callbacks.</p> <p> TYPE: <code>list[Callable]</code> </p> METHOD DESCRIPTION <code>bindObject</code> <p>Bind a principal object to the Panel.</p> <code>releaseObject</code> <p>Release the principal object from the Panel.</p> <code>bindWidget</code> <p>Bind a tkinter.Tk object to the Panel.</p> <code>releaseWidget</code> <p>Release the tkinter.Tk object from the Panel.</p> <code>show</code> <p>Show the Panel.</p> <code>close</code> <p>Close the Panel.</p> <code>getAttribute</code> <p>Get an attribute from the principal object.</p> <code>getAttributes</code> <p>Get multiple attributes from the principal object.</p> <code>execute</code> <p>Execute a method from the principal object.</p> <code>addPack</code> <p>Add a Panel to the layout using the pack geometry manager.</p> <code>addGrid</code> <p>Add a Panel to the layout using the grid geometry manager.</p> <code>addPanel</code> <p>Add a Panel to the layout.</p> <code>clearPanels</code> <p>Clear all the Panels from the layout.</p> <code>updateStream</code> <p>Update the Panel continuously.</p> <code>update</code> <p>Update the Panel values.</p> <code>refresh</code> <p>Refresh the Panel layout.</p> <code>addTo</code> <p>Add the Panel to a tkinter.Tk or tkinter.Frame object.</p> <p>Initialize a Panel object.</p> PARAMETER DESCRIPTION <code>principal</code> <p>The principal object to bind to the Panel.</p> <p> TYPE: <code>Proxy | Any | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.addGrid","title":"addGrid","text":"<pre><code>addGrid(panel: Panel, **kwargs)\n</code></pre> <p>Add a Panel to the layout using the grid geometry manager.</p> PARAMETER DESCRIPTION <code>panel</code> <p>The Panel to add.</p> <p> TYPE: <code>Panel</code> </p> <code>**kwargs</code> <p>The keyword arguments to pass to the grid</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.addPack","title":"addPack","text":"<pre><code>addPack(panel: Panel, **kwargs)\n</code></pre> <p>Add a Panel to the layout using the pack geometry manager.</p> PARAMETER DESCRIPTION <code>panel</code> <p>The Panel to add.</p> <p> TYPE: <code>Panel</code> </p> <code>**kwargs</code> <p>The keyword arguments to pass to the pack geometry manager.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.addPanel","title":"addPanel","text":"<pre><code>addPanel(mode: str, panel: Panel, **kwargs)\n</code></pre> <p>Add a Panel to the layout.</p> PARAMETER DESCRIPTION <code>mode</code> <p>The geometry manager to use.</p> <p> TYPE: <code>str</code> </p> <code>panel</code> <p>The Panel to add.</p> <p> TYPE: <code>Panel</code> </p> <code>**kwargs</code> <p>The keyword arguments to pass to the geometry manager.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.addTo","title":"addTo","text":"<pre><code>addTo(\n    master: Tk | Frame,\n    size: Iterable[int, int] | None = None,\n) -&gt; tuple[int, int] | None\n</code></pre> <p>Add the Panel to a tkinter.Tk or tkinter.Frame object.</p> PARAMETER DESCRIPTION <code>master</code> <p>The tkinter.Tk or tkinter.Frame object to add the Panel to.</p> <p> TYPE: <code>Tk | Frame</code> </p> <code>size</code> <p>The size of the Panel.</p> <p> TYPE: <code>Iterable[int, int] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>tuple[int, int] | None</code> <p>tuple[int,int]|None: The size of the Panel or None if an error occurred.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.bindObject","title":"bindObject","text":"<pre><code>bindObject(principal: Proxy | Any)\n</code></pre> <p>Bind a principal object to the Panel.</p> PARAMETER DESCRIPTION <code>principal</code> <p>The principal object to bind to the Panel.</p> <p> TYPE: <code>Proxy | Any</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.bindWidget","title":"bindWidget","text":"<pre><code>bindWidget(widget: Tk)\n</code></pre> <p>Bind a tkinter.Tk object to the Panel.</p> PARAMETER DESCRIPTION <code>widget</code> <p>The tkinter.Tk object to bind to the Panel.</p> <p> TYPE: <code>Tk</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.clearPanels","title":"clearPanels","text":"<pre><code>clearPanels()\n</code></pre> <p>Clear all the Panels from the layout.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the Panel.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.execute","title":"execute","text":"<pre><code>execute(method: Callable, *args, **kwargs) -&gt; Any | None\n</code></pre> <p>Execute a method from the principal object.</p> PARAMETER DESCRIPTION <code>method</code> <p>The method to execute.</p> <p> TYPE: <code>Callable</code> </p> <code>*args</code> <p>The positional arguments to pass to the method.</p> <p> TYPE: <code>tuple</code> DEFAULT: <code>()</code> </p> <code>**kwargs</code> <p>The keyword arguments to pass to the method.</p> <p> TYPE: <code>dict</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Any | None</code> <p>Any|None: The output of the method or None if an error occurred.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.getAttribute","title":"getAttribute","text":"<pre><code>getAttribute(\n    attribute: str, default: Any | None = None\n) -&gt; Any | None\n</code></pre> <p>Get an attribute from the principal object.</p> PARAMETER DESCRIPTION <code>attribute</code> <p>The attribute to get.</p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>The default value to return if the attribute is not found.</p> <p> TYPE: <code>Any | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Any | None</code> <p>Any|None: The value of the attribute or the default value.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.getAttributes","title":"getAttributes","text":"<pre><code>getAttributes(\n    *attr_defaults: tuple[str, Any],\n) -&gt; dict[str, Any]\n</code></pre> <p>Get multiple attributes from the principal object.</p> PARAMETER DESCRIPTION <code>*attr_defaults</code> <p>The attributes to get and their default values.</p> <p> TYPE: <code>tuple[str, Any]</code> DEFAULT: <code>()</code> </p> RETURNS DESCRIPTION <code>dict[str, Any]</code> <p>dict[str,Any]: A dictionary of the attributes and their values.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.refresh","title":"refresh","text":"<pre><code>refresh(**kwargs)\n</code></pre> <p>Refresh the Panel layout</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.releaseObject","title":"releaseObject","text":"<pre><code>releaseObject() -&gt; Proxy | Any\n</code></pre> <p>Release the principal object from the Panel.</p> RETURNS DESCRIPTION <code>Proxy | Any</code> <p>Proxy|Any: The principal object that was released.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.releaseWidget","title":"releaseWidget","text":"<pre><code>releaseWidget() -&gt; Tk | None\n</code></pre> <p>Release the tkinter.Tk object from the Panel.</p> RETURNS DESCRIPTION <code>Tk | None</code> <p>tk.Tk|None: The tkinter.Tk object that was released.</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.show","title":"show","text":"<pre><code>show(title: str = '')\n</code></pre> <p>Show the Panel.</p> PARAMETER DESCRIPTION <code>title</code> <p>The title of the Panel.</p> <p> TYPE: <code>str</code> DEFAULT: <code>''</code> </p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.update","title":"update","text":"<pre><code>update(**kwargs)\n</code></pre> <p>Update the Panel values</p>"},{"location":"site/api/examples/gui/tkinter/gui.html#controllably.examples.gui.tkinter.gui.Panel.updateStream","title":"updateStream","text":"<pre><code>updateStream(**kwargs)\n</code></pre> <p>Update the Panel continuously</p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html","title":"Move Gui","text":"<p>This module provides a GUI panel for controlling the robot's position and orientation.</p> ATTRIBUTE DESCRIPTION <code>PRECISION</code> <p>The number of decimal places to which to round the robot's position and orientation.</p> <p> TYPE: <code>int</code> </p> <code>TICK_INTERVAL</code> <p>The interval between tick marks on the rotation scales.</p> <p> TYPE: <code>int</code> </p> <code>BUTTON_HEIGHT</code> <p>The height of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> <code>BUTTON_WIDTH</code> <p>The width of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>Move</code> <p>A protocol for objects that can move and rotate.</p> <code>MovePanel</code> <p>A GUI panel for controlling the robot's position and orientation.</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel","title":"MovePanel","text":"<pre><code>MovePanel(principal: Move | Proxy | None = None)\n</code></pre> <p>               Bases: <code>Panel</code></p> <p>MovePanel is a GUI panel for controlling the robot's position and orientation.</p> ATTRIBUTE DESCRIPTION <code>principal</code> <p>The object to control.</p> <p> TYPE: <code>Move | Proxy | None</code> </p> <code>title</code> <p>The title of the panel.</p> <p> TYPE: <code>str</code> </p> <code>status</code> <p>The status of the robot connection.</p> <p> TYPE: <code>str</code> </p> <code>x</code> <p>The x-coordinate of the robot's position.</p> <p> TYPE: <code>float</code> </p> <code>y</code> <p>The y-coordinate of the robot's position.</p> <p> TYPE: <code>float</code> </p> <code>z</code> <p>The z-coordinate of the robot's position.</p> <p> TYPE: <code>float</code> </p> <code>a</code> <p>The angle around the x-axis (roll) of the robot's orientation.</p> <p> TYPE: <code>float</code> </p> <code>b</code> <p>The angle around the y-axis (pitch) of the robot's orientation.</p> <p> TYPE: <code>float</code> </p> <code>c</code> <p>The angle around the z-axis (yaw) of the robot's orientation.</p> <p> TYPE: <code>float</code> </p> <code>button_height</code> <p>The height of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> <code>button_width</code> <p>The width of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> <code>precision</code> <p>The number of decimal places to which to round the robot's position and orientation.</p> <p> TYPE: <code>int</code> </p> <code>tick_interval</code> <p>The interval between tick marks on the rotation scales.</p> <p> TYPE: <code>int</code> </p> METHOD DESCRIPTION <code>update</code> <p>Update the panel with the current position and orientation of the robot.</p> <code>refresh</code> <p>Refresh the panel with the current position and orientation of the robot.</p> <code>addTo</code> <p>Add the panel to a master widget.</p> <code>move</code> <p>Move the robot along the specified axis by the specified value.</p> <code>rotate</code> <p>Rotate the robot around the specified axis by the specified value.</p> <code>moveTo</code> <p>Move the robot to the specified position.</p> <code>rotateTo</code> <p>Rotate the robot to the specified orientation.</p> <code>home</code> <p>Move the robot to the home position.</p> <code>safe</code> <p>Move the robot to a safe height above the work surface.</p> <code>bindObject</code> <p>Bind a principal object to the Panel.</p> <code>releaseObject</code> <p>Release the principal object from the Panel.</p> <code>bindWidget</code> <p>Bind a tkinter.Tk object to the Panel.</p> <code>releaseWidget</code> <p>Release the tkinter.Tk object from the Panel.</p> <code>show</code> <p>Show the Panel.</p> <code>close</code> <p>Close the Panel.</p> <code>getAttribute</code> <p>Get an attribute from the principal object.</p> <code>getAttributes</code> <p>Get multiple attributes from the principal object.</p> <code>execute</code> <p>Execute a method from the principal object.</p> <code>addPack</code> <p>Add a Panel to the layout using the pack geometry manager.</p> <code>addGrid</code> <p>Add a Panel to the layout using the grid geometry manager.</p> <code>addPanel</code> <p>Add a Panel to the layout.</p> <code>clearPanels</code> <p>Clear all the Panels from the layout.</p> <code>updateStream</code> <p>Update the Panel continuously.</p> <p>Initialize the MovePanel.</p> PARAMETER DESCRIPTION <code>principal</code> <p>The object to control. Defaults to None.</p> <p> TYPE: <code>Move | Proxy | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.home","title":"home","text":"<pre><code>home()\n</code></pre> <p>Move the robot to the home position.</p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.move","title":"move","text":"<pre><code>move(axis: str, value: int | float)\n</code></pre> <p>Move the robot along the specified axis by the specified value.</p> PARAMETER DESCRIPTION <code>axis</code> <p>The axis along which to move the robot. Must be one of 'x', 'y', or 'z'.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The distance by which to move the robot along the specified axis.</p> <p> TYPE: <code>int | float</code> </p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.moveTo","title":"moveTo","text":"<pre><code>moveTo(\n    x: int | float | str | None = None,\n    y: int | float | str | None = None,\n    z: int | float | str | None = None,\n    a: int | float | str | None = None,\n    b: int | float | str | None = None,\n    c: int | float | str | None = None,\n)\n</code></pre> <p>Move the robot to the specified position.</p> PARAMETER DESCRIPTION <code>x</code> <p>The x-coordinate of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>y</code> <p>The y-coordinate of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>z</code> <p>The z-coordinate of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>a</code> <p>The angle around the x-axis (roll) of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>b</code> <p>The angle around the y-axis (pitch) of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p> <code>c</code> <p>The angle around the z-axis (yaw) of the position to which to move the robot.</p> <p> TYPE: <code>int | float | str | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.rotate","title":"rotate","text":"<pre><code>rotate(axis: str, value: int | float)\n</code></pre> <p>Rotate the robot around the specified axis by the specified value.</p> PARAMETER DESCRIPTION <code>axis</code> <p>The axis around which to rotate the robot. Must be one of 'a', 'b', or 'c'.</p> <p> TYPE: <code>str</code> </p> <code>value</code> <p>The angle by which to rotate the robot around the specified axis.</p> <p> TYPE: <code>int | float</code> </p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.rotateTo","title":"rotateTo","text":"<pre><code>rotateTo(\n    a: int | float | None = None,\n    b: int | float | None = None,\n    c: int | float | None = None,\n)\n</code></pre> <p>Rotate the robot to the specified orientation.</p> PARAMETER DESCRIPTION <code>a</code> <p>The angle around the x-axis (roll) to which to rotate the robot.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>b</code> <p>The angle around the y-axis (pitch) to which to rotate the robot.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p> <code>c</code> <p>The angle around the z-axis (yaw) to which to rotate the robot.</p> <p> TYPE: <code>int | float | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/move_gui.html#controllably.examples.gui.tkinter.move_gui.MovePanel.safe","title":"safe","text":"<pre><code>safe()\n</code></pre> <p>Move the robot to a safe height above the work surface.</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html","title":"Transfer Gui","text":"<p>This module contains the GUI panel for controlling liquid handling devices.</p> ATTRIBUTE DESCRIPTION <code>PRECISION</code> <p>The number of decimal places to display for liquid volumes</p> <p> TYPE: <code>int</code> </p> <code>TICK_INTERVAL</code> <p>The interval between ticks on the volume scale</p> <p> TYPE: <code>int</code> </p> <code>BUTTON_HEIGHT</code> <p>The height of the buttons in the panel</p> <p> TYPE: <code>int</code> </p> <code>BUTTON_WIDTH</code> <p>The width of the buttons in the panel</p> <p> TYPE: <code>int</code> </p> <code>SCALE_LENGTH</code> <p>The length of the volume scale in the panel</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>Liquid</code> <p>A protocol for liquid handling devices</p> <code>LiquidPanel</code> <p>A GUI panel for controlling liquid handling devices</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel","title":"LiquidPanel","text":"<pre><code>LiquidPanel(principal: Liquid | Proxy | None = None)\n</code></pre> <p>               Bases: <code>Panel</code></p> <p>LiquidPanel is a GUI panel for controlling liquid handling devices</p> ATTRIBUTE DESCRIPTION <code>principal</code> <p>The liquid handling device to control</p> <p> TYPE: <code>Liquid | Proxy | None</code> </p> <code>title</code> <p>The title of the panel</p> <p> TYPE: <code>str</code> </p> <code>status</code> <p>The status of the liquid handling device</p> <p> TYPE: <code>str</code> </p> <code>reagent</code> <p>The current reagent in the liquid handling device</p> <p> TYPE: <code>str</code> </p> <code>capacity</code> <p>The capacity of the liquid handling device</p> <p> TYPE: <code>float</code> </p> <code>volume</code> <p>The current volume of liquid in the liquid handling device</p> <p> TYPE: <code>float</code> </p> <code>channel</code> <p>The current channel of the liquid handling device</p> <p> TYPE: <code>int</code> </p> <code>tip_on</code> <p>The status of the tip on the liquid handling device</p> <p> TYPE: <code>bool</code> </p> <code>volume_field</code> <p>The volume to aspirate/dispense</p> <p> TYPE: <code>float</code> </p> <code>speed_field</code> <p>The speed to aspirate/dispense</p> <p> TYPE: <code>float</code> </p> <code>button_height</code> <p>The height of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> <code>button_width</code> <p>The width of the buttons in the GUI panel.</p> <p> TYPE: <code>int</code> </p> <code>precision</code> <p>The number of decimal places to which to round the robot's position and orientation.</p> <p> TYPE: <code>int</code> </p> <code>tick_interval</code> <p>The interval between tick marks on the rotation scales.</p> <p> TYPE: <code>int</code> </p> METHOD DESCRIPTION <code>update</code> <p>Update the status of the liquid handling device</p> <code>refresh</code> <p>Refresh the GUI panel</p> <code>addTo</code> <p>Add the GUI panel to a master widget</p> <code>aspirate</code> <p>Aspirate a volume of liquid from a container</p> <code>blowout</code> <p>Blowout the liquid from the pipette</p> <code>dispense</code> <p>Dispense a volume of liquid from the pipette</p> <code>empty</code> <p>Empty the liquid from the pipette</p> <code>fill</code> <p>Fill the pipette with liquid</p> <code>volumeTo</code> <p>Adjust the volume of liquid in the pipette to a specific value</p> <code>attach</code> <p>Attach a tip to the pipette</p> <code>eject</code> <p>Eject the tip from the pipette</p> <code>toggleTip</code> <p>Toggle the tip on the pipette</p> <code>bindObject</code> <p>Bind a principal object to the Panel.</p> <code>releaseObject</code> <p>Release the principal object from the Panel.</p> <code>bindWidget</code> <p>Bind a tkinter.Tk object to the Panel.</p> <code>releaseWidget</code> <p>Release the tkinter.Tk object from the Panel.</p> <code>show</code> <p>Show the Panel.</p> <code>close</code> <p>Close the Panel.</p> <code>getAttribute</code> <p>Get an attribute from the principal object.</p> <code>getAttributes</code> <p>Get multiple attributes from the principal object.</p> <code>execute</code> <p>Execute a method from the principal object.</p> <code>addPack</code> <p>Add a Panel to the layout using the pack geometry manager.</p> <code>addGrid</code> <p>Add a Panel to the layout using the grid geometry manager.</p> <code>addPanel</code> <p>Add a Panel to the layout.</p> <code>clearPanels</code> <p>Clear all the Panels from the layout.</p> <code>updateStream</code> <p>Update the Panel continuously.</p> <p>Initialize the LiquidPanel</p> PARAMETER DESCRIPTION <code>principal</code> <p>The liquid handling device to control</p> <p> TYPE: <code>Liquid | Proxy | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.aspirate","title":"aspirate","text":"<pre><code>aspirate(\n    volume: float,\n    speed: float | str | None = None,\n    reagent: str | None = None,\n)\n</code></pre> <p>Aspirate a volume of liquid from a container</p> PARAMETER DESCRIPTION <code>volume</code> <p>The volume of liquid to aspirate</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>The speed at which to aspirate the liquid</p> <p> TYPE: <code>float | str</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>The reagent to aspirate</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.attach","title":"attach","text":"<pre><code>attach()\n</code></pre> <p>Attach a tip to the pipette</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.blowout","title":"blowout","text":"<pre><code>blowout()\n</code></pre> <p>Blowout the liquid from the pipette</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.dispense","title":"dispense","text":"<pre><code>dispense(volume: float, speed: float | str | None = None)\n</code></pre> <p>Dispense a volume of liquid from the pipette</p> PARAMETER DESCRIPTION <code>volume</code> <p>The volume of liquid to dispense</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>The speed at which to dispense the liquid</p> <p> TYPE: <code>float | str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.eject","title":"eject","text":"<pre><code>eject()\n</code></pre> <p>Eject the tip from the pipette</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.empty","title":"empty","text":"<pre><code>empty(speed: float | str | None = None)\n</code></pre> <p>Empty the liquid from the pipette</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed at which to empty the liquid</p> <p> TYPE: <code>float | str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.fill","title":"fill","text":"<pre><code>fill(\n    speed: float | str | None = None,\n    reagent: str | None = None,\n)\n</code></pre> <p>Fill the pipette with liquid</p> PARAMETER DESCRIPTION <code>speed</code> <p>The speed at which to fill the pipette</p> <p> TYPE: <code>float | str</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>The reagent to fill the pipette with</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.toggleTip","title":"toggleTip","text":"<pre><code>toggleTip()\n</code></pre> <p>Toggle the tip on the pipette</p>"},{"location":"site/api/examples/gui/tkinter/transfer_gui.html#controllably.examples.gui.tkinter.transfer_gui.LiquidPanel.volumeTo","title":"volumeTo","text":"<pre><code>volumeTo(\n    volume: float,\n    speed: float | str | None = None,\n    reagent: str | None = None,\n)\n</code></pre> <p>Adjust the volume of liquid in the pipette to a specific value</p> PARAMETER DESCRIPTION <code>volume</code> <p>The volume to adjust to</p> <p> TYPE: <code>float</code> </p> <code>speed</code> <p>The speed at which to adjust the volume</p> <p> TYPE: <code>float | str</code> DEFAULT: <code>None</code> </p> <code>reagent</code> <p>The reagent to use for the adjustment</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html","title":"View Gui","text":"<p>This module contains the view panel for the camera feed.</p> ATTRIBUTE DESCRIPTION <code>BUTTON_HEIGHT</code> <p>Button height</p> <p> TYPE: <code>int</code> </p> <code>BUTTON_WIDTH</code> <p>Button width</p> <p> TYPE: <code>int</code> </p> CLASS DESCRIPTION <code>View</code> <p>Protocol for the view panel</p> <code>ViewPanel</code> <p>View panel for the camera feed</p> <p>Documentation last updated: 2025-02-22</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel","title":"ViewPanel","text":"<pre><code>ViewPanel(principal: View | Proxy | None = None)\n</code></pre> <p>               Bases: <code>Panel</code></p> <p>View panel for the camera feed</p> ATTRIBUTE DESCRIPTION <code>fps</code> <p>Frames per second</p> <p> TYPE: <code>int | float</code> </p> <code>size</code> <p>Frame size</p> <p> TYPE: <code>tuple[int, int]</code> </p> <code>is_connected</code> <p>Connection status</p> <p> TYPE: <code>bool</code> </p> <code>is_connected_previous</code> <p>Previous connection status</p> <p> TYPE: <code>bool</code> </p> <code>is_frozen</code> <p>Freeze status</p> <p> TYPE: <code>bool</code> </p> <code>latest_frame</code> <p>Latest frame</p> <p> TYPE: <code>ndarray | None</code> </p> <code>latest_image</code> <p>Latest image as a PIL Image</p> <p> TYPE: <code>Image | None</code> </p> <code>tk_image</code> <p>Latest image as a Tkinter image</p> <p> TYPE: <code>PhotoImage | None</code> </p> <code>loaded_filename</code> <p>Loaded filename</p> <p> TYPE: <code>str</code> </p> <code>last_visited_load_dir</code> <p>Last visited directory for loading files</p> <p> TYPE: <code>str</code> </p> <code>last_visited_save_dir</code> <p>Last visited directory for saving files</p> <p> TYPE: <code>str</code> </p> <code>button_height</code> <p>Button height</p> <p> TYPE: <code>int</code> </p> <code>button_width</code> <p>Button width</p> <p> TYPE: <code>int</code> </p> METHOD DESCRIPTION <code>updateStream</code> <p>Update the stream</p> <code>refresh</code> <p>Refresh the view</p> <code>addTo</code> <p>Add the view to the master widget</p> <code>getSaveDirectory</code> <p>Get the directory to save the image</p> <code>save</code> <p>Save the current image</p> <code>load</code> <p>Load an image file</p> <code>toggleConnect</code> <p>Toggle connection to the feed</p> <code>toggleFreeze</code> <p>Toggle the freeze state</p> <code>connect</code> <p>Connect to the feed</p> <code>disconnect</code> <p>Disconnect from the feed</p> <code>getFrame</code> <p>Get the next frame</p> <p>Initialize the view panel</p> PARAMETER DESCRIPTION <code>principal</code> <p>The principal object for the view panel</p> <p> TYPE: <code>View | Proxy | None</code> DEFAULT: <code>None</code> </p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.latest_image","title":"latest_image  <code>property</code>","text":"<pre><code>latest_image: Image | None\n</code></pre> <p>Latest image as a PIL Image</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.connect","title":"connect","text":"<pre><code>connect()\n</code></pre> <p>Connect to the feed</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from the feed</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.getFrame","title":"getFrame","text":"<pre><code>getFrame()\n</code></pre> <p>Get the next frame</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.getSaveDirectory","title":"getSaveDirectory","text":"<pre><code>getSaveDirectory()\n</code></pre> <p>Get the directory to save the image</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load an image file</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.save","title":"save","text":"<pre><code>save()\n</code></pre> <p>Save the current image</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.toggleConnect","title":"toggleConnect","text":"<pre><code>toggleConnect()\n</code></pre> <p>Toggle connection to the feed</p>"},{"location":"site/api/examples/gui/tkinter/view_gui.html#controllably.examples.gui.tkinter.view_gui.ViewPanel.toggleFreeze","title":"toggleFreeze","text":"<pre><code>toggleFreeze()\n</code></pre> <p>Toggle the freeze state</p>"},{"location":"site/api/examples/sila/factory.html","title":"Factory","text":"<p>This module provides functions to generate XML files for SiLA2 features based on Python classes. It includes functions to write feature headers, identifiers, display names, descriptions, properties, and commands. It also includes utility functions to convert naming conventions and handle data types. This is useful for creating SiLA2-compliant XML files that describe the features of a device or service.</p> <p>It is designed to be used with Python classes that represent SiLA2 features, allowing for easy generation of XML files that can be used in SiLA2 applications.</p> ATTRIBUTE DESCRIPTION <code>type_mapping</code> <p>A mapping of Python types to SiLA2 data types.</p> <p> TYPE: <code>dict</code> </p> <code>BASIC_TYPES</code> <p>A tuple of basic SiLA2 data types.</p> <p> TYPE: <code>tuple</code> </p> FUNCTION DESCRIPTION <code>create_xml</code> <p>Generates an XML file for the given SiLA2 feature class.</p> <code>write_feature</code> <p>Writes the XML structure for a SiLA2 feature based on a Python class.</p> <code>write_header</code> <p>Writes the header information for the SiLA2 feature XML.</p> <code>split_by_words</code> <p>Splits a string into words based on common naming conventions.</p> <code>to_pascal_case</code> <p>Converts a string to PascalCase.</p> <code>to_title_case</code> <p>Converts a string to Title Case.</p> <code>write_identifier</code> <p>Writes the identifier element for a SiLA2 feature.</p> <code>write_display_name</code> <p>Writes the display name element for a SiLA2 feature.</p> <code>write_description</code> <p>Writes the description element for a SiLA2 feature.</p> <code>write_observable</code> <p>Writes the observable element for a SiLA2 feature.</p> <code>write_data_type</code> <p>Writes the data type element for a SiLA2 feature.</p> <code>write_property</code> <p>Writes a property element for a SiLA2 feature.</p> <code>write_command</code> <p>Writes a command element for a SiLA2 feature.</p> <code>write_parameter</code> <p>Writes a parameter element for a SiLA2 command.</p> <code>write_response</code> <p>Writes a response element for a SiLA2 command.</p> <p>Documentation last updated: 2025-06-11</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.create_xml","title":"create_xml","text":"<pre><code>create_xml(prime: Any)\n</code></pre> <p>Write the XML data to a file.</p> PARAMETER DESCRIPTION <code>prime</code> <p>The SiLA2 feature class or instance to generate XML for.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.split_by_words","title":"split_by_words","text":"<pre><code>split_by_words(name_string: str) -&gt; list[str]\n</code></pre> <p>Splits a string into words based on common naming conventions (camelCase, snake_case, PascalCase, kebab-case).</p> PARAMETER DESCRIPTION <code>name_string</code> <p>The input string in any common naming convention.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[str]</code> <p>list[str]: A list of words extracted from the input string.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.to_pascal_case","title":"to_pascal_case","text":"<pre><code>to_pascal_case(name_string: str) -&gt; str\n</code></pre> <p>Converts various naming conventions (camelCase, snake_case, PascalCase, kebab-case) to PascalCase (e.g., \"MyClassName\").</p> PARAMETER DESCRIPTION <code>name_string</code> <p>The input string in any common naming convention.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The converted string in PascalCase.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.to_title_case","title":"to_title_case","text":"<pre><code>to_title_case(name_string: str) -&gt; str\n</code></pre> <p>Converts various naming conventions (camelCase, snake_case, PascalCase, kebab-case) to Title Case (e.g., \"My Awesome Variable\").</p> PARAMETER DESCRIPTION <code>name_string</code> <p>The input string in any common naming convention.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The converted string in Title Case.</p> <p> TYPE: <code>str</code> </p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_command","title":"write_command","text":"<pre><code>write_command(\n    attr: Callable,\n    parent: Element,\n    *,\n    observable: bool = False,\n) -&gt; Element\n</code></pre> <p>Write a command element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>attr</code> <p>The command attribute, typically a method of the feature class.</p> <p> TYPE: <code>Callable</code> </p> <code>parent</code> <p>The parent XML element to append the command to.</p> <p> TYPE: <code>Element</code> </p> <code>observable</code> <p>Whether the command is observable or not. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the command added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_data_type","title":"write_data_type","text":"<pre><code>write_data_type(\n    parent: Element,\n    data_type: str = \"Any\",\n    is_list: bool = False,\n) -&gt; Element\n</code></pre> <p>Write the data type element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the data type to.</p> <p> TYPE: <code>Element</code> </p> <code>data_type</code> <p>The data type text, defaults to \"Any\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Any'</code> </p> <code>is_list</code> <p>Whether the data type is a list or not.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the data type added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_description","title":"write_description","text":"<pre><code>write_description(parent: Element, text: str) -&gt; Element\n</code></pre> <p>Write the description element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the description to.</p> <p> TYPE: <code>Element</code> </p> <code>text</code> <p>The description text.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the description added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_display_name","title":"write_display_name","text":"<pre><code>write_display_name(parent: Element, text: str) -&gt; Element\n</code></pre> <p>Write the display name element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the display name to.</p> <p> TYPE: <code>Element</code> </p> <code>text</code> <p>The display name text to be converted to Title Case.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the display name added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_feature","title":"write_feature","text":"<pre><code>write_feature(prime: Any) -&gt; Element\n</code></pre> <p>Write the XML structure for a SiLA2 feature based on a Python class.</p> PARAMETER DESCRIPTION <code>prime</code> <p>The SiLA2 feature class or instance to generate XML for.</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The root element of the XML structure for the SiLA2 feature.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_header","title":"write_header","text":"<pre><code>write_header(\n    parent: Element,\n    originator: str = \"controllably\",\n    category: str = \"setup\",\n) -&gt; Element\n</code></pre> <p>Write the header information for the SiLA2 feature XML.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the header to.</p> <p> TYPE: <code>Element</code> </p> <code>originator</code> <p>The originator of the SiLA2 feature.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'controllably'</code> </p> <code>category</code> <p>The category of the SiLA2 feature.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'setup'</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the header information added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_identifier","title":"write_identifier","text":"<pre><code>write_identifier(parent: Element, text: str) -&gt; Element\n</code></pre> <p>Write the identifier element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the identifier to.</p> <p> TYPE: <code>Element</code> </p> <code>text</code> <p>The identifier text to be converted to PascalCase.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the identifier added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_observable","title":"write_observable","text":"<pre><code>write_observable(\n    parent: Element, observable: bool\n) -&gt; Element\n</code></pre> <p>Write the observable element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the observable to.</p> <p> TYPE: <code>Element</code> </p> <code>observable</code> <p>Whether the feature is observable or not.</p> <p> TYPE: <code>bool</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the observable added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_parameter","title":"write_parameter","text":"<pre><code>write_parameter(\n    parent: Element,\n    identifier: str,\n    display_name: str,\n    data_type: str,\n    *,\n    description: str = \"DESCRIPTION\",\n) -&gt; Element\n</code></pre> <p>Write a parameter element for a SiLA2 command.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the parameter to.</p> <p> TYPE: <code>Element</code> </p> <code>identifier</code> <p>The identifier of the parameter.</p> <p> TYPE: <code>str</code> </p> <code>display_name</code> <p>The display name of the parameter.</p> <p> TYPE: <code>str</code> </p> <code>data_type</code> <p>The data type of the parameter.</p> <p> TYPE: <code>str</code> </p> <code>description</code> <p>The description of the parameter. Defaults to \"DESCRIPTION\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DESCRIPTION'</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the parameter added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_property","title":"write_property","text":"<pre><code>write_property(\n    attr_name: str,\n    parent: Element,\n    *,\n    description: str = \"DESCRIPTION\",\n    observable: bool = False,\n) -&gt; Element\n</code></pre> <p>Write a property element for a SiLA2 feature.</p> PARAMETER DESCRIPTION <code>attr_name</code> <p>The name of the property attribute.</p> <p> TYPE: <code>str</code> </p> <code>parent</code> <p>The parent XML element to append the property to.</p> <p> TYPE: <code>Element</code> </p> <code>description</code> <p>The description of the property. Defaults to \"DESCRIPTION\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DESCRIPTION'</code> </p> <code>observable</code> <p>Whether the property is observable or not. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the property added.</p>"},{"location":"site/api/examples/sila/factory.html#controllably.examples.sila.factory.write_response","title":"write_response","text":"<pre><code>write_response(\n    parent: Element,\n    identifier: str = \"Response\",\n    display_name: str = \"Response\",\n    data_type: str = \"Any\",\n    *,\n    description: str = \"DESCRIPTION\",\n) -&gt; Element\n</code></pre> <p>Write a response element for a SiLA2 command.</p> PARAMETER DESCRIPTION <code>parent</code> <p>The parent XML element to append the response to.</p> <p> TYPE: <code>Element</code> </p> <code>identifier</code> <p>The identifier of the response. Defaults to \"Response\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Response'</code> </p> <code>display_name</code> <p>The display name of the response. Defaults to \"Response\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Response'</code> </p> <code>data_type</code> <p>The data type of the response. Defaults to \"Any\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'Any'</code> </p> <code>description</code> <p>The description of the response. Defaults to \"DESCRIPTION\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'DESCRIPTION'</code> </p> RETURNS DESCRIPTION <code>Element</code> <p>ET.Element: The parent element with the response added.</p>"}]}